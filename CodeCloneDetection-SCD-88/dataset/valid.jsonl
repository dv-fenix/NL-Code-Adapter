{"label": 61, "index": 7800, "code": "def find(scores):\n    for score in scores:\n        if score % 10 != 0: return score\n    return -1\n\ndef solve(scores):\n    x = find(scores)\n    if x == -1: return 0\n\n    total = sum(scores)\n    return total if total % 10 != 0 else total - x\n\nif __name__ == '__main__':\n    n = int(input())\n    scores = list(sorted(int(input()) for _ in range(n)))\n    print(solve(scores))\n"}
{"label": 61, "index": 7801, "code": "data=[]\nfor i in range(int(input())):\n    data.append(int(input()))\nun=[num for num in data if num%10==0]\ndata=[num for num in data if num%10!=0]\nif len(data)==0:\n    print(0)\nelse:\n    if sum(un+data)%10!=0:\n        print(sum(un+data))\n    else:\n        print(sum(un+data)-min(data))"}
{"label": 61, "index": 7802, "code": "n=int(input())\na =[]\nfor i in range(n):\n    a.append(int(input()))\n \na.sort()\ns=sum(a)\nif s%10==0:\n    for i in a:\n        if i%10>0:\n            s-=i\n            break\nif s%10>0:\n    print(s)\nelse:\n    print(0)\n "}
{"label": 61, "index": 7803, "code": "n = int(input())\ns=[]\nfor i in range(n):\n    s.append(int(input()))\n\ns.sort(key=lambda x:x%10)\n\nif sum(s) % 10 != 0:\n    print(sum(s))\nelif s[-1] % 10>0:\n    print(sum(s)-min(filter(lambda x:x%10>0,s)))\nelse:\n    print(0)\n\n"}
{"label": 61, "index": 7804, "code": "n = int(input())\nhaiten = list(map(int, [input() for i in range(n)]))\nhaiten.sort()\nscore = sum(haiten)\nif score%10 == 0:\n    for k, i in enumerate(haiten):\n        if i%10 ==0:\n            pass\n        else:\n            del haiten[k]\n            score = sum(haiten)\n            break\nif score%10 == 0:\n    print(0)\nelse:\n    print(score)        "}
{"label": 61, "index": 7805, "code": "n=int(raw_input())\ns=[int(raw_input()) for _ in xrange(n)]\nc=[]\nfor i in xrange(n):\n    if s[i]%10!=0:\n        c.append(s[i])\nif sum(s)%10!=0:\n    print sum(s)\nelse:\n    if len(c)>0:\n        print sum(s)-min(c)\n    else:\n        print 0\n"}
{"label": 61, "index": 7806, "code": "import sys\n\n# sys.stdin = open(\"c1.in\")\n\n\ndef solve():\n    n = int(input())\n    s = []\n    for i in range(n):\n        y = int(input())\n        s.append(y)\n\n\n    c = 0\n    for x in s:\n        if x % 10 == 0:\n            c += 1\n    if c == n:\n        return 0\n\n    r = 0\n    if sum(s) != 0 and sum(s) % 10 != 0:\n        return sum(s)\n    else:\n        m = 10 ** 20\n        for x in s:\n            if x % 10 != 0:\n                if x < m:\n                    m = x\n        return sum(s) - m\n\n\nres = solve()\nprint(res)\n"}
{"label": 61, "index": 7807, "code": "n = int(raw_input())\ns = []\nfor _ in xrange(n):\n    s.append(int(raw_input()))\nmx = sum(s)\nif mx % 10 != 0:\n    print mx\nelse:\n    s.sort()\n    for idx in xrange(len(s)):\n        if s[idx] % 10 != 0:\n            print mx - s[idx]\n            break\n    else:\n        print \"0\"\n"}
{"label": 61, "index": 7808, "code": "\nN = input()\narr = []\n\nfor i in range(N):\n    arr.append(input())\n\narr.sort()\nm = sum(arr)\nlength = len(arr)\n\nfor i in range(length):\n    if (m % 10) != 0:\n        break\n    elif(arr[i] % 10) != 0:\n        m -= arr[i]\n\nif (m % 10) != 0:\n    print m\nelse:\n    print 0"}
{"label": 61, "index": 7809, "code": "#!/bin/usr/python\n\nn = input()\n\ns = [0 for i in range(100)]\na = 0\n\nfor i in range(n):\n  s[i] = input()\n  a += s[i]\n\nflag = True\nif a % 10 == 0:\n  s = sorted(s)\n  for i in range(n):\n    if s[-1*n + i] % 10 != 0:\n      a -= s[-1*n + i]\n      break\n\nif a % 10 == 0:\n  a = 0\n\nprint(a)"}
{"label": 61, "index": 7810, "code": "n = int(input())\ns = [int(input()) for i in range(n)]\nnotTenTimes = list(filter(lambda x: x % 10 != 0, s))\nans = sum(s)\n\nif sum(s) % 10 == 0:\n    if(len(notTenTimes)):\n        ans -= min(notTenTimes)\n    else:\n        ans = 0\n\nprint(ans)\n\n"}
{"label": 61, "index": 7811, "code": "def mod10(i):\n    if i%10 ==0:\n        return 0\n    else:\n        return 1\n    \n\n\nN = int(raw_input())\n_sum = 0\ndata = []\nfor _ in xrange(N):\n    s = int(raw_input())\n    _sum += s\n    data.append(s)\ndata = sorted(data)\nmods = map(mod10,data)\nif _sum%10 == 0:\n    if mods.count(1)>0:\n        print _sum - data[mods.index(1)]\n    else:\n        print 0\nelse:\n    print _sum\n\n    "}
{"label": 61, "index": 7812, "code": "\ndef f(scores):\n    res = sum(scores)\n    if res % 10 == 0:\n        candidates = list(score for score in scores if score % 10 != 0)\n        if candidates:\n            res -= min(candidates)\n        else:\n            res = 0\n    return res\n \nN = int(input())\nscores = []\nfor _ in range(N):\n    scores.append(int(input()))\nprint(f(scores))"}
{"label": 61, "index": 7813, "code": "\nimport sys\n\nN = int(input())\n\nscores = []\nsum_score = 0\nfor _ in range(N):\n    s = int(input())\n    scores.append(s)\n    sum_score += s\n\nif sum_score % 10 != 0:\n    print(sum_score)\n    sys.exit(0)\n\ntmp_max = 0\nfor s in scores:\n    tmp = sum_score - s\n    if tmp % 10 == 0:\n        tmp = 0\n    if tmp > tmp_max:\n        tmp_max = tmp\n\nprint(tmp_max)"}
{"label": 61, "index": 7814, "code": "N = int(raw_input())\n\ns = []\n\nfor i in range(N):\n    s.append(int(raw_input()))\n\ns.sort()\n\nans = sum(s)\n\nfor i in range(N):\n    if ans % 10 == 0:\n        if s[i] % 10 == 0:\n            pass\n        else:\n            ans -= s[i]\n    else:\n        break\n\nif ans % 10 == 0:\n    print 0\nelse:\n    print ans"}
{"label": 61, "index": 7815, "code": "a = input()\nl = []\n\nfor i in range(a):\n\tl.append(input())\n\nl.sort()\ni = 0\n# l = l[::-1]\ns = sum(l)\nwhile s % 10 == 0 and i < len(l):\n\tif l[i] % 10 != 0:\n\t\ts -= l[i]\n\ti += 1\n\nif s % 10 == 0:\n\ts = 0\nprint s"}
{"label": 61, "index": 7816, "code": "import sys\ni=0\nj=0\nk=0\nt=0\nm=0\ns=0\nlists=[]\nlists2 =[]\n\n#\u6570\u5024\u306e\u6570\u3092\u53d7\u3051\u53d6\u308b\nline = int(input())\n\n#\u6570\u5024\u3092\u53d7\u3051\u53d6\u3063\u3066\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\nwhile i < line:\n\ta = int(input())\n\t#print (a)\n\tlists.insert(i,a)\n\ti +=1\n\n#\u6570\u5024\u306e\u8db3\u3057\u5408\u308f\u305b\nwhile j < line:\n    s += lists[j]\n    j +=1\n\n#\u6b63\u3057\u3051\u308c\u3070\u51fa\u529b\nif s%10 != 0:\n\tprint(s)\nelse:\n    #10\u306e\u500d\u6570\u4ee5\u5916\u306e\u30ea\u30b9\u30c8\u4f5c\u6210\n    while k < line:\n        if lists[k]%10 != 0:\n\t        lists2.insert(m,lists[k])\n\t        m +=1\n        k +=1\n    if lists2 !=[]:\n        t = min(lists2)\n        print(s-t)\n    else:\n    \tprint(0)"}
{"label": 61, "index": 7817, "code": "import itertools\n\nN = int(raw_input())\n\ns =[]\nfor i in range(N):\n    s.append( int(raw_input()) )\n\ns.sort()\ns.reverse()\n\namari = map(lambda x:x%10, s)\nif sum(amari)==0:\n    print 0\nelse:\n    _max = 0\n    for i in reversed(range(N)):\n        cs = list(itertools.combinations(s,i+1))\n        for c in cs:\n            _temp = reduce(lambda x, y:x+y, c)\n            if _temp % 10==0:\n                pass\n            else:\n                _max=_temp\n            if _max>0:\n                break\n        if _max>0:\n            break\n\n    print _max"}
{"label": 61, "index": 7818, "code": "N = int(input())\ns = []\nfor _ in range(N):\n    s.append(int(input()))\n\nif sum(s) % 10 != 0:\n    print(sum(s))\n\nelse:\n    min_s = 0\n    sorted_s = sorted(s, reverse=True)\n    for ss in sorted_s:\n        if ss % 10 != 0:\n            min_s = ss\n\n    if min_s == 0:\n        print(0)\n    else:\n        print(sum(s) - min_s)\n"}
{"label": 61, "index": 7819, "code": "N=int(input())\ns_list=[int(input()) for _ in range(N)]\n# N = 10\n# s_list = [17, 30, 1, 19, 20, 20, 23, 13, 35, 12]\ns_list = sorted(s_list)\ntotal = sum(s_list)\n# print(total)\nif (total %10 !=0):\n    print(total)\nelse:\n    for s in s_list:\n        if ((total-s) %10 !=0):\n            print(total-s)\n            break\n    else:\n        print(0)\n"}
{"label": 61, "index": 7820, "code": "n = int(input())\ns = [int(input()) for i in range(n)]\n\ny = []\nfor i in range(n):\n    if s[i] % 10 != 0:\n        y.append(s[i])\n\nif sum(s) % 10 != 0:\n    print(sum(s))\nelif len(y) > 0:\n    print(sum(s)-min(y))\nelse:\n    print(0)\n"}
{"label": 61, "index": 7821, "code": "def sum(lst):\n\ta = 0\n\tfor i in range(0, len(lst)):\n\t\ta += lst[i]\n\treturn a\n\ndef judge(score):\n\ts = sum(score)\n\tif s % 10 != 0:\n\t\treturn s\n\tfor i in range(0, len(score)):\n\t\tif score[i] % 10 != 0:\n\t\t\treturn s - score[i]\n\treturn 0\n\nn = int(raw_input())\nscore = []\nfor i in range(0, n):\n\tscore.append(int(raw_input()))\nscore.sort()\nprint judge(score)\n"}
{"label": 61, "index": 7822, "code": "import sys\n\nN = int(input())\nscores = []\nbox = []\ncnt = 0\nfor i in range(N):\n    scores.append(int(input()))\n\nscores.sort()\ngokei = sum(scores)\n\nif gokei % 10 == 0:\n    for i in range(N):\n        aaa = gokei - scores[i]\n        if aaa % 10 != 0:\n            box.append(aaa)\n\nelse:\n    print(gokei)\n    sys.exit()\n    \nif box != []:\n    print(max(box))\nelse:\n    print(0)"}
{"label": 61, "index": 7823, "code": "import sys\nN=int(input())\nS=[]\nfor i in range(N):\n  S+=[int(input())] \nS.sort()\n\nans=0\nfor i in range(N):\n  ans+=S[i]\nif ans%10!=0:\n  print(ans)\n  sys.exit\nelse:\n  for i in range(N):\n    if S[i]%10!=0:\n      print(ans-S[i])\n      sys.exit()\n  print(0)\n"}
{"label": 61, "index": 7824, "code": "N = int(input())\n\ns = []\nfor _ in range(N):\n    s.append(int(input()))\n    \ns = sorted(s)\n\nif sum(s) % 10 == 0:\n    for i in range(len(s)):\n        if s[i] % 10 != 0:\n            print(sum(s[:i]) + sum(s[i+1:]))\n            break\n    else:\n        print(0)\n        \nelse:\n    print(sum(s))"}
{"label": 61, "index": 7825, "code": "N = int(input())\n\nnums = []\nmax = 0\n\nfor i in range(0, N):\n    nums.append(int(input()))\n\nmx = sum(nums)\nif mx % 10 != 0:\n    print(str(mx))\n    quit()\n\nchecker = [False for i in range(0, mx+1)]\n\nnow = 0\nres = 0\nfor i in range(0, N):\n    v = nums[i]\n    for j in range(now, -1, -1):\n        if checker[j]:\n            idx = j + v\n            if idx > res and idx % 10 != 0:\n                res = idx\n            checker[idx] = True\n    checker[v] = True\n    now = now + v\n\nprint(str(res))"}
{"label": 61, "index": 7826, "code": "n = int(input())\ns = sorted([int(input()) for i in range(n)])\n\nans = 0\nif sum(s) % 10 != 0:\n    print(sum(s))\nelse:\n    for i in s:\n        if i % 10 != 0:\n            ans = sum(s) - i\n            print(ans)\n            break\n    if ans == 0:\n        print(ans)\n"}
{"label": 61, "index": 7827, "code": "n = int(input())\na = list(int(input()) for i in range(n))\na.sort()\nb = sum(a)\n\nc = b\n\nfor j in range(100) :\n  for i in range(n) :\n    if c % 10 == 0 :\n      c = b - a[i]\n      if c == 0 :\n        break\n    else :\n      break\n  b = b - a[i]\n  n = n - 1\n\nprint (c)"}
{"label": 61, "index": 7828, "code": "N = int(input())\ns = []\nfor i in range(N):\n\ts.append(int(input()))\ns.sort()\nsum = sum(s)\nans = 0\nif sum % 10 != 0:\n\tans = sum\nelse:\n\tfor i in range(N):\n\t\tif s[i] % 10 != 0:\n\t\t\tans = sum - s[i]\n\t\t\tbreak\nprint(ans)\n"}
{"label": 61, "index": 7829, "code": "if __name__ == '__main__':\n    N = int(input())\n    s = []\n    for i in range(N):\n        s.append(int(input()))\n\n    not_10_multi = list(filter(lambda x: (x % 10) != 0, s))\n\n    if sum(s) % 10 != 0:\n        print(sum(s))\n    elif len(not_10_multi) == 0:\n        print(0)\n    else:\n        print(sum(s) - min(not_10_multi))\n"}
{"label": 61, "index": 7830, "code": "n = int(input())\nl = []\nfor i in range(n):\n l.append(int(input()))\nl.sort()\na = sum(l)\nfor i in range(n):\n if a%10 == 0:\n  if l[i]%10 != 0:\n   a -= l[i]\n else:\n  break\na = a if a%10 != 0 else 0\nprint(a)"}
{"label": 61, "index": 7831, "code": "n = int(input())\ns = [int(input()) for _ in range(n)]\nk = []\nk1 = []\n\nfor i in range(n):\n    k.append(s[i])\n    if s[i]%10!=0:\n        k1.append(s[i])\n\nif sum(k)%10!=0:\n    print(sum(k))\nelse:\n    if len(k1)==0:\n        print(0)\n    else:\n        k1.sort()\n        print(sum(k)-k1[0])\n"}
{"label": 61, "index": 7832, "code": "N=int(input())\ns_n=[int(input()) for i in range(N)]\n\nans=sum(s_n)\nwhile ans%10==0:\n    if s_n==[]:\n        ans=0\n        break\n    ans-=min(s_n)\n    if ans%10==0:\n        ans+=min(s_n)\n        s_n.remove(min(s_n))\n\n\nprint(ans)"}
{"label": 61, "index": 7833, "code": "N = int(input())\ns = [int(input()) for i in range(N)]\nS = sum(s)\na = sorted(s)\ni = 0\nflag = 0\n\nif S % 10 != 0:\n\tprint(S)\nelse:\n\twhile i < N:\n\t\tif a[i] % 10 != 0:\n\t\t\tprint(S - a[i])\n\t\t\tflag = 0\n\t\t\tbreak\n\t\telse:\n\t\t\ti += 1\n\t\t\tflag = 1\n\nif flag == 1:\n\tprint(0)\n"}
{"label": 61, "index": 7834, "code": "import numpy as np\nn = int(input())\ns = list()\nfor i in range(n):\n    s.append(int(input()))\n    \na = np.array(s)\ngoukei = a.sum()\n\nif goukei % 10 == 0:\n    if (a % 10 == 0).all():\n        print(0)\n    else:\n        print(goukei - a[a % 10 > 0].min())\nelse:\n    print(goukei)"}
{"label": 61, "index": 7835, "code": "N = int(input())\nS = sorted([int(input()) for i in range(N)])\n\ntot = sum(S)\nif tot % 10 != 0:\n    print(tot)\nelse:\n    p = 0\n    for val in S:\n        if val % 10 != 0:\n            p = val\n            break\n    if p != 0:\n        print(tot - p)\n    else:\n        print(0)\n"}
{"label": 61, "index": 7836, "code": "N = int(input())\ns = []\nc=[]\nfor i in range(N):\n    s.append(int(input()))\nd=sum(s)\nif sum(s)%10!=0:\n    print(sum(s))\nelse:\n    for i in range(len(s)):\n        if s[i]%10>0:\n            c.append(s[i])\n    if c==[]:\n        print(0)\n    else:\n        print(d-min(c))\n"}
{"label": 61, "index": 7837, "code": "#coding: utf-8\n#score\u306e\u4e2d\u304b\u308910\u306e\u500d\u6570\u3067\u306a\u304f\u304b\u3064\u6700\u5c0f\u306e\u3082\u306e\u3092\u8fd4\u3059\ndef search_min(list):\n    l = []\n    for i in list:\n        if i % 10 != 0:\n            l.append(i)\n    if len(l) > 0:\n        return min(l)\n    else:\n        return 0\n\n\n\nN = int(input())\nscore = [int(input()) for i in range(N)]\n\nsum = 0\nfor i in score:\n    sum = sum + i\n\nif sum % 10 != 0:\n    print (sum)\nelse:\n    s = 0\n    while s % 10 == 0:\n        m = search_min(score)\n        if m == 0:#\u914d\u70b9\u304c\u3059\u3079\u306610\u306e\u500d\u6570\u306e\u3068\u304d\n            break\n        else:\n            s = sum - m\n            score.remove(m)\n    print (s)"}
{"label": 61, "index": 7838, "code": "import sys\nN = int(input())\ns = []\n\nfor i in range(N):\n    s.append(int(input()))\n\nans = sum(s)\n\nif ans % 10 != 0:\n    print(ans)\nelse:\n    s.sort()\n    for i in range(N):\n        if (ans - s[i]) % 10 != 0:\n            print(ans-s[i])\n            sys.exit()\n\n    print(0)\n"}
{"label": 61, "index": 7839, "code": "import sys\n\nN = int(input())\ns = []\nfor i in range(N):\n    s.append(int(input()))\n\nif sum(s) % 10 != 0:\n    print(sum(s))\nelse:\n    for i in sorted(s):\n        if i % 10 != 0:\n            print(sum(s) - i)\n            sys.exit()\n    print(0)\n"}
{"label": 61, "index": 7840, "code": "nb = int(input())\ntotale = 0\nt = []\nfor i in range(nb):\n   a = int(input())\n   totale = totale + a\n   t.append(a)\nif totale % 10 == 0:\n   m = 1000000\n   for i in range(nb):\n      if (t[i]) % 10 != 0:\n         m = min(m,t[i])\n   if m%10 != 0:\n      print(totale-m)\n   else:\n      print(0)\nelse:\n   print(totale)\n"}
{"label": 61, "index": 7841, "code": "N = int(input())\n\ns_min = 200\nsum = 0\nfor _ in range(N):\n    s_i = int(input())\n    sum += s_i\n    if s_i % 10 != 0:\n        if s_min > s_i:\n            s_min = s_i\n\n\nif sum % 10 != 0:\n    print(sum)\nelse:\n    if s_min == 200:\n        print(0)\n    else:\n        print(sum - s_min)\n"}
{"label": 61, "index": 7842, "code": "n = int(input())\nnumbers = list(map(int, [input() for _ in range(n)]))\nnumbers.sort()\nscore = sum(numbers)\n\nif score % 10 == 0:\n\tfor i in numbers:\n\t\tif i % 10 == 0:\n\t\t\tpass\n\t\telse:\n\t\t\tscore -= i\n\t\t\tbreak\n\nif score % 10 == 0:\n\tprint(0)\nelse:\n\tprint(score)"}
{"label": 61, "index": 7843, "code": "import heapq\n\ndef solve(scores):\n  sm = sum(scores)\n  if(sm % 10 != 0): return sm\n  heapq.heapify(scores)\n  while scores:\n    mn = heapq.heappop(scores)\n    sm -= mn\n    if(sm % 10 != 0) : return sm\n    sm += mn\n  else:\n    return 0     \n\nN = input()\nS = [input() for i in range(N)]\nheapq.heapify(S)\n\nwhile S:\n  arr = [i for i in S]\n  best = solve(arr)\n  if(best > 0):\n    print best\n    break\n  heapq.heappop(S)\nelse:\n  print 0"}
{"label": 61, "index": 7844, "code": "N = int(input())\n\nS = [int(input()) for _ in range(N)]\n\nS_sum = sum(S)\n\nif S_sum %10 !=0:\n    print(S_sum)\n    exit()\nmax_val = 0\n\nfor val in S:\n    if val %10 !=0:\n        max_val = max(max_val,S_sum-val)\n\nprint(max_val)"}
{"label": 61, "index": 7845, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\ndef disp(x):\n    return 0 if x%10==0 else x\n\ndef main():\n    N = int(input())\n    A = []\n    for _ in range(N):\n        A.append(int(input()))\n    A.sort()\n\n    asum = sum(A)\n    vmax = disp(asum)\n    for a in A:\n        v = disp(asum - a)\n        vmax = max(vmax, v)\n\n    print(vmax)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 61, "index": 7846, "code": "n = int(input())\ns = sorted([int(input()) for i in range(n)])\ntotal = sum(s)\nans = 0\nif total % 10 != 0:\n    print(total)\nelse:\n    for i in s:\n        if i % 10 != 0:\n            ans = total - i\n            break\n    print(max(0, ans))\n"}
{"label": 61, "index": 7847, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    s_list = [int(input()) for _ in range(N)]\n\n    dp = [False] * (100 * 100 + 1)\n    dp[0] = True\n    for s in s_list:\n        for i in range(len(dp) - 1, -1, -1):\n            if dp[i]:\n                dp[i + s] = True\n\n    for i in range(len(dp) - 1, -1, -1):\n        if dp[i] and i % 10 != 0:\n            print(i)\n            return\n    print(0)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 61, "index": 7848, "code": "N=int(input())\ns=[]\nsum=0\nfor i in range(N):\n    s.append(int(input()))\n    sum+=s[i]\n\n#print(\"sum=\"+str(sum))\n\nmin=100000000\n\nif sum%10==0:\n    for i in range(N):\n        if(min>=s[i] and s[i]%10!=0):\n            min=s[i]\n#            print(\"err\")\nif sum%10!=0:\n    print(sum)\nelif min!=100000000:\n    print(sum-min)\nelse:\n    print(0)"}
{"label": 61, "index": 7849, "code": "N = int(input())\ns = []\nfor i in range(N):\n  s.append(int(input()))\n\ns_ = [n for n in s if n% 10 != 0]\n\nif len(s_) == 0:\n  res = 0\nelse:\n  res = sum(s)\n  if res % 10 == 0:\n    res -= min(s_)\n\nprint(res)"}
{"label": 61, "index": 7850, "code": "# Bugged\n\nn = int(input())\ns = []\nfor i in range(n):\n    s.append(int(input()))\n\na = []\nfor ss in s:\n    if ( ss%10!=0 ):\n        a.append(ss)\nssum = sum(s)\nif ( ssum%10!=0 ):\n    print(ssum)\nelse:\n    if ( len(a)==0 ):\n        print(0)\n    else:\n        print(ssum-min(a))"}
{"label": 61, "index": 7851, "code": "n = int(raw_input())\nl = [int(raw_input()) for _ in range(n)]\ns = sum(l)\nif s % 10 != 0:\n    print s\nelse:\n    l.sort()\n    for m in l:\n        if m % 10 != 0:\n            print s - m\n            break\n    else:\n        print 0\n"}
{"label": 61, "index": 7852, "code": "N = int(input())\nS_non10 = []\nS_10 = []\nfor i in range(N):\n    Si = int(input())\n    if Si % 10 == 0:\n        S_10.append(Si)\n    else:\n        S_non10.append(Si)\n\nif S_non10 == []:\n    print(0)\n\nelse:\n    sumS = sum(S_non10)\n    if sumS % 10 == 0:\n        sumS -= min(S_non10)\n\n    if S_10 == []:\n        sumS10 = 0\n    else:\n        sumS10 = sum(S_10)\n    print(sumS + sumS10)\n"}
{"label": 61, "index": 7853, "code": "a=sorted([int(input()) for _ in[0]*int(input())]);b=sum(a)\nfor x in a:\n    if b%10!=0:break\n    elif x%10!=0:b-=x\nprint([0,b][b%10!=0])"}
{"label": 61, "index": 7854, "code": "def main():\n    n = input()\n\n    p1, p2 = set([0]), set()\n\n    for i in range(n):\n        y = input()\n        p2 = set([0])\n        for x in p1:\n            p2.add(x + y)\n            p2.add(x)\n\n        p1, p2 = p2, set()\n\n    ans = 0\n    for x in p1:\n        if x % 10 != 0 and x > ans:\n            ans = x\n    print ans\n\n\nmain()\n"}
{"label": 61, "index": 7855, "code": "N = int(input())\ns = [int(input()) for _ in range(N)]\n\nS = sum(s)\nif S % 10 != 0:\n    print(S)\nelse:\n    num = [n for n in s if n % 10 != 0]\n    if len(num) == 0:\n        print(0)\n    else:\n        print(S - min(num))\n"}
{"label": 61, "index": 7856, "code": "n = int(input())\nnotlist = []\ns = 0\nfor i in range(n):\n    a = int(input())\n    if a%10 != 0:\n        notlist.append(a)\n    s += a\nprint(s if s%10 != 0 else s-min(notlist) if notlist != [] else 0)\n"}
{"label": 61, "index": 7857, "code": "N=int(input())\ns=[]\nfor _ in range(N):\n    s.append(int(input()))\nif sum(s)%10 != 0:\n print (sum(s))\nelse:\n    min_s = 0\n    sorted_s = sorted(s, reverse=True)\n    for ss in sorted_s:\n        if ss % 10 != 0:\n            min_s = ss\n \n    if min_s == 0:\n        print (0)\n    else:\n        print(sum(s) - min_s)"}
{"label": 61, "index": 7858, "code": "N = int(input())\ns = []\nfor i in range(N):\n\ts.append(int(input()))\nSum = sum(s)\ns.sort()\nif(Sum % 10 == 0):\n\tfor i in range(N):\n\t\tif  s[i]  % 10 != 0 and i !=  N-1:\n\t\t\tprint(Sum-s[i])\n\t\t\tbreak\n\t\tif i == N-1:\n\t\t\tprint(0)\nelse:\n\tprint(Sum)"}
{"label": 61, "index": 7859, "code": "def print_max():\n    N = int(input())\n    S = [int(input()) for i in range(N)]\n             \n    if sum(S)%10 != 0:\n             print(sum(S))\n             return\n    S.sort()\n    S_n = S[:]\n    for i in range(len(S)):\n             S_n.pop(i)\n             if sum(S_n)%10 != 0:\n                print(sum(S_n))\n                return\n             S_n = S[:]\n    print(0)\n    return\n\nprint_max()                      "}
{"label": 61, "index": 7860, "code": "N = int(input())\ns = [int(input()) for i in range(N)]\nS = sum(s)\nb = []\nfor j in range(N):\n  if s[j] % 10 !=0:\n     b.append(s[j])\n  else:\n     pass\n\nif S % 10 !=0:\n    print(S)\nelif len(b)==0:\n    print(0)\nelse:\n    print(S-min(b))"}
{"label": 61, "index": 7861, "code": "N = int(raw_input())\ns = sorted([int(raw_input()) for _ in range(N)])\n\nt = sum(s)\nif t % 10 != 0:\n    print t\nelse:\n    m = [v for v in s if v % 10]\n    if len(m):\n        print t - m[0]\n    else:\n        print 0"}
{"label": 61, "index": 7862, "code": "n = int(input())\nls = []\nfor i in range(n):\n  ls.append(int(input()))\ns = sum(ls)\np = s % 10\nif (p == 0):\n  ls.sort()\n  for i in ls:\n    if (i % 10 != 0):\n      s = s - i\n      print(s)\n      break\n  else:\n    print(0)\nelse:\n  print(s)"}
{"label": 61, "index": 7863, "code": "N = int(input())\ns = [int(input()) for i in range(N)]\nsums = sum(s)\nothers = list(filter(lambda x: x % 10, s))\nif sums % 10:\n    print(sums)\nelif others != []:\n    print(sums-min(others))\nelse:\n    print(0)"}
{"label": 61, "index": 7864, "code": "n = int(input())\nl = [int(input()) for x in range(n)]\n\ndp = [[None for x in range(200 * 100)] for x in range(n)]\n\ndef search(i, score):\n    if i >= n:\n        return score\n    \n    if dp[i][score] != None:\n        return dp[i][score]\n\n    d = max(search(i + 1, score), search(i + 1, score + l[i]))\n    dp[i][score] = d\n    return d\n\nsearch(0, 0)\nprint((list(filter(lambda x: x != None and x % 10, dp[-1])) or [0])[-1])\n"}
{"label": 61, "index": 7865, "code": "N = int(input())\n\ns = []\n\nfor _ in range(N):\n    s.append(int(input()))\n    \nans = sum(s)\n\nif ans % 10 == 0:\n    pref = sorted(s)\n    ans_flag = False\n    for i in range(N):\n        if pref[i] % 10 != 0:\n            ans_flag = True\n            ans -= pref[i]\n            break\n    if ans_flag == True:\n        print(ans)\n    else:\n        print(0)\nelse:\n    print(ans)"}
{"label": 61, "index": 7866, "code": "N=int(input())\ns=[int(input()) for i in range(N)]\ns.sort()\nSu=0\nfor i in range (N):\n    Su+=s[i]\nif Su%10==0:\n    m=s[0]\n    i=0\n    while m%10==0 and i<N:\n        if s[i]%10!=0:\n            m=s[i]\n        else:\n            i+=1\n    if i==N and m%10==0:\n        print (0)\n    else:\n        Su-=m\n        print (Su)\nelse:\n    print (Su)\n\n"}
{"label": 61, "index": 7867, "code": "def print_max():\n\tN = int(input())\n\tS = [int(input()) for i in range(N)]\n\t\n\tif sum(S)%10 != 0:\n\t\tprint(sum(S))\n\t\treturn\n\tS.sort()\n\tS_n = S[:]\n\tfor i in range(len(S)):\n\t\tS_n.pop(i)\n\t\tif sum(S_n)%10 != 0:\n\t\t\tprint(sum(S_n))\n\t\t\treturn\n\t\tS_n = S[:]\n\tprint(0)\n\treturn\n\t\nprint_max()"}
{"label": 61, "index": 7868, "code": "n = int(input())\ns = [int(input()) for _ in range(n)]\nt = []\n\nfor i in range(n)[::-1]:\n    if s[i]%10==0:\n        t.append(s.pop(i))\n\ns.sort()\nt.sort()\n\nif sum(s)%10==0:\n    if len(s)!=0:\n        s.pop(0)\n\nnum = sum(s)+sum(t)\n\nif len(s)==0:\n    num = 0\n\n\nprint(num)\n"}
{"label": 61, "index": 7869, "code": "N=int(input())\na=[]\nfor i in range(N):\n    a.append(int(input()))\n\na.sort()\n\nif sum(a)%10 != 0:\n    print(sum(a))\n    \nelse:\n    for i in a:\n        if (sum(a)-i)%10 != 0:\n            print(sum(a)-i)\n            exit()\n    print(0)"}
{"label": 61, "index": 7870, "code": "# -*- coding:utf-8 -*-\nimport sys\nN = int(input())\ns = []\nfor tmp in range(N):\n    s.append(int(input()))\ns.sort()\ntotal = sum(s)\nif total%10 != 0:\n    print(total)\nelse:\n    for tmp in s:\n        total -= tmp\n        if total%10 != 0:\n            print(total)\n            sys.exit()\n        else:\n            total += tmp\n    print(0)"}
{"label": 61, "index": 7871, "code": "n = int(input())\nnumbers = [0 for i in range(n)]\ntotal = 0\ncount = 0\nfor i in range(n):\n    num = int(input())\n    numbers[i] = num\n    total += num\nnumbers = sorted(numbers)\nif total % 10 == 0:\n    for i in numbers:\n        if i % 10 != 0:\n            total = total - i\n            count = 1\n            break\nelse:\n    count = 1\nif count ==0:\n    total = 0\nprint(str(total))\n"}
{"label": 61, "index": 7872, "code": "N = int(raw_input())\ns = [int(raw_input()) for _ in range(N)]\n\nresult = sum(s)\nif (result % 10) != 0:\n    print(result)\nelse:\n    s.sort()\n    for i in range(len(s)):\n        if (s[i] % 10) != 0:\n            result -= s[i]\n            break\n    if (result % 10) != 0:\n        print(result)\n    else:\n        print(0)"}
{"label": 61, "index": 7873, "code": "def c():\n    n = int(input())\n    ss = []\n    s_min = 101\n    for _ in range(n):\n        si = int(input())\n        ss.append(si)\n        if si % 10 != 0:\n            s_min = min(s_min, si)\n\n    m = sum(ss)\n    if m % 10 == 0:\n        if s_min > 100:\n            print(0)\n        else:\n            print(m - s_min)\n    else:\n        print(m)\n\nc()\n"}
{"label": 61, "index": 7874, "code": "# -*- coding: utf-8 -*-\nimport numpy as np\n\nN = input()\ns = np.zeros((N, ), dtype=np.int32)\nfor i in range(N):\n    s[i] = input()\n\n\ns.sort()\nlargest_s = np.sum(s)\n\nif largest_s % 10 != 0:\n    print largest_s\n    exit()\n\nfor i in range(N):\n    if (largest_s - s[i]) % 10 != 0:\n        print largest_s - s[i]\n        exit()\nprint 0\n\n"}
{"label": 61, "index": 7875, "code": "n = int(raw_input())\ns = []\nfor i in xrange(n):\n    s.append(int(raw_input()))\ns.sort()\nssum = sum(s)\nwhile(1):\n    if ssum % 10 != 0:\n        break\n    elif ssum == 0:\n        break\n    for i in xrange(len(s)):\n        if (ssum - s[i]) % 10 != 0:\n            ssum -= s.pop(i)\n            break\n    else:\n        ssum -= s.pop(0)\nprint ssum\n"}
{"label": 61, "index": 7876, "code": "n = input()\nscore = []\ns_not10 = []\n\nfor i in range(int(n)):\n    s = input()\n    score.append(int(s))\n\nscore.sort()\nfor j in range(len(score)):\n    if score[j]%10 != 0:\n        s_not10.append(j)\n\ns_all = int(sum(score))\n\nif s_all%10 != 0:\n    best = s_all\nelif len(s_not10) == 0:\n    best = 0\nelse:\n    best = score[s_not10[-1]]\n    if s_all-s_not10[0] > best:\n        best = s_all-score[s_not10[0]]\n\nprint(best)\n"}
{"label": 61, "index": 7877, "code": "N = int(input())\nans = 0\nminv = 101\nfor _ in range(N):\n  a = int(input())\n  ans += a\n  if a%10 != 0:\n    minv = min(minv,a)\nif ans%10 != 0:\n  print(ans)\nelif minv <= 100:\n  print(ans-minv)\nelse:\n  print(0)"}
{"label": 61, "index": 7878, "code": "def dec(n):\n    return n % 10 != 0\n\nn = int(input())\ns = [int(input()) for _ in range(n)]\ns.sort()\n\nif dec(sum(s)):\n    print(sum(s))\nelse:\n    for i in s:\n        if dec(i):\n            print(sum(s) - i)\n            break\n    else:\n        print(0)"}
{"label": 61, "index": 7879, "code": "#python\n\nN = input()\na = []\nfor i in range(N):\n    a.append(input())\n\nsum=sum(a)\n\nif sum%10!=0:\n\tprint sum\nelse:\n\ta.sort()\n\t#print a\n\tfor num in a:\n\t\tif num%10!=0:\n\t\t\tprint sum-num\n\t\t\tbreak\n\telse:\n\t\tprint 0"}
{"label": 61, "index": 7880, "code": "n = int(input())\nqu = []\nfor _ in range(n):\n        qu.append(int(input()))\nsum = 0\nfor i in range(len(qu)):\n        sum += qu[i]\n\nqu.sort()\n\ndef f2(qu):\n        for i in range(len(qu)):\n                if qu[i] % 10 != 0:\n                        return(i)\n        return(-1) \n\ndef f(qu, sumb):\n        if sumb == 0 or len(qu) == 0:\n                return(0)\n        if sumb % 10 == 0:\n                delnum = f2(qu)\n                if delnum == -1:\n                        return(0)\n                else:\n                        sumb -= qu.pop(delnum)\n        if sumb % 10 == 0:\n                return(f(qu, sumb))\n        else:\n                return(sumb)\n\nprint(f(qu,sum))\n"}
{"label": 61, "index": 7881, "code": "import numpy as np\nN = int(input())\ns = []\nfor i in range(N):\n    s.append(int(input()))\ns = np.sort(s)\nindex_nonten = np.where(s%10!=0)[0]\nsum = np.sum(s)\nif sum%10==0:\n    if len(index_nonten)==0:\n        sum = 0\n    else:\n        sum -=s[index_nonten][0]\nprint (sum)"}
{"label": 61, "index": 7882, "code": "def main():\n    n = int(input())\n    a_list = sorted([int(input()) for _ in range(n)])\n    maxv = sum(a_list)\n\n    if maxv%10 != 0:\n        print(maxv)\n    else:\n        flag = 1\n        for i in range(n):\n            if a_list[i]%10 != 0:\n                ans = maxv - a_list[i]\n                print(ans)\n                flag = 0\n                break\n        if flag: print(0)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 61, "index": 7883, "code": "N = input()\na = []\nfor i in range(N):\n    a.append(input())\n\nmuten=[0]\nnoten=[0]\n\nfor i in range(len(a)):\n    if (a[i]%10==0):\n        muten.append(a[i])\n    else:\n        noten.append(a[i])\n\nmuten.sort()\nnoten.sort()\n\nallmut=sum(muten)\nallnot=sum(noten)\n\nwhile (allnot%10==0):\n    del noten[0]\n    allnot=sum(noten)\n    if (allnot==0):\n        break\n\nif (allnot==0):\n    print 0\nelse:\n    print allmut+allnot"}
{"label": 61, "index": 7884, "code": "maxnum=0\n\nif(__name__==\"__main__\"):\n    N = int(input())\n    a =[int(input()) for i in range(N)]\n    #print(sum(a))\n    \n    if(sum(a) % 10 != 0):\n        print(sum(a))\n    else:\n        a_sort = sorted(a)\n        for i in range(0,N):\n            if(a_sort[i] % 10 != 0):\n                del a_sort[i]\n                maxnum = sum(a_sort)\n                break\n            \n\n        print(maxnum)"}
{"label": 61, "index": 7885, "code": "n = int(input())\ngrad = []\nfor i in range(n):\n    grad.append(int(input()))\n# sorting\ngrad.sort()\n\n\ns = sum(grad)\nwhile s % 10 == 0:\n    if s == 0:\n        break\n    if min(grad)% 10 == 0:\n        \n        for i in grad:\n            if i % 10 != 0 :#and i != max(grad):\n                \n                grad.remove(i)\n                \n                s = sum(grad)\n                break\n            else:\n                s = 0\n    else:\n        s = s - min(grad)\n        \nprint(s)\n"}
{"label": 61, "index": 7886, "code": "n=int(input())\ns=[int(input()) for _ in range(n)]\nm=sum(s)\nprint(max((m-i for i in [0]+s if (m-i)%10!=0),default=0))"}
{"label": 61, "index": 7887, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc063.contest.atcoder.jp/tasks/arc075_a\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    N = int(input())\n    scores = [int(input()) for _ in range(N)]\n\n    possible_results = set([0])\n    for s in scores:\n        temp = set()\n        for p in possible_results:\n            temp.add(p + s)\n            temp.add(p)\n        possible_results = temp\n\n    results = [x for x in possible_results if x%10 != 0]\n    results.sort()\n    if len(results) == 0:\n        print(0)\n    else:\n        print(results[-1])\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 61, "index": 7888, "code": "def calc_max_grade(scores):\n    sum_s = sum(s)\n    if sum_s % 10 == 0:\n        for x in sorted(s):\n            if not x % 10 == 0:\n                return sum_s - x\n        return 0\n    else:\n        return sum_s\n\nn = int(input())\ns = []\nfor i in range(n):\n    s.append(int(input()))\n\nprint(calc_max_grade(s))"}
{"label": 61, "index": 7889, "code": "n = int(input())\ntotal=0\nmini=101\nfor _ in range(n):\n    s = int(input())\n    total+=s\n    if s%10 != 0:\n        mini=min(mini,s)\nif total%10==0:\n    if mini==101:\n        print(0)\n    else:\n        print(total-mini)\nelse:\n    print(total)\n    \n"}
{"label": 61, "index": 7890, "code": "N = int(input())\nkireru = []\nmuri = []\nsummrize = 0\nfor i in range(N):\n    inp = int(input())\n    if inp % 10 == 0:\n        kireru.append(inp)\n    else:\n        muri.append(inp)\n    summrize += inp\nk = sorted(muri)\nif summrize % 10 == 0:\n    if(len(k)>0):\n        print(summrize - k[0])\n    else:\n        print(0)\nelse:\n    print(summrize)"}
{"label": 61, "index": 7891, "code": "def main():\n    N = int(input().strip())\n    ss = [\n        int(input().strip())\n        for _ in range(N)\n    ]\n    total = sum(ss)\n    if total % 10 == 0:\n        for s in sorted(ss):\n            if s % 10 == 0:\n                continue\n            total -= s\n            if total % 10 != 0:\n                break\n    if total % 10 == 0:\n        print(0)\n    else:\n        print(total)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 61, "index": 7892, "code": "N = int(input())\ns = [int(input()) for i in range(N)]\n\nans = sum(s)\n\nif ans % 10 == 0:\n    s.sort()\n    for si in s:\n        if si % 10 != 0:\n            ans -= si\n            break\n    else:\n        ans = 0\n\nprint(ans)\n"}
{"label": 61, "index": 7893, "code": "def f(scores):\n    res = sum(scores)\n    if res % 10 == 0:\n        candidates = list(score for score in scores if score % 10 != 0)\n        if candidates:\n            res -= min(candidates)\n        else:\n            res = 0\n    return res\n \nN = int(input())\nscores = []\nfor _ in range(N):\n    scores.append(int(input()))\nprint(f(scores))"}
{"label": 61, "index": 7894, "code": "N = int(input())\np = [int(input()) for i in range(N)]\nans = sum(p)\ns = list(filter(lambda x: x % 10 != 0, p))\nif ans % 10 == 0:\n    if len(s) == 0:\n        print(int(0))\n    else:\n        ans = ans - min(s)\n        print(ans)\nelse:\n    print(ans)"}
{"label": 61, "index": 7895, "code": "N = int(raw_input())\n\ns = [int(raw_input()) for _ in xrange(N)] \ns.sort()\n\nans = sum(s)\nk = 0\n\nfor i in range(N):\n    if s[i] % 10 != 0:\n        k = s[i]\n        break\n\nif ans % 10 == 0 and k == 0:\n    print 0\nelif ans % 10 != 0:\n    print ans\nelse:\n    print ans-k"}
{"label": 61, "index": 7896, "code": "N = int(input())\nA = []\nfor i in range(N):\n    A.append(int(input()))\n\nA.sort()\nsum = sum(A)\nif sum%10!=0:\n    print(sum)\nelse:\n    for i in range(N):\n        min = A[i]\n        if min%10!=0:\n            print(sum-min)\n            break\n        elif i==N-1:\n            print(0)\n\n"}
{"label": 61, "index": 7897, "code": "a=sorted([int(input()) for _ in [0]*int(input())])\ns1=-1\nif sum(a) % 10 != 0:\n    print(sum(a))\nelse:\n    for i in range(len(a)): #\u30ea\u30b9\u30c8\u4e2d\u306e10\u306e\u500d\u6570\u3067\u306a\u304f\u6700\u5c0f\u306e\u6570\u3092\u63a2\u3059\n        if a[i] % 10 !=0:\n            s1=i\n            break\n    if s1!=-1:\n        a.pop(s1)\n        print(sum(a))\n    else:\n        print(0)"}
{"label": 61, "index": 7898, "code": "\nN=int(input())\n\na=[int(0)]\na+=[int(input()) for i in range(N)]\ns=sum(a)\na.sort()\nfrag=0\n\nfor i in range(N+1) :\n    if a[i]%10!=0 :\n        frag+=1\n\n    \nif frag!=0 :\n    for i in range(N) :\n        if (s-a[i])%10!=0 :\n            s-=a[i]\n            break\n\n\n\nif frag==0 :\n    print(int(0))\nelse :\n    print(s)\n\n"}
{"label": 61, "index": 7899, "code": "n = int(input())\n\nscores = []\nfor i in range(n):\n    scores.append(int(input()))\n\ns = sum(scores)\nif s % 10 != 0:\n    print(s)\nelse:\n    indivisible_by_10 = []\n    for i in scores:\n        if i % 10 != 0:\n            indivisible_by_10.append(i)\n    if len(indivisible_by_10) == 0:\n        print(0)\n    else:\n        indivisible_by_10.sort()\n        print(s - indivisible_by_10[0])"}
{"label": 61, "index": 7900, "code": "N = int(input())\nS = [int(input()) for i in range(N)]\n\ndef maxscore(S):\n Score = sum(S)\n if Score % 10 > 0:\n  return Score\n else:\n  min = 100\n  for i in S:\n   if i % 10 > 0 and i < min:\n    min = i\n  Score -= min\n  return Score\n\njud = 0\nfor i in S:\n if i % 10 == 0:\n  jud += 1\nif jud == N:\n print(0)\nelse:\n print(str(maxscore(S)))"}
{"label": 61, "index": 7901, "code": "import math\n\nlines = int(input())\nscore_list = []\nfor line in range(lines):\n    score_list.append(int(input()))\nanswer = sum(score_list)\nif answer % 10 == 0:\n    score_list.sort()\n    for score in score_list:\n        if score % 10 != 0:\n            answer -= score\n            break\n    if answer % 10 == 0:\n        answer = 0\nprint(answer)"}
{"label": 61, "index": 7902, "code": "#!/usr/bin/env python3\n\ndata = []\nfor i in range(int(input())):\n    data.append(int(input()))\n\nun = [num for num in data if num % 10 == 0]\ndata = [num for num in data if num % 10 != 0]\n\nif len(data) == 0:\n    print(0)\nelse:\n    if sum(un+data) % 10 != 0:\n        print(sum(un+data))\n    else:\n        print(sum(un+data)-min(data))"}
{"label": 61, "index": 7903, "code": "N = int(input())\ns = []\nfor _ in range(N):\n    s.append(int(input()))\n    \nif sum(s)%10 != 0:\n    print(sum(s))\nelse:\n    s = sorted(s)\n    for si in s:\n        if si % 10 != 0:\n            print(sum(s) - si)\n            break\n    else:\n        print(0)"}
{"label": 61, "index": 7904, "code": "N = int(raw_input())\n\ns = []\nfor i in range(N):\n    s.append(int(raw_input()))\n\nscore = sum(s)\n\nif score%10 != 0:\n    print score\nelse:\n    a=sorted(s)\n    exit=False\n    for i in a:\n        if i%10 != 0:\n            print score-i\n            exit=True\n            break\n    if not exit:\n        print 0"}
{"label": 61, "index": 7905, "code": "#!/usr/bin/env python3\n\ndata = [ int(input()) for i in range(int(input())) ]\n\nun = [num for num in data if num % 10 == 0]\ndata = [num for num in data if num % 10 != 0]\n\nif len(data) == 0:\n    print(0)\nelse:\n    if sum(un+data) % 10 != 0:\n        print(sum(un+data))\n    else:\n        print(sum(un+data)-min(data))\n"}
{"label": 61, "index": 7906, "code": "N = int(input())\n\ns_min = 200\nsum = 0\nfor _ in range(N):\n    s_i = int(input())\n    sum += s_i\n    if s_i % 10 != 0:\n        if s_min > s_i:\n            s_min = s_i\n\n\nif sum % 10 != 0:\n    print(sum)\nelse:\n    if s_min == 200:\n        print(0)\n    else:\n        print(sum - s_min)\n"}
{"label": 61, "index": 7907, "code": "import itertools\n\nDIM = int(input())\nargs = [int(input()) for a in range(DIM)]\ntemp = list(map(lambda x:x%10, args))\nif sum(temp) == 0:\n    print(0)\n    exit()\ni = DIM\nwhile(i>0):\n    comb = list(itertools.combinations(args, i))\n    combMax = list(map(sum, comb))\n    for c in sorted(combMax, reverse=True):\n        if c%10==0:\n            continue\n        else:\n            print(c)\n            exit()\n    i = i -1\nprint(0)\nexit()"}
{"label": 61, "index": 7908, "code": "N = int(input())\na = [int(input()) for i in range(N)]\n\na.sort()\nans = sum(a)\n\nS = [ans - i for i in a]\nmaxtenga = 0\n\nfor i in range(len(S)):\n    if S[i] % 10 != 0:\n        maxtenga = S[i]\n        break\n\nflag = False\nfor i in range(len(a)):\n    if a[i] % 10 != 0:\n        flag = True\n\nif ans % 10 != 0:\n    print(ans)\nelif flag is False:\n    print(0)\nelse:\n    print(maxtenga)\n"}
{"label": 61, "index": 7909, "code": "def C():\n    #from numpy import sum, min\n    N = int(input())\n    s = []\n    pos = []\n    neg = []\n    for _ in range(N):\n        s.append(int(input()))\n    for i in s:\n        if i % 10 == 0:\n            pos.append(i)\n        else:\n            neg.append(i)\n    possum = sum(pos)\n    negsum = sum(neg)\n    if negsum % 10 == 0:\n        negsum -= min(neg) if neg else 0\n    print(0 if 0 == negsum else negsum + possum)\n\nif __name__ == '__main__':\n    C()"}
{"label": 61, "index": 7910, "code": "# -*- coding:utf-8 -*-\nimport sys\n\nN = int(input())\nSn = sorted([int(input()) for i in range(N)])\ntotal = sum(Sn)\nif total % 10 != 0:\n    print(total)\n    sys.exit()\nelse:\n    i = 0\n    while True:\n        if (total - Sn[i]) % 10 != 0:\n            print(total - Sn[i])\n            sys.exit()\n        i += 1\n        if i == N:\n            break\nprint(0)\n"}
{"label": 61, "index": 7911, "code": "# -*- coding: utf-8 -*-\nn = input()\n\ns = [input() for i in range(n)]\ns2 = sorted(s)\nans = sum(s2)\nflg = 0\nif(ans%10 == 0):\n    for i in range(n):\n        if(s2[i]%10 != 0):\n            ans -= s2[i]\n            flg = 1\n            break\n    print(ans if flg else 0)\nelse:\n    print(ans)"}
{"label": 61, "index": 7912, "code": "# coding: utf-8\n\nn = input()\ns = map(int, [raw_input() for _ in xrange(n)])\ns.sort(reverse=True)\nt = 0\nwhile True:\n\n    for i in xrange(1, len(s) + 1):\n        total = sum(s) - t\n\n        if total % 10 != 0:\n            print total\n            exit()\n\n        t = s[-i]\n\n    s.pop()\n\n    if not s:\n        print 0\n        break\n"}
{"label": 61, "index": 7913, "code": "N = int(input())\ns = []\n\nfor i in range(N):\n\ts.append(int(input()))\ns.sort()\n\nmax = sum(s)\nfor i in range(N):\n\tif(max % 10 != 0):\n\t\tprint(max)\n\t\texit(0)\n\telif((max-s[i]) % 10 != 0):\n\t\tprint(max-s[i])\n\t\texit(0)\nprint(\"0\")\n"}
{"label": 61, "index": 7914, "code": "N = int(input())\nS = [int(input()) for i in range(N)]\ndp = [[0 for i in range(10101)] for j in range(101) ]\nmax_S = sum(S)\nans =0\n\ndp[0][0] = 1\nfor i in range(N):\n    for j in range(max_S+1):\n        if dp[i][j] == 1:\n            dp[i+1][j] =1\n            dp[i+1][j+S[i]] =1\n\nfor j in range(max_S+1):\n    if (j%10 !=0) & (dp[N][j]) == 1:\n        ans = max(ans,j)\n\nprint(ans)"}
{"label": 61, "index": 7915, "code": "def main():\n    N = int(input())\n    S = [int(input()) for i in range(N)]\n\n    ans = sum(S)\n    if str(ans)[-1] == '0':\n        s = sorted(S)\n        for i in s:\n            if str(i)[-1] != '0':\n                ans -= i\n                break\n        else:\n            ans = 0\n\n    print(ans)\n\nmain()\n"}
{"label": 61, "index": 7916, "code": "N = int(input())\ns = []\nfor _ in range(N):\n    s.append(int(input()))\n\n\nif sum(s) % 10 != 0:\n    print (sum(s))\n    \nelse:\n    min_s = 0\n    sorted_s = sorted(s, reverse=True)\n    for ss in sorted_s:\n        if ss % 10 != 0:\n            min_s = ss\n\n    if min_s == 0:\n        print (0)\n    else:\n        print(sum(s) - min_s)"}
{"label": 61, "index": 7917, "code": "def foo(n):\n    if not n % 10:\n        return float('inf')\n    return n\n\nn = int(input())\ns = []\nfor i in range(n):\n    s.append(int(input()))\ns.sort(reverse=True, key=foo)\nk = sum(s)\np = n - 1\nwhile not k % 10 and s:\n    k -= s[-1]\n    s.pop()\nprint(k)"}
{"label": 61, "index": 7918, "code": "# -*- coding: utf-8 -*-\n\n#-------\n# Initialize\nN = int(input())\nS =[0] * N\nfor i in range(N):\n    S[i] = int(input())\ndp = [[0 for i in range(10101)] for j in range(101)]\n#-------\n# Define\n\n#-------\n# Do\ndp[0][0] = 1;\nfor i in range(N):\n    for j in range(10001):\n        if(dp[i][j] == 1):\n            dp[i+1][j] = 1\n            dp[i+1][j+S[i]] = 1\n\nans = 0\nfor j in range(10001):\n    if (j % 10 > 0) & (dp[N][j] == 1):\n        ans = max(ans, j)\nprint(str(ans))\n\n#-------\n# Output\n"}
{"label": 61, "index": 7919, "code": "N = int(raw_input())\npoints = [int(raw_input()) for i in range(N)]\npoints.sort(reverse=True)\nans = sum(points)\n\nwhile (ans % 10 == 0):\n    min = points.pop()\n    if min % 10 != 0:\n        ans -= min\n    if len(points) == 0:\n        break\n\nprint ans if ans % 10 != 0 else 0\n"}
{"label": 61, "index": 7920, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\nN = int(input())\nA = []\nis_all_ten = True\nfor i in range(N):\n    a = int(input())\n    if a % 10 != 0:\n        is_all_ten = False\n    A.append(a)\nA.sort()\n\nif is_all_ten:\n    print(0)\nelif sum(A) % 10 != 0:\n    print(sum(A))\nelse:\n    not_ten_list = [x for x in A if x % 10 != 0]\n    print(sum(A) - not_ten_list[0])"}
{"label": 61, "index": 7921, "code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\nimport itertools\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    scores = []\n    for _ in range(n):\n        scores.append(int(sys.stdin.readline().strip()))\n    s = sum(scores)\n    if s % 10 != 0:\n        print(s)\n        return\n\n    for s in scores:\n        if s % 10 != 0:\n            break\n    else:\n        print(0)\n        return\n\n    scores.sort()\n\n    for s in scores:\n        if s % 10 != 0:\n            print(sum(scores) - s)\n            return\n\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 61, "index": 7922, "code": "# -*coding: utf8 -*-\n\nn = input()\ns = []\nfor i in range(n):\n    s.append(input())\n\nwa = sum(s)\n\nif wa % 10 != 0:\n    print wa\nelse:\n    flag = 0\n    for i in range(1,max(s)+1):\n        if (i in s) and (i%10!=0):\n            print wa - i\n            flag = 1\n            break\n    if flag == 0:\n        print 0"}
{"label": 61, "index": 7923, "code": "import sys\ni=0\nj=0\nk=0\nt=0\nm=0\ns=0\nlists=[]\nlists2 =[]\n\n#\u6570\u5024\u306e\u6570\u3092\u53d7\u3051\u53d6\u308b\nline = int(input())\n\n#\u6570\u5024\u3092\u53d7\u3051\u53d6\u3063\u3066\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\nwhile i < line:\n\ta = int(input())\n\t#print (a)\n\tlists.insert(i,a)\n\ti +=1\n\n#\u6570\u5024\u306e\u8db3\u3057\u5408\u308f\u305b\nwhile j < line:\n    s += lists[j]\n    j +=1\n\n#\u6b63\u3057\u3051\u308c\u3070\u51fa\u529b\nif s%10 != 0:\n\tprint(s)\nelse:\n    #10\u306e\u500d\u6570\u4ee5\u5916\u306e\u30ea\u30b9\u30c8\u4f5c\u6210\n    while k < line:\n        if lists[k]%10 != 0:\n\t        lists2.insert(m,lists[k])\n\t        m +=1\n        k +=1\n    if lists2 !=[]:\n        t = min(lists2)\n        print(s-t)\n    else:\n    \tprint(0)"}
{"label": 61, "index": 7924, "code": "N = int(input())\ns = []\n\nfor i in range(N) :\n    s.append(int(input()))\n\nans = sum(s)\ns.sort()\n\nfor i in range(N) :\n    if ans%10 != 0 :\n        print(ans)\n        break\n    elif s[i]%10 != 0:\n        ans -= s[i]\nelse :\n    print(0)"}
{"label": 61, "index": 7925, "code": "N = int(input())\nnum=[]\nans= 0\nfor i in range(N):\n    num.append(int(input().rstrip()))\nnum.sort()\nans = sum(num)\nif ans%10==0:\n    for i in range(N):\n        if num[i]%10 != 0:\n            ans -= num[i]\n            print(ans)\n            exit()\n    print(0)\nelse:\n    print(ans)"}
{"label": 61, "index": 7926, "code": "n = int(input())\n\ns = [int(input()) for i in range(n)]\n\nsum_s = sum(s)\nnot_list = [num for num in s if num % 10 != 0]\n\n\nif sum_s % 10 == 0:\n    if len(not_list) == 0:\n        sum_s = 0\n    else:\n        sum_s -= sorted(not_list)[0]\n\nprint(sum_s)"}
{"label": 61, "index": 7927, "code": "a=sorted([int(input()) for _ in[0]*int(input())]);b=sum(a)\nfor x in a:\n    if b%10:break\n    elif x%10:b-=x\nprint([0,b][b%10!=0])"}
{"label": 61, "index": 7928, "code": "N = int(input())\ns = [int(input()) for i in range(N)]\ns.sort()\ns_min = 0\n\nif sum(s) % 10 :\n    print(sum(s))\nelse:\n    for i in range(N):\n        if s[i] % 10 != 0:\n            s_min = s[i]\n            break\n    if s_min:\n        print(sum(s) - s_min)\n    else:\n        print(0)"}
{"label": 61, "index": 7929, "code": "n = int(input())\ns=[]\nisten=0\nscore=0\nfor i in range(n):\n    si = int(input())\n    s.append(si)\n    if si%10!=0:\n        isten=1\n\ns.sort()\nif isten==1:\n    score=sum(s)\ni=0\nwhile score%10==0 and isten==1:\n    s_ = list(s)\n    del s_[i]\n    i+=1\n    score=sum(s_)\n\nprint(score)\n"}
{"label": 62, "index": 7930, "code": "r, g, b = map(int,input().split())\n\nans = r * 100 + g * 10 + b\n\nif ans % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7931, "code": "a = ''.join(raw_input().split())\na = int(a)\nif a % 4 == 0:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 62, "index": 7932, "code": "r,g,b=map(int,input().split())\nif (g*10+b)%4 ==0:\n    print('YES')\nelse:\n    print('NO')\n    "}
{"label": 62, "index": 7933, "code": "import sys\nimport numpy as np\nfrom math import *\ndef get_read_func(fileobject):\n    if fileobject == None :\n        return raw_input\n    else:\n        return fileobject.readline\n\ndef main():\n    if len(sys.argv) > 1:\n        f = open(sys.argv[1])\n    else:\n        f = None\n    read_func = get_read_func(f);\n    input_raw = read_func().strip().split()\n    rgb = int(input_raw[0])*100 + int(input_raw[1]) *10 + int(input_raw[2])\n    if rgb % 4 == 0 :\n        print 'YES'\n    else:\n        print 'NO'\n\nif __name__ == '__main__':\n    main()"}
{"label": 62, "index": 7934, "code": "if __name__==\"__main__\":\n    r, g, b = input().split()\n    x = int(r+g+b)\n    if(x % 4 == 0):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"}
{"label": 62, "index": 7935, "code": "#!/usr/bin/env python\n\ndef solve():\n    abc = input().split()\n    s = \"\"\n    for i in abc:\n        s += i\n    n = int(s)\n    if n % 4 == 0:\n        print('YES')\n    else:\n        print('NO')\n    \n        \nif __name__ == '__main__':\n    solve()\n"}
{"label": 62, "index": 7936, "code": "r,g,b = map(int,input().split())\nprint(\"YES\" if (g*10+b)%4==0 else \"NO\")"}
{"label": 62, "index": 7937, "code": "#!/usr/bin/env python3\n\nr, g, b = map(int, input().split())\nnum = (100 * r) + (10 * g) + (1 * b)\n\nif num % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7938, "code": "s=input().split()\nx=int(s[0])\ny=int(s[1])\nz=int(s[2])\nc=100*x+10*y+z\nif(c%4==0):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7939, "code": "R,G,B=map(int,input().split())\nans=100*R+10*G+B\nif ans%4==0:\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 62, "index": 7940, "code": "r, g, b = map(int, input().split())\nnum = r * 100 + g * 10 + b\nif(num % 4 == 0):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7941, "code": "a,b,c = list(map(int,input().split()))\nif ((a * 100 + b * 10 + c) % 4 == 0):\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 62, "index": 7942, "code": "N = int(\"\".join(input().split()))\nif N % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7943, "code": "a = input()\n\na = a.split()\n\nr = int(a[0])\ng = int(a[1])\nb = int(a[2])\n\nnumber = r * 100 + g * 10 + b\n\n\"\"\"\nprint(a)\nprint(r)\nprint(g)\nprint(b)\nprint(number)\n\"\"\"\n\nif number % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7944, "code": "r, g, b = list(map(int, input().split(\" \")))\n\nif (10*g + b) % 4 == 0:\n    print (\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7945, "code": "r, g, b = map(int, input().split())\n\nif (r*100+g*10+b)%4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7946, "code": "a=raw_input()\n\naa=int(a.replace(' ',''))\n\nif aa/4*4==aa:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 7947, "code": "import sys\n\ndef solve():\n    r, g, b = map(int, input().split())\n\n    val = 100*r + 10*g + b\n\n    if val % 4 == 0:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    solve()"}
{"label": 62, "index": 7948, "code": "def solve():\n    r, g, b = map(int, input().split())\n    if (100 * r + 10 * g + b) % 4 == 0:\n        ans = \"YES\"\n    else:\n        ans = \"NO\"\n    print(ans)\n\nif __name__ == \"__main__\":\n    solve()\n"}
{"label": 62, "index": 7949, "code": "if int(('').join(raw_input().split(' ')))%4==0:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 62, "index": 7950, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nr, g, b = map(int, input().split())\nif (g*10 + b) % 4 == 0: print(\"YES\")\nelse: print(\"NO\")\n        \n"}
{"label": 62, "index": 7951, "code": "r,g,b=raw_input().split()\nprint \"YES\" if int(r+g+b)%4==0 else \"NO\"\n"}
{"label": 62, "index": 7952, "code": "num = input().split()\na = int(num[0]) * 100 + int(num[1]) * 10 + int(num[2])\nif a % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7953, "code": "l = map(int, raw_input().split())\nv = 100*l[0] + 10*l[1] + l[2]\n\nif v % 4 == 0:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 62, "index": 7954, "code": "# -*- coding: utf-8 -*-\n\nr,g,b = map(int, input().split())\n\nif ((g*10 + b) % 4 == 0):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7955, "code": "a, b, c = map(int, raw_input().split())\nif (b * 10 + c) % 4 == 0:\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 62, "index": 7956, "code": "r, g, b = map(int, input().split())\nnum = r * 100 + g * 10 + b\nans = \"YES\" if(num % 4 == 0) else \"NO\"\nprint(ans)\n"}
{"label": 62, "index": 7957, "code": "r,g,b = [int(_) for _ in input().split()]\n\nif (100*r+10*g+b)%4==0:\n    print ('YES')\nelse:\n    print ('NO')"}
{"label": 62, "index": 7958, "code": "r, g, b = map(int, raw_input().split())\n\nv = 100*r + 10*g + b\nif v % 4 == 0:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 62, "index": 7959, "code": "r,g,b = map(int, input().split())\nprint('YES' if (r*100 + g * 10 + b)%4 == 0 else 'NO')\n"}
{"label": 62, "index": 7960, "code": "#!/usr/bin/python\n\na = [int(i) for i in input().split()]\n\nn = 100 * a[0] + 10 * a[1] + a[2]\n\nif n % 4 == 0:\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 62, "index": 7961, "code": "num = int(input().replace(\" \",\"\"))\nif num % 4 :\n    print(\"NO\")\nelse:\n    print(\"YES\")"}
{"label": 62, "index": 7962, "code": "nums = [int(x) for x in input().split()]\nans = nums[0]*100 + nums[1] * 10 + nums[2]\n\nif ans % 4 == 0:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 62, "index": 7963, "code": "r,g,b = map(str,input().split())\nx = int(r+g+b)\nprint('YES' if x % 4 == 0 else 'NO')\n"}
{"label": 62, "index": 7964, "code": "x=input()\ny=int(x.split()[0]+x.split()[1]+x.split()[2])\nif y%4==0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 7965, "code": "def read(): return list(map(int, input().split()))\n\nc = read()\nprint(\"YES\" if (100*c[0] + 10*c[1] + c[2]) % 4 == 0 else \"NO\")"}
{"label": 62, "index": 7966, "code": "a, b, c = input().split()\nn = int(b+c)\nif n % 4 == 0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 7967, "code": "r, g, b = map(int, input().split())\n\nif (g * 10 + b) % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 7968, "code": "inpt = map(int, raw_input().split())\nn = 100 * inpt[0] + 10 * inpt[1] + inpt[2]\nif n % 4 == 0:\n\tprint 'YES'\nelse:\n\tprint 'NO'\n"}
{"label": 62, "index": 7969, "code": "r, g, b = map(str, input().split())\nans = r + g + b\nans = int(ans)\nif ans % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7970, "code": "a= raw_input().split()\n\nsum = int(a[0])*100 + int(a[1])*10 + int(a[2])\n\nif sum%4 == 0:\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 62, "index": 7971, "code": "#! /usr/bin/env python3\n\nr, g, b = map(int, input().split())\nif (r * 100 + g * 10 + b) % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 7972, "code": "N = input().split()\nsum = int(N[0])*100 + int(N[1])*10 + int(N[2])\n\nif sum%4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7973, "code": "r,g,b = list(map(int,input().split()))\nz=100*r+10*g+b\n\nif z%4==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7974, "code": "r, g, b = map(int, raw_input().split())\nnumber = r*100 + g*10 + b\nif (number%4)==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7975, "code": "r,g,b = map(int, raw_input().split())\nif(r * 100 + g * 10 + b) % 4 == 0:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 62, "index": 7976, "code": "r,g,b=map(int,input().split())\n\ns=r*100+g*10+b\n\nif s%4==0:\n    print(\"YES\")\nelse :\n    print(\"NO\")\n\n"}
{"label": 62, "index": 7977, "code": "r, g, b = map(int, raw_input().split()) \nprint \"YES\" if (100*r + 10*g + b)%4 == 0 else \"NO\"\n"}
{"label": 62, "index": 7978, "code": "import sys\n \nstdin = sys.stdin\n \nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\n\na, b, c = na()\n\nif (a * 100 + b * 10 + c) % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7979, "code": "# -*- coding: utf-8 -*-\n\n#\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\nr, g, b = map(int, raw_input().split())\n#\u5165\u529b\u5024\u306e\u9023\u7d50\nx = str(r)+str(g)+str(b)\n\n#4\u306e\u500d\u6570\u304b\u5426\u304b\u306e\u78ba\u8a8d\nif int(x)%4 == 0:\n    print 'YES'\nelse:\n    print'NO'"}
{"label": 62, "index": 7980, "code": "rgb = [int(i) for i in input().split()]\nnum = 0\nfor i, n in enumerate(reversed(rgb)):\n    num += n * (10 ** i)\nif num % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7981, "code": "r,g,b = map(int,input().split())\n\nn = r*100+g*10+b\n\nif n%4==0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 7982, "code": "print('YES' if int(''.join(input().split()))%4==0 else 'NO')\n"}
{"label": 62, "index": 7983, "code": "r, g, b = map(int, input().split(\" \"))\n\nif g % 2 ==0 and b % 4 ==0 or g%2 ==1 and b%4==2:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7984, "code": "# -*- coding: utf-8 -*-\nr, g, b = [int(n) for n in input().split()]\nnum = 100*r + 10*g +b\nif num%4==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7985, "code": "\nr, g, b = list(map(int, input().split()))\na = r*100+g*10+b\n\nif a % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 7986, "code": "r, g, b = input().split()\nr = int(r)\ng = int(g)\nb = int(b)\nx = r*100 + g*10 + b\nif x%4 == 0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 7987, "code": "input_line_1 = raw_input()\nx, y, z = input_line_1.split(\" \")\nif (int(y) * 10 + int(z)) % 4 == 0:\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 62, "index": 7988, "code": "r, g, b = list(map(int, input().split(\" \")))\n\nif (10*g + b) % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7989, "code": "r,g,b=list(map(int,input().split(\" \")))\n\nx=10*g+b\nif x%4==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7990, "code": "a = input().replace(\" \", \"\")\na = int(a)\n\nif(a % 4):\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")"}
{"label": 62, "index": 7991, "code": "# coding: utf-8\ndef get_ln_inputs():\n    return input().split()\n\n\ndef get_ln_int_inputs():\n    return list(map(int, get_ln_inputs()))\n\n\ndef main():\n    if int(\"\".join(get_ln_inputs())) % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nmain()"}
{"label": 62, "index": 7992, "code": "_, g, b = map(int, raw_input().split())\n\nif (g*10+b) % 4 == 0:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 62, "index": 7993, "code": "R, G, B = list(map(int, input().split()))\n\nRGB = 100*R + 10*G + B\n\nif(RGB%4==0):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7994, "code": "r,g,b = [int(x) for x in input().split()]\n\nif (g*10+b)%4 == 0:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 62, "index": 7995, "code": "r, g, b = map(int, input().split())\n\nif (100*r + 10*g + b) % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7996, "code": "r, g, b = map(int, input().split())\n\nnum =r*100+g*10+b\n\nprint (\"YES\" if num%4==0 else \"NO\")"}
{"label": 62, "index": 7997, "code": "data = input().split()\nnum = int(\"\".join(data))\nif num % 4==0:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n"}
{"label": 62, "index": 7998, "code": "rgb = input().split()\nans = \"\".join(rgb)\nans = int(ans)\nif ans%4 == 0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 7999, "code": "import sys\n\ninput_file = 'a1.in'\n# sys.stdin = open(input_file)\n\n\ns = input().split()\nt = int(''.join(s))\n\nif t % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n\n"}
{"label": 62, "index": 8000, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport array\nfrom bisect import *\nfrom collections import *\nimport fractions\nimport heapq \nfrom itertools import *\nimport math\nimport re\nimport string\n\nR, G, B = input().split()\nif int(R + G + B) % 4 == 0:\n    ans = 'YES'\nelse:\n    ans = 'NO'\nprint(ans)\n\n"}
{"label": 62, "index": 8001, "code": "r,g,b=input().split()\n\ncards = int(r + g + b)\n\nif cards % 4 == 0:\n    print(\"YES\")\n\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8002, "code": "x,y,z = map(int, input().split())\nS = x * 100 + y * 10 + z\nif S % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8003, "code": "n = input()\ntmp_n = n.split(\" \")\nnum = int(tmp_n[0]+tmp_n[1]+tmp_n[2])\n\nif num%4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 8004, "code": "rgb = input().split()\nr = rgb[0]\ng = rgb[1]\nb = rgb[2]\n\ncheck = int(r + g + b)\n\nif check % 4 == 0:\n\tprint('YES')\nelse:\n\tprint('NO')\n"}
{"label": 62, "index": 8005, "code": "r, g, b = [int(n) for n in input().split()]\n\nif (10*g+b) % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n\n"}
{"label": 62, "index": 8006, "code": "#coding:utf-8\n\nif __name__ == \"__main__\":\n    num_list = input().split(\" \")\n    num = int(\"\".join(num_list))\n\n    if num % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"}
{"label": 62, "index": 8007, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    r,g,b = LI()\n    t = g*10+b\n    if t % 4 == 0:\n        return 'YES'\n\n    return 'NO'\n\n\nprint(main())\n"}
{"label": 62, "index": 8008, "code": "a, b, c = map(int, input().split())\nif (b * 10 + c) % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 8009, "code": "inp = input().split()\nr = int(inp[0] + inp[1] + inp[2])\nif r % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 8010, "code": "a, b, c = map(int, input().split())\nprint('YES' if (a * 100 + b * 10 + c) % 4 == 0 else 'NO')\n"}
{"label": 62, "index": 8011, "code": "a,b,c = map(int, input().split())\n\nif (100*a+10*b+c)%4==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8012, "code": "inps = [i for i in input().split()]\nsorted(inps)\ninpsS = \"\".join(inps)\ninpsI = int(inpsS)\nif inpsI % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 8013, "code": "# coding: utf-8\n# Here your code !\n\ns = input()\nnum =int(s.replace(\" \",\"\"))\nif num%4==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n    \n"}
{"label": 62, "index": 8014, "code": "r,g,b = map(int,input().split())\nA = 100*r + 10*g + b\nif A % 4 == 0:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n"}
{"label": 62, "index": 8015, "code": "\nraw = raw_input().split(\" \")\nnum = int(raw[0]) * 100 + int(raw[1]) * 10 + int(raw[2])\nif not (num % 4):\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 62, "index": 8016, "code": "def rgb():\n    r,g,b=map(int,input().split())\n    if(100*r+10*g+b)%4==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return\nrgb()"}
{"label": 62, "index": 8017, "code": "a = input()\nnum = a.replace(' ', '')\nc = int(num)%4\nif c == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8018, "code": "r, g, b = map(int, input().split())\ns = int(100*r + 10*g + b)\nt = s%4\nif t == 0 :\n print('YES')\nelse :\n print('NO')"}
{"label": 62, "index": 8019, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\nA = list(map(int, input().split()))\n\nn = 100 * A[0] + 10 * A[1] + A[2]\nif n % 4 == 0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 8020, "code": "a,b,c=map(int,input().split())\nif((a*100+b*10+c)%4==0):\n\tprint(\"YES\")\nelse:print(\"NO\")"}
{"label": 62, "index": 8021, "code": "# encoding:utf-8\ndef main():\n\tr, g, b = list(map(int, input().split()))\n\tif (r * 100 + g * 10 + b) % 4 == 0:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\t\nif __name__ == '__main__':\n\tmain()"}
{"label": 62, "index": 8022, "code": "print(\"NO\" if sum([int(i)*10**(2-t) for t,i in enumerate(input().split())])%4 else \"YES\")"}
{"label": 62, "index": 8023, "code": "print \"YES\"*(int(raw_input().replace(\" \", \"\"))%4==0)or\"NO\"\n"}
{"label": 62, "index": 8024, "code": "num = int(input().replace(' ',''))\nif num%4 == 0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 8025, "code": "a,b,c=[str(i) for i in input().split()]\n\nn=a+b+c\n\nif (int(n)%4)==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8026, "code": "x, y, z = map(int, input().split())\na = 100*x + 10* y + z\nif a%4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8027, "code": "rgb = list(map(int,input().split()))\n\nans = rgb[0] * 100 + rgb[1] * 10 + rgb[2]\n\nif ans % 4 == 0:\n    print ('YES')\nelse:\n    print ('NO')"}
{"label": 62, "index": 8028, "code": "rgb = raw_input()\nrgb = rgb.replace(' ', '') \nrgb = int(rgb)\ntest = rgb % 4\nif test == 0 :\n   print 'YES'\nelse :\n   print 'NO'"}
{"label": 62, "index": 8029, "code": "num = input().split() \ntemp = ''\nfor i in range(len(num)):\n    temp = temp + num[i]\nprint( ['NO','YES'][int(temp)%4==0] )"}
{"label": 62, "index": 8030, "code": "def a():\n    r, g, b = map(int, input().split())\n    n = 100*r + 10*g + 1*b\n    print('YES' if n % 4 == 0 else 'NO')\n\na()\n"}
{"label": 62, "index": 8031, "code": "r,g,b = map(int,input().split())\na = r*100+g*10+b\nmsg = \"YES\" if a%4 == 0 else \"NO\"\nprint(msg)"}
{"label": 62, "index": 8032, "code": "Z=[int(x) for x in input().split()]\na=100*Z[0]+10*Z[1]+Z[2]\nif a%4==0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 8033, "code": "import sys\n\nr, g, b = map(int, input().split())\nif ((r*100+g*10+b)%4==0):\n    print (\"YES\")\nelse:\n    print (\"NO\")\n"}
{"label": 62, "index": 8034, "code": "r, g, b = map(int, input().split())\n\nn = 100 * r + 10 * g + b\nif n % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 8035, "code": "r,g,b = input().split(\" \")\n\nif (int(r)*100+int(g)*10+int(b))%4==0 :\n    print(\"YES\")\nelse :\n    print(\"NO\")"}
{"label": 62, "index": 8036, "code": "r, g, b = list(map(int, input().split()))\nif (10 * g + b) % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8037, "code": "def main():\n    r, g, b = list(map(int, input().strip().split()))\n    v = r * 100 + g * 10 + b\n    if v % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 62, "index": 8038, "code": "if __name__ == \"__main__\":\n    r, g, b = map(int, input().split())\n\n    if (r * 100 + g * 10 + b) % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")"}
{"label": 62, "index": 8039, "code": "#! -*- coding:utf-8 -*-\n\nr,g,b = map(int,input().split())\nx = 100*r + 10*g + b\n\nif x % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 8040, "code": "r, g, b = [int(i) for i in input().split()]\nn = r*100 + g*10 + b\nif n % 4:\n    print('NO')\nelse:\n    print('YES')"}
{"label": 62, "index": 8041, "code": "def f(r, g, b):\n    if (100 * r + 10 * g + b) % 4 == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\nr, g, b = map(int, input().split())\nprint(f(r, g, b))"}
{"label": 62, "index": 8042, "code": "x = input().split()\nnum = x[0]+x[1]+x[2]\nprint('YES' if int(num)%4==0 else 'NO')"}
{"label": 62, "index": 8043, "code": "# coding: utf-8\nr, g, b = map(int, input().split())\nnum = 100*r + 10*g + b \nif num % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n    \n"}
{"label": 62, "index": 8044, "code": "x = int(\"\".join(input().split()))\nif (x % 4 == 0):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 62, "index": 8045, "code": "print \"YES\" if int(raw_input().replace(\" \", \"\")) % 4 == 0 else \"NO\""}
{"label": 62, "index": 8046, "code": "r, g, b = map(int, raw_input().split())\n\nif (r*100+10*g+b) % 4 == 0:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 62, "index": 8047, "code": "def main():\n    RGB = input()\n\n    rgb = int(RGB.replace(' ', ''))\n    if rgb % 4 == 0:\n        print('YES')\n    else:\n        print('NO')\n\nmain()\n"}
{"label": 62, "index": 8048, "code": "a,b,c = map(int, input().split())\nif(10*b+c)%4 ==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8049, "code": "r, g, b = input().split(' ',3)\nif (int(r + g + b) % 4== 0) :\n    print('YES')\nelse:\n    print('NO')  "}
{"label": 62, "index": 8050, "code": "r, g, b = [int(i) for i in input().split()]\nsum = 4*100 + g*10 + b\nif sum % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 8051, "code": "r,g,b = [int(i) for i in input().split()]\nif (r*100+g*10+b)%4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 8052, "code": "n = [int(i) for i in input().split()]\nif (10*n[1] + n[2]) % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 8053, "code": "import sys\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\na,b,c = na()\nif (a*100+b*10+c) % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8054, "code": "#coding: utf-8\nr,g,b = map(int, raw_input().split(' '))\nmod = (100 * r + 10 * g + b) % 4\n\nif mod == 0:\n\tprint 'YES'\nelse:\n\tprint 'NO'"}
{"label": 62, "index": 8055, "code": "r,g,b = map(int,input().split())\ns = r * 100 + 10 * g + b\n\nif(s % 4 == 0):\n    print('YES')\n\nelse:\n    print('NO')"}
{"label": 62, "index": 8056, "code": "x,y,z=raw_input().split()\nif int(x+y+z)%4==0:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 62, "index": 8057, "code": "a, b, c = map(int, input().split())\nd = a * 100 + b * 10 + c\nif d % 4 == 0 :\n    print ('YES')\nelse :\n    print ('NO')"}
{"label": 62, "index": 8058, "code": "if __name__ == '__main__':\n    r, g, b = list(input().split())\n\n    target = int(r + g + b)\n\n    # print(target)\n\n    if target % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"}
{"label": 62, "index": 8059, "code": "a,b,c =map(int,input().split())\n\n\nif (a*100+b*10+c)%4==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 63, "index": 8060, "code": "N = int(input())\n\na = [int(n) for n in input().split()]\na = sorted(a)\nprint(a[N-1] - a[0])\n"}
{"label": 63, "index": 8061, "code": "if __name__ == '__main__':\n    N = int(input())\n\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    print(a[-1] - a[0])\n"}
{"label": 63, "index": 8062, "code": "N = int(raw_input())\na = map(int, raw_input().split())\nprint(max(a) - min(a))"}
{"label": 63, "index": 8063, "code": "import numpy as np\n \nn = int(input())\na = list(int(i) for i in input().split()) \na.sort()\nb = a[n - 1] - a[0]\n\nprint (b)"}
{"label": 63, "index": 8064, "code": "if __name__==\"__main__\":\n    N = int(raw_input())\n    a = list(set(map(int, raw_input().split())))\n    a.sort()\n    ans = sum([x[1]-x[0] for x in zip(a, a[1:])])\n    print ans"}
{"label": 63, "index": 8065, "code": "# -*- coding: utf-8 -*-\n\nN = int(input())\n\nM = input().split()\nM.sort()\n\na = int(M[N-1]) - int(M[0])\n\nprint(a)\n"}
{"label": 63, "index": 8066, "code": "n=int(input())\nnums=input().split()\n\nma=max(nums)\nmi=min(nums)\nprint(int(ma)-int(mi))"}
{"label": 63, "index": 8067, "code": "def get_min_root_num(a):\n    max_a = 0\n    min_a = 1000\n    for buf_a in a:\n        if buf_a > max_a:\n            max_a = buf_a\n\n        if buf_a < min_a:\n            min_a = buf_a\n\n    return max_a-min_a\n\nif __name__ == '__main__':\n    N = input()\n    a_list = [int(i) for i in input().split()]\n\n    print(get_min_root_num(a_list))\n"}
{"label": 63, "index": 8068, "code": "# -*- coding:utf-8 -*-\n\nn = int(input())\na = input().split()\n\nfor i in range(n):\n\ta[i] = int(a[i])\n\na.sort()\nprint(a[n-1] - a[0])"}
{"label": 63, "index": 8069, "code": "n=input()\nn=int(n)\nimport numpy as np\na=input().split()\nfor i in range(n):\n a[i]=int(a[i])\ndis=np.max(a)-np.min(a)\nprint(dis)"}
{"label": 63, "index": 8070, "code": "N = int(input())\na = [int(x) for x in input().split(\" \")]\n\nprint(max(a) - min(a))"}
{"label": 63, "index": 8071, "code": "n = int(input())\na = []\ni = input().split()\nfor x in range(n):\n a.append(int(i[x]))\na.sort()\nprint(a[-1]-a[0])"}
{"label": 63, "index": 8072, "code": "N = int(input())\nx = list(map(int, input().split()))\n\nprint('{0}'.format(max(x)-min(x)))\n\n\n\nquit()\n"}
{"label": 63, "index": 8073, "code": "N = int(input())\nhouse = list(map(int , input().split()))\n\nhouse.sort()\n\nprint(house[N - 1] - house[0] )\n"}
{"label": 63, "index": 8074, "code": "N = int(input())\na = list(map(int, input().split()))\na.sort()\n\nans = 0\nfor i in range(1, N):\n    ans += a[i] - a[i - 1]\n\nprint(ans)\n"}
{"label": 63, "index": 8075, "code": "n = input()\na = map(int, raw_input().split())\n\nans = max(a) - min(a)\nprint ans"}
{"label": 63, "index": 8076, "code": "n=input()\na=[int(i) for i in input().split()]\n\nmax=-10\nmin=10000\nfor i in a:\n    if i>max:\n        max=i\n    if i<min:\n        min=i\nprint(max-min)\n\n\n"}
{"label": 63, "index": 8077, "code": "# -*- coding: utf-8 -*-\n\nN = int(input())\na = list(map(int, input().split()))\nprint(max(a)-min(a))"}
{"label": 63, "index": 8078, "code": "N = int(input())\na = list(map(int, input().split(\" \")))\n\nprint(max(a) - min(a))"}
{"label": 63, "index": 8079, "code": "n = int(input())\nA = list(map(int, input().split()))\n\nprint(max(A) - min(A))"}
{"label": 63, "index": 8080, "code": "n = int(input())\na = input().split()\nlist =[]\n\nfor i in range(n):\n    if a[i] not in list:\n        list.append(a[i])\n    else:\n        pass\n    \nlist.sort()\n\nprint(int(list[-1])-int(list[0]))"}
{"label": 63, "index": 8081, "code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\nprint(a[-1] - a[0])\n"}
{"label": 63, "index": 8082, "code": "# -*- coding: utf-8 -*-\n\nN = int(raw_input())\na = map(int, raw_input().split()) \n\nprint max(a) - min(a)"}
{"label": 63, "index": 8083, "code": "n = int(input())\nA = list(map(int, input().split()))\nans = max(A) - min(A)\nprint(str(ans))"}
{"label": 63, "index": 8084, "code": "a = input()\nb = input().split()\nb.sort()\nans = int(b[-1]) - int(b[0])\nprint(ans)"}
{"label": 63, "index": 8085, "code": "N = int(input())\na = list(map(int, input().split()))\n\na.sort()\nprint(a[-1] - a[0])\n"}
{"label": 63, "index": 8086, "code": "import sys\n\nN = input()\nA = list(map(int,input().split()))\n\nprint(max(A)-min(A))"}
{"label": 63, "index": 8087, "code": "N=int(input())\n\na=map(int,input().split())\nb=sorted(a)\n\nprint(str(b[N-1]-b[0]))"}
{"label": 63, "index": 8088, "code": "\nN=int(raw_input().strip())\na=map(int,raw_input().split())\nprint max(a)-min(a)"}
{"label": 63, "index": 8089, "code": "n = input()\na = list(map(int, input().split()))\nprint(max(a) - min(a))"}
{"label": 63, "index": 8090, "code": "N = int(input())\nA = [int(i) for i in input().split()]\n\ndist = max(A) - min(A)\nprint(dist)\n"}
{"label": 63, "index": 8091, "code": "\"\"\"\nAtCoder Beginner Contest 064\nB - Traveling AtCoDeer Problem\n@author haru\n\"\"\"\n\narg1 = input()\narg2 = input()\nif not arg2.replace(\" \",\"\").isdigit(): exit(\"Error: Invalid Input\")\nDIMENTION = int(arg1) if arg1.isdigit() else exit(\"Error: Invalid Input\")\nPOSITIONS = [int(a) for a in arg2.split(\" \")]\nif not DIMENTION == len(POSITIONS): exit(\"Error: Invalid Input\")\nprint(max(POSITIONS) - min(POSITIONS))"}
{"label": 63, "index": 8092, "code": "N = input()\nn = [int(i) for i in input().split()]\nprint(max(n) - min(n))"}
{"label": 63, "index": 8093, "code": "N = int(input())\na = list(map(int,input().split()))\nprint(max(a) - min(a))"}
{"label": 63, "index": 8094, "code": "#!/usr/bin/python\n\nN = int(input())\nplaces = sorted(list(map(int, input().split(\" \"))), reverse=True)\n\nprev_position = places[0]\ntotal_distance = 0\nfor curr_position in places[1:]:\n    total_distance += prev_position - curr_position\n    prev_position = curr_position\n\nprint(total_distance)\n"}
{"label": 63, "index": 8095, "code": "N = int(input())\na = [int(num) for num in input().split()]\nprint(str(max(a)-min(a)))"}
{"label": 63, "index": 8096, "code": "\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nans = 0\nprev = a[0]\nfor i in a[1:]:\n    ans += (i - prev)\n    prev = i\nprint(ans)"}
{"label": 63, "index": 8097, "code": "N = int(raw_input())\nA = map(int, raw_input().split())\n\nprint max(A) - min(A)\n"}
{"label": 63, "index": 8098, "code": "input()\nnums = list(map(int, input().split()))\nprint(max(nums)-min(nums))\n"}
{"label": 63, "index": 8099, "code": "n=int(input())\na=list(map(int,input().split()))\na.sort()\nprint(a[n-1]-a[0])"}
{"label": 63, "index": 8100, "code": "N = input()\nL = input().split()\n\nprint(int(max(L))-int(min(L)))"}
{"label": 63, "index": 8101, "code": "n = int(input())\nA = list(map(int,input().split()))\nprint(max(A) - min(A))"}
{"label": 63, "index": 8102, "code": "nums = [0]\nn = int(input())\nnums *= n\nnums = list(map(int,input().split()))\nmax = 0\nmin = 1000\nfor i in range(n):\n    if nums[i]<min:\n        min = nums[i]\n    if max<nums[i]:\n        max = nums[i]\nprint(max-min)\n"}
{"label": 63, "index": 8103, "code": "N = int(input())\n\nAi = list(map(int,input().split()))\n\nprint(max(Ai)-min(Ai))"}
{"label": 63, "index": 8104, "code": "n = int(input())\narr = []\na = input().split()\nfor i in a:\n    arr.append(int(i))\nprint(max(arr)-min(arr))"}
{"label": 63, "index": 8105, "code": "N = int(raw_input())\na = map(int, raw_input().split())\n\nprint max(a) - min(a)"}
{"label": 63, "index": 8106, "code": "\nn = int(input())\na = list(map(int, input().split()))\n\nprint(max(a) - min(a))\n"}
{"label": 63, "index": 8107, "code": "n = int(input())\nl = sorted([int(x) for x in input().split()])\nprint(l[-1] - l[0])"}
{"label": 63, "index": 8108, "code": "\nn = int(input())\na = list(map(int, input().split()))\nprint(max(a)-min(a))"}
{"label": 63, "index": 8109, "code": "#! /usr/bin/env python3\n\ninput()\na = sorted(map(int, input().split()))\nprint(a[-1] - a[0])"}
{"label": 63, "index": 8110, "code": "_ = input()\na = [int(s) for s in input().split()]\n\nprint(max(a)-min(a))"}
{"label": 63, "index": 8111, "code": "input()\ncoordinates = tuple(map(int, input().split()))\nprint(max(coordinates) - min(coordinates))\n"}
{"label": 63, "index": 8112, "code": "input();a=list(map(int,input().split()))\nprint(max(a)-min(a))"}
{"label": 63, "index": 8113, "code": "#coding:utf-8\n\nif __name__ == \"__main__\":\n    N = int(input())\n    num_list = list(map(int, input().split(\" \")))\n\n    print(max(num_list) - min(num_list))\n\n"}
{"label": 63, "index": 8114, "code": "N=int(input())\na=list(map(int,input().split(\" \")))\n\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8115, "code": "N=int(raw_input())\na=map(int,raw_input().split())\nprint max(a)-min(a)"}
{"label": 63, "index": 8116, "code": "import numpy as np\n\nif __name__==\"__main__\":\n    N = int(input())\n    a = input().split()\n    a = list(map(int, a))\n    a = np.sort(a)\n    s = 0\n    for i in range(len(a) - 1):\n        s += (a[i+1] - a[i])\n\n    print(s)\n"}
{"label": 63, "index": 8117, "code": "# -*- coding: utf-8 -*-\nimport sys\n\nN = input()\nan = input()\ns = sorted(set(map(int, an.split())))\nprint(s[-1] - s[0])\n"}
{"label": 63, "index": 8118, "code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\nans = a[n-1] - a[0]\nprint(ans)\n"}
{"label": 63, "index": 8119, "code": "N=int(input())\na=list(map(int,input().split()))\na.sort()\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8120, "code": "\ndef b():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(max(a) - min(a))\n\nb()"}
{"label": 63, "index": 8121, "code": "N = int(input())\na = list(map(int, input().split()))\n\nleft = min(a)\nright = max(a)\n\nprint(right - left)\n"}
{"label": 63, "index": 8122, "code": "N=input()\nmax = -1\nmin=1001\nfor num in [int(n) for n in raw_input().split(' ')]:\n\tif max < num:\n\t\tmax=num\n\tif min > num:\n\t\tmin=num\n\nprint(max-min)"}
{"label": 63, "index": 8123, "code": "n=int(input())\na=[int(i)for i in input().split()]\na.sort()\nans=0\nfor i in range(1,n):\n\tans+=a[i]-a[i-1]\nprint(ans)\t\n"}
{"label": 63, "index": 8124, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n\n    print(A[-1] - A[0])\n\nif __name__ == \"__main__\": main()\n"}
{"label": 63, "index": 8125, "code": "N = int(input())\na = [int(i) for i in input().split()]\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8126, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nN = ri()\ns = rli()\nprint(max(s)-min(s))"}
{"label": 63, "index": 8127, "code": "N=int(input())\na=list(map(int,input().split()))\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8128, "code": "num = int(raw_input())\nlaw = raw_input().split(\" \")\ntmp = 0\nraw = []\nfor i in law:\n    raw.append(int(i))\nfor i in range(num):\n    for j in range(i, num):\n        div = abs(raw[i] - raw[j])\n        if div >= tmp:\n            tmp = div\nprint tmp\n"}
{"label": 63, "index": 8129, "code": "n=int(input())\narr=list(map(int,input().split()))\nprint(max(arr)-min(arr))\n"}
{"label": 63, "index": 8130, "code": "n = int(input())\narr = []\na = input().split()\nfor i in a:\n    arr.append(int(i))\nprint(max(arr)-min(arr))\n"}
{"label": 63, "index": 8131, "code": "N = int(input())\na = list(map(int,input().split()))\nprint(max(a) - min(a))\n"}
{"label": 63, "index": 8132, "code": "# coding: utf-8\ndef get_ln_inputs():\n    return input().split()\n\n\ndef get_ln_int_inputs():\n    return list(map(int, get_ln_inputs()))\n\n\ndef main():\n    _ = get_ln_int_inputs()\n    a = get_ln_int_inputs()\n    print(max(a) - min(a))\n\n\nmain()"}
{"label": 63, "index": 8133, "code": "#! -*- coding:utf-8 -*-\nn = int(input())\narr = list(map(int,input().split()))\narr.sort()\nprint(arr[-1]-arr[0])\n"}
{"label": 63, "index": 8134, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nN = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nprint(a[-1] - a[0])\n"}
{"label": 63, "index": 8135, "code": "n = int(input())\na = list(map(int, input().split()))\n\nmax = -1\nmin = 1001\nfor i in a:\n        if i > max:\n                max = i\n        if i < min:\n                min = i\n\nprint(max - min)"}
{"label": 63, "index": 8136, "code": "n=input()\na=list(map(int,input().split()))\na.sort()\nprint(a[-1]-a[0])"}
{"label": 63, "index": 8137, "code": "n = int(raw_input())\nl = map(int, raw_input().split())\nprint max(l) - min(l)\n"}
{"label": 63, "index": 8138, "code": "N = int(input())\na = list(map(int,input().split()))\nprint(max(a)-min(a))"}
{"label": 63, "index": 8139, "code": "n = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(a)-min(a))"}
{"label": 63, "index": 8140, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    a_list = list(map(int, input().split()))\n    print(max(a_list) - min(a_list))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 63, "index": 8141, "code": "N = int(input())\na = [int(i) for i in input().split()]\nprint(max(a)-min(a))"}
{"label": 63, "index": 8142, "code": "\nN = int(input())\nary = [int(e) for e in input().split()]\n\nmax_a = max(ary)\nmin_a = min(ary)\n\nprint(max_a - min_a)"}
{"label": 63, "index": 8143, "code": "n = input()\nA = [int(i) for i in input().split()]\nprint(max(A)-min(A))"}
{"label": 63, "index": 8144, "code": "n = input()\na = map(int, raw_input().split())\nprint max(a) - min(a)"}
{"label": 63, "index": 8145, "code": "N = int(input())\na= [int(n) for n in input().split()]\n\nprint(max(a)- min(a))\n"}
{"label": 63, "index": 8146, "code": "N = int(input())\n\ndata = input().split()\ndata = data[:N]\n\nprint(int(max(data)) - int(min(data)))\n\n"}
{"label": 63, "index": 8147, "code": "N = int(input())\na = list(map(int,input().split()))\na.sort()\nprint(a[-1]-a[0])"}
{"label": 63, "index": 8148, "code": "input(); print((lambda xs: max(xs) - min(xs))([int(x) for x in input().split()]))"}
{"label": 63, "index": 8149, "code": "n = input()\na = list(map(int, input().split(\" \")))\na.sort()\nprint(a[len(a)-1] - a[0])"}
{"label": 63, "index": 8150, "code": "input_line_1 = raw_input()\ninput_line_2 = raw_input()\n#N = int(input_line_1)\narray = [int(i) for i in input_line_2.split(\" \")]\nprint max(array) - min(array)"}
{"label": 63, "index": 8151, "code": "N = int(input())\na = input().split()\nmin = 1000\nmax = 0\nfor jj in range(len(a)):\n    if (int(a[jj]) < min):\n       min = int(a[jj])\n    if (int(a[jj]) > max):\n      max = int(a[jj])\nprint(max - min)"}
{"label": 63, "index": 8152, "code": "N = int(input())\na = [int(_) for _ in input().split()]\n\na = sorted(a)\nprint (a[-1]-a[0])"}
{"label": 63, "index": 8153, "code": "#!/usr/bin/env python3\n \nN = int(input())\na = list(map(int, input().split()))\n \nprint(max(a) - min(a))"}
{"label": 63, "index": 8154, "code": "N = int(input())\nmin = 1001\nmax = 0\n\naddresses = inputs = list(map(int, input().split(\" \")))\nfor address in addresses:\n    if address < min:\n        min = address\n    if address > max:\n        max = address\n\nprint(max - min)"}
{"label": 63, "index": 8155, "code": "# coding: utf-8\nimport array, bisect, collections, copy, heapq, itertools, math, random, re, string, sys, time\nsys.setrecursionlimit(10 ** 7)\nINF = 10 ** 20\nMOD = 10 ** 9 + 7\n\n\ndef II(): return int(input())\ndef ILI(): return list(map(int, input().split()))\ndef IAI(LINE): return [ILI() for __ in range(LINE)]\ndef IDI(): return {key: value for key, value in ILI()}\n\n\ndef read():\n    N = II()\n    a = ILI()\n    return (N, a)\n\n\ndef solve(N, a):\n    num_min = min(a)\n    num_max = max(a)\n    ans = num_max - num_min\n    return ans\n\n\ndef main():\n    params = read()\n    print(solve(*params))\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 63, "index": 8156, "code": "import copy\nN = int(input())\na = map(int, input().split())\nb = copy.deepcopy(a)\nprint(max(b) - min(a))"}
{"label": 63, "index": 8157, "code": "n=int(input())\na=input().split()\nfor i in range(n):\n   if i==0:\n       max=int(a[i])\n       min=int(a[i])\n   if(max<int(a[i])):\n       max=int(a[i])\n   if (min>int(a[i])):\n       min=int(a[i])\nprint(max-min)\n"}
{"label": 63, "index": 8158, "code": "# coding: utf-8\nN = int(input())\na=input().split()\na.sort()\nresult=int(a[N-1])-int(a[0])\nprint(result)\n"}
{"label": 63, "index": 8159, "code": "#4\n#2 3 7 9\n\ninput()\na = list(sorted(map(int, input().split())))\nprint(abs(a[0] - a[-1]))\n"}
{"label": 63, "index": 8160, "code": "n = int(raw_input())\ninpt = map(int, raw_input().split())\ninpt.sort()\n\nprint inpt[n-1] - inpt[0]\n"}
{"label": 63, "index": 8161, "code": "N = int(input())\nA = [int(_) for _ in input().split()]\nprint(max(A) - min(A))"}
{"label": 63, "index": 8162, "code": "N = int(input())\na = list(map(int, input().split(\" \")))\n\nprint (\"%d\"%(max(a) - min(a)))"}
{"label": 63, "index": 8163, "code": "n=int(raw_input())\na=map(int,raw_input().split())\nprint max(a)-min(a)"}
{"label": 63, "index": 8164, "code": "n = int(raw_input())\n\na = [int(_) for _ in raw_input().split()]\nprint max(a) - min(a)"}
{"label": 63, "index": 8165, "code": "input()\ns = list(map(int, input().split()))\nl = max(s)\nr = min(s)\nprint(l - r)"}
{"label": 63, "index": 8166, "code": "n = int(input())\na = list(map(int,input().split()))\n\na.sort()\n\nprint(a[-1] - a[0])\n"}
{"label": 63, "index": 8167, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    N = I()\n    a = LI()\n    return max(a) - min(a)\n\n\nprint(main())\n"}
{"label": 63, "index": 8168, "code": "n = int(input())\na = list(map(int,input().split(\" \")))\na.sort()\nd = a[-1] - a[0] \nprint(d)"}
{"label": 63, "index": 8169, "code": "input()\na = list(map(int, input().split()))\nprint(max(a) - min(a))\n"}
{"label": 63, "index": 8170, "code": "N = int(input())\na = list(map(int,input().split()))\n\nprint(max(a)-min(a))"}
{"label": 63, "index": 8171, "code": "n=int(input())\nlist=list(map(int,input().split()))\nans=max(list)-min(list)\nprint(ans)"}
{"label": 63, "index": 8172, "code": "import sys\n# sys.stdin=open(\"b1.in\")\n\nn = input()\na = list(map(int, input().split()))\nprint(max(a) - min(a))"}
{"label": 63, "index": 8173, "code": "N=int(input())\na_n=[int(i) for i in input().split()]\n\nprint(max(a_n)-min(a_n))"}
{"label": 63, "index": 8174, "code": "# -*- coding: utf-8 -*-\nN = int(input())\na = [int(n) for n in input().split()]\nprint(max(a) - min(a))"}
{"label": 63, "index": 8175, "code": "#!/usr/bin/env python\ndef solve():\n    N = input()\n    a = input().split()\n    a.sort()\n    n = 0\n    for i in range (0, len(a) - 1):\n        n += int(a[i+1]) - int(a[i])\n    print(n)\n\n\nif __name__ == '__main__':\n    solve()\n"}
{"label": 63, "index": 8176, "code": "N=int(raw_input())\na=map(int,raw_input().split(' '))\n\nprint max(a)-min(a)\n"}
{"label": 63, "index": 8177, "code": "# -*- coding: utf-8 -*-\n\nn = input()\na = map(int, raw_input().split())\n\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8178, "code": "nb = int(input())\na = list(map(int,input().split()))\nprint(max(a) - min(a))"}
{"label": 63, "index": 8179, "code": "#ABC064B\n\nn=int(raw_input())\nl=map(int,raw_input().split())\nprint max(l)-min(l)\n"}
{"label": 63, "index": 8180, "code": "N = input()\na = sorted(map(int, raw_input().split()))\nprint a[-1] - a[0]"}
{"label": 63, "index": 8181, "code": "N = int(input())\na = map(int, input().split())\n\na = sorted(a,reverse=True)\n\nresult = 0\n\nfor i in range(N-1):\n    result += a[i] - a[i+1]\n\nprint(result)"}
{"label": 63, "index": 8182, "code": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8183, "code": "def main():\n    n = input()\n    a_list = [int(i) for i in input().split()]\n\n    print(max(a_list) - min(a_list))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 63, "index": 8184, "code": "n = input()\nA = map(int, raw_input().split())\nA.sort()\nprint A[-1] - A[0]\n"}
{"label": 63, "index": 8185, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc064.contest.atcoder.jp/tasks/abc064_b\n\n\"\"\"\nimport sys\nfrom sys import stdin\n\ninput = stdin.readline\n\n\ndef main(args):\n    N = int(input())\n    positions = [int(x) for x in input().split()]\n    print(max(positions) - min(positions))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 63, "index": 8186, "code": "N = int(input())\na = set(map(int, input().split()))\nprint(max(a) - min(a))"}
{"label": 63, "index": 8187, "code": "n = int(input())\na = list(int(i) for i in input().split())\n\na.sort\n\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8188, "code": "import sys\n \nstdin = sys.stdin\n \nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\n\nn = ni()\na = na()\n\na = sorted(a)\n\nprint(a[len(a) - 1] - a[0])"}
{"label": 63, "index": 8189, "code": "N = int(input())\na = [int(i) for i in input().split()]\nprint(max(a) - min(a))\n"}
{"label": 64, "index": 8190, "code": "N = int(input())\na = list(map(int, input().split()))\n \nCOLOR = 8\ncnt, ov = [0] * COLOR, 0\nfor r in a:\n    if r < 3200:\n        cnt[r // 400] = 1\n    else:\n        ov += 1\n\nused = 0\nfor c in cnt:\n    if c > 0:\n        used += 1\n\nprint(max(1, used), used + ov)\n"}
{"label": 64, "index": 8191, "code": "N = int(input())\nR = [1,400,800,1200,1600,2000,2400,2800,3200,4801]\nr = [0] * 10\nA = list(map(int,input().split()))\nfor a in A:\n\tm = 0\n\tM = 9\n\twhile True:\n\t\tn = (m + M) // 2\n\t\tif a < R[n]:\n\t\t\tM = n\n\t\telif a >= R[n + 1]:\n\t\t\tm = n\n\t\telse:\n\t\t\tbreak\n\tr[n] += 1\ncnt = 0\nfor i in r[:-2]:\n\tif i > 0:\n\t\tcnt += 1\nif cnt == 0:\n\tmax_cnt = r[8]\n\tcnt = 1\nelse:\n\tmax_cnt = cnt + r[8]\nprint(cnt,max_cnt)"}
{"label": 64, "index": 8192, "code": "# coding: utf-8\ndef get_ln_int_inputs():\n    return list(map(int, input().split()))\n\n\ndef main():\n    input()\n    rates = get_ln_int_inputs()\n\n    colors = [0] * 8\n    free_colors = 0\n    for rate in rates:\n        if rate >= 3200:\n            free_colors += 1\n        else:\n            colors[rate // 400] = 1\n    fixed_colors = sum(colors)\n\n    print(str(max(fixed_colors, 1)) + \" \" + str(max(fixed_colors + free_colors, 1)))\n\n\nmain()"}
{"label": 64, "index": 8193, "code": "def c():\n    n = int(input())\n    a = list(map(int, input().split()))\n    # x = []\n    def set_col(rate):\n        r = rate // 400\n        r = min(8, r)\n        return r\n\n    l = list(map(set_col, a))\n    over_rate = l.count(8)\n    res = set(l)\n    if 8 in res: res.remove(8)\n\n    mi = max(1, len(res))\n    ma = len(res) + over_rate\n    print(mi, ma)\n\nc()"}
{"label": 64, "index": 8194, "code": "n=int(input())\npr=list(map(int,input().split()))\nrate_color=[]\nsuge=0\nfor i in range(n):\n    if pr[i]>=3200:\n        suge+=1\npr=[x for x in pr if x<=3199]\n\ndef cl(x):\n    if x<=399:\n        return [0]\n    elif 400<=x<=799:\n        return [1]\n    elif 800 <=x<=1199:\n        return [2]\n    elif 1200 <=x<=1599:\n        return [3]\n    elif 1600<=x<= 1999:\n        return [4]\n    elif 2000 <=x<=2399:\n        return [5]\n    elif 2400 <=x<=2799:\n        return [6]\n    elif 2800 <=x<=3199:\n        return [7]\n\nfor i in range(len(pr)):\n    x=pr[i]\n    rate_color+=cl(x)\ncolor=list(set(rate_color))\ncolor_num=len(color)\n\n\nmax_num=color_num+suge\nif color_num==0:\n    mini_num=1\nelse:\n    mini_num=color_num\nprint(mini_num,max_num)"}
{"label": 64, "index": 8195, "code": "\nN=int(input())\n\na=[int(i) for i in input().split()]\n\ncolor=[0,0,0,0,0,0,0,0]\nalles=0\n\nfor i in range(N) :\n    \n    if a[i]<400 :\n        color[0]+=1\n    elif a[i]<800 :\n        color[1]+=1\n    elif a[i]<1200 :\n        color[2]+=1\n    elif a[i]<1600 :\n        color[3]+=1\n    elif a[i]<2000 :\n        color[4]+=1\n    elif a[i]<2400 :\n        color[5]+=1\n    elif a[i]<2800 :\n        color[6]+=1\n    elif a[i]<3200 :\n        color[7]+=1\n    else :\n        alles+=1\n\n        \nwhile 0 in color :color.remove(0)\n\n\nif len(color)==0 :\n    print(int(1),\" \",len(color)+alles)\nelse :\n    print(len(color),\" \",len(color)+alles)\n\n\n\n"}
{"label": 64, "index": 8196, "code": "#! -*- coding:utf-8 -*-\nn = int(input())\na = list(map(int,input().split()))\narr = []\ncount = 0\nfor i in range(len(a)):\n    if a[i] <= 3199:\n        arr.append(a[i] // 400)\n    else:\n        count += 1\nif len(set(arr)) != 0:\n    print(len(set(arr)), len(set(arr)) + count,sep = ' ')\nelse:\n    print(1, count,sep = ' ')\n"}
{"label": 64, "index": 8197, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Aug 28 21:42:33 2016\n\n@author: you\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\ncolornum = 0\ncolorflag = [0,0,0,0,0,0,0,0]\nrainbow = 0\nmaxvalue = 0\nminvalue = 0\nfor i in range(n):\n    if colorflag[0] == 0 and a[i] < 400:\n        colornum = colornum + 1\n        colorflag[0] = 1\n    elif colorflag[1] == 0 and a[i] >= 400 and a[i] < 800:\n        colornum = colornum + 1\n        colorflag[1] = 1\n    elif colorflag[2] == 0 and a[i] >= 800 and a[i] < 1200:\n        colornum = colornum + 1\n        colorflag[2] = 1\n    elif colorflag[3] == 0 and a[i] >= 1200 and a[i] < 1600:\n        colornum = colornum + 1\n        colorflag[3] = 1\n    elif colorflag[4] == 0 and a[i] >= 1600 and a[i] < 2000:\n        colornum = colornum + 1\n        colorflag[4] = 1\n    elif colorflag[5] == 0 and a[i] >= 2000 and a[i] < 2400:\n        colornum = colornum + 1\n        colorflag[5] = 1\n    elif colorflag[6] == 0 and a[i] >= 2400 and a[i] < 2800:\n        colornum = colornum + 1\n        colorflag[6] = 1\n    elif colorflag[7] == 0 and a[i] >= 2800 and a[i] < 3200:\n        colornum = colornum + 1\n        colorflag[7] = 1\n    elif a[i] >= 3200:\n        rainbow = rainbow + 1\nfor j in range(8):\n    if colorflag[j] == 1:\n        minvalue = minvalue + 1\nmaxvalue = minvalue + rainbow\nif minvalue == 0:\n    minvalue = 1\n    maxvalue = rainbow\nprint(minvalue,maxvalue)\n"}
{"label": 64, "index": 8198, "code": "import sys\nfrom collections import defaultdict\n\ndef main():\n    n = int(sys.stdin.readline())\n\n    line = sys.stdin.readline()\n    lst = line.split()\n\n    cnt_dic = defaultdict(int)\n\n    #400\u3067\u5272\u3063\u305f\u3068\u304d\u306e\u5546\u304c0,1,2,3,4,5,6,7\n    #8\u4ee5\u4e0a\u306f\u3001\u81ea\u7531\u306b\u8272\u3092\u6c7a\u3081\u3089\u308c\u308b\n\n    for ch in lst:\n        rating = int(ch)\n        n = rating // 400\n        if n <= 7:\n            cnt_dic[n] += 1\n        else:\n            cnt_dic[8] += 1\n\n    ans_max = 0\n    ans_min = 0\n    for i in range(0,8):\n        if cnt_dic[i] > 0:\n            ans_max += 1\n            ans_min += 1\n\n    if cnt_dic[8] > 0:\n        ans_max += cnt_dic[8]\n        if ans_min == 0:\n            ans_min += 1\n\n    print(\"%d %d\" % (ans_min, ans_max))\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 64, "index": 8199, "code": "def whichcolor(n):\n\tif n < 3200:\n\t\treturn n / 400\n\telse:\n\t\treturn 8\n\ndef countnotzero(lst):\n\tcnt = 0\n\tfor i in range(0, len(lst)):\n\t\tif lst[i] != 0:\n\t\t\tcnt += 1\n\treturn cnt\n\nn = int(raw_input())\ninpt = map(int, raw_input().split())\n\ncolor = [0, 0, 0, 0, 0, 0, 0, 0]\nalmighty = 0\n\nfor i in range(0, n):\n\tc = whichcolor(inpt[i])\n\tif c == 8:\n\t\talmighty += 1\n\telse:\n\t\tcolor[c] += 1\n\nnzro = countnotzero(color)\nmin = nzro\nif min == 0:\n\tmin = 1\nmax = nzro + almighty\nprint str(min) + ' ' + str(max)\n"}
{"label": 64, "index": 8200, "code": "n = input()\na = input()\ntmp_a = a.split()\na_list = []\no_list = []\nflag = 0\n\nfor i in range(int(n)):\n    if int(tmp_a[i]) < 400:\n        a_list.append(\"gray\")\n    elif 400 <= int(tmp_a[i]) and int(tmp_a[i]) < 800:\n        a_list.append(\"brown\")\n    elif 800 <= int(tmp_a[i]) and int(tmp_a[i]) < 1200:\n        a_list.append(\"green\")\n    elif 1200 <= int(tmp_a[i]) and int(tmp_a[i]) < 1600:\n        a_list.append(\"sky\")\n    elif 1600 <= int(tmp_a[i]) and int(tmp_a[i]) < 2000:\n        a_list.append(\"blue\")\n    elif 2000 <= int(tmp_a[i]) and int(tmp_a[i]) < 2400:\n        a_list.append(\"yellow\")\n    elif 2400 <= int(tmp_a[i]) and int(tmp_a[i]) < 2800:\n        a_list.append(\"orange\")\n    elif 2800 <= int(tmp_a[i]) and int(tmp_a[i]) < 3200:\n        a_list.append(\"red\")\n    else:\n        o_list.append(\"other\")\n\nn_other = len(o_list)\n\nif len(set(a_list))==0:\n    min_num = 1\nelse:\n    min_num = len(set(a_list))\n\nmax_num = len(set(a_list))+n_other\n#if max_num > 8:\n#    max_num = 8\n\nprint(min_num, max_num)\n"}
{"label": 64, "index": 8201, "code": "other=[0,0,0,0,0,0,0,0]\nred=0\nn=int(input())\narr=list(map(int,input().split()))\nfor a in arr:\n    if a<400:\n        other[0]=1\n    elif a<800:\n        other[1]=1\n    elif a<1200:\n        other[2]=1\n    elif a<1600:\n        other[3]=1\n    elif a<2000:\n        other[4]=1\n    elif a<2400:\n        other[5]=1\n    elif a<2800:\n        other[6]=1\n    elif a<3200:\n        other[7]=1\n    else:\n        red+=1\nif sum(other)==0:\n    print(1,red)\nelse:\n    print(sum(other),sum(other)+red)\n"}
{"label": 64, "index": 8202, "code": "N = int(input())\ndata = list(map(int,input().split()))\nbox = [0]*8\nnum = 0\nfor i in range(len(data)):\n        x = int(data[i] / 400)\n        if x < 8:\n            box[x] += 1\n        else:\n            num += 1\nanswer = len(box)   - box.count(0)\nif answer == 0:\n    print(1,num)\nelse:\n    print(answer,(answer+num))\n\n"}
{"label": 64, "index": 8203, "code": "N = int(input())\na = list(map(int, input().split(\" \")))\n\nc = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nfor rate in a:\n    if (rate >= 1) and (400 > rate):\n        c[0] += 1\n    elif (rate >= 400) and (800 > rate):\n        c[1] += 1\n    elif (rate >= 800) and (1200 > rate):\n        c[2] += 1\n    elif (rate >= 1200) and (1600 > rate):\n        c[3] += 1\n    elif (rate >= 1600) and (2000 > rate):\n        c[4] += 1\n    elif (rate >= 2000) and (2400 > rate):\n        c[5] += 1\n    elif (rate >= 2400) and (2800 > rate):\n        c[6] += 1\n    elif (rate >= 2800) and (3200 > rate):\n        c[7] += 1\n    else:\n        c[8] += 1\n        \ncolor_rigid = len([i for i, e in enumerate(c[:8]) if e != 0])\n\nprint (\"%d %d\"%(max(1, color_rigid), color_rigid + c[8]))"}
{"label": 64, "index": 8204, "code": "N = int(input())\na = list(map(int, input().split()))\n\nrating = [0 for i in range(9)]\nfor aa in a:\n    if aa <= 3199:\n        rating[aa // 400] += 1\n    else:\n        rating[8] += 1\n\nans_min = 0\nfor i in range(8):\n    if rating[i] > 0:\n        ans_min += 1\n\nans_max = ans_min + rating[8]\n\nans_min = max(ans_min, 1)\n\nprint(ans_min, ans_max)\n"}
{"label": 64, "index": 8205, "code": "N = int(input())\n\nexist = [False for i in range(8)]\ncolorful = 0\nmin = 0\n\nrates = list(map(int, input().split(\" \")))\n\nfor rate in rates:\n    if rate >= 3200:\n        colorful += 1\n        continue\n    if not exist[int(rate/400)]:\n        exist[int(rate / 400)] = True\n        min += 1\n\nmax_color = colorful + min\nif min == 0:\n    min = 1\n\nresult = str(min) + \" \" + str(max_color)\nprint(result)\n"}
{"label": 64, "index": 8206, "code": "N =int(input())\nscores = [min(int(i)//400, 8) for i in input().split()]\nd = [0]*9\nfor s in scores:\n    d[s] = d[s] + 1\nlt3200 = [bool(i) for i in d[:8]].count(True)\nm = max(1, lt3200)\nM = lt3200+d[8]\nprint('{} {}'.format(m, M))"}
{"label": 64, "index": 8207, "code": "input()\nrates = sorted([int(x) for x in input().split()])\nleast = 0\nfor boundary in (399, 799, 1199, 1599, 1999, 2399, 2799, 3199):\n    length = len(rates)\n    while rates and (rates[0] <= boundary):\n        rates.pop(0)\n    least += length > len(rates)\nprint(\"{} {}\".format((least == 0)+least, least+len(rates)))"}
{"label": 64, "index": 8208, "code": "# - coding: utf-8 -*-\n\n# \u8272\u3092\u8fd4\u5374\ndef what_color(num):\n    if num < 400: #\u7070\u8272\n        return 0\n    elif num < 800: #\u8336\u8272\n        return 1\n    elif num <1200 : #\u7dd1\n        return 2\n    elif num < 1600: #\u6c34\u8272\n        return 3\n    elif num < 2000: #\u9752\n        return 4\n    elif num < 2400: #\u9ec4\u8272\n        return 5\n    elif num < 2800: #\u6a59\u8272\n        return 6\n    elif num < 3200: #\u8d64\u8272\n        return 7\n    else:\n        return 8\n\nn = raw_input()\na = map(int, raw_input().split())\n\ncolors = [0, 0, 0, 0, 0, 0, 0, 0]\ngod = 0\nfor rate in a:\n    color = what_color(rate)\n    if color == 8:\n        god = god+1\n    else:\n        colors[color] = 1\n\nsum_colors = sum(colors)\n\nsaidai = sum_colors + god\nsaisyo = sum_colors\nif saisyo == 0:\n    saisyo = 1\n\nprint '{0} {1}'.format(saisyo, saidai)\n"}
{"label": 64, "index": 8209, "code": "colors = {\"hai\": False,\n          \"cha\": False,\n          \"midori\": False,\n          \"mizu\": False,\n          \"ao\": False,\n          \"ki\": False,\n          \"daidai\": False,\n          \"aka\": False}\ni2c = [None]*3200\nfor i in range(3200):\n    if i < 400:\n        i2c[i] = \"hai\"\n    elif i < 800:\n        i2c[i] = \"cha\"\n    elif i < 1200:\n        i2c[i] = \"midori\"\n    elif i < 1600:\n        i2c[i] = \"mizu\"\n    elif i < 2000:\n        i2c[i] = \"ao\"\n    elif i < 2400:\n        i2c[i] = \"ki\"\n    elif i < 2800:\n        i2c[i] = \"daidai\"\n    else:\n        i2c[i] = \"aka\"\nn = int(input())\nrates = [int(i) for i in input().split()]\njiyu = 0\nfor x in rates:\n    if x >= 3200:\n        jiyu += 1\n    else:\n        colors[i2c[x]] = True\nsaisho = 0\n# print(jiyu, colors)\nfor x in colors:\n    if(colors[x]):\n        saisho += 1\nif(saisho < 1):\n    saisho = 1\n    jiyu -= 1\nprint(saisho, saisho+jiyu)\n"}
{"label": 64, "index": 8210, "code": "def c():\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = []\n    def set_col(rate):\n        if rate <= 399:\n            return '\u7070\u8272'\n        elif rate <= 799:\n            return '\u8336\u8272'\n        elif rate <= 1199:\n            return '\u7dd1\u8272'\n        elif rate <= 1599:\n            return '\u6c34\u8272'\n        elif rate <= 1999:\n            return '\u9752\u8272'\n        elif rate <= 2399:\n            return '\u9ec4\u8272'\n        elif rate <= 2799:\n            return '\u6a59\u8272'\n        elif rate <= 3199:\n            return '\u8d64\u8272'\n        else:\n            x.append(1)\n            return\n\n    res = set(map(set_col, a))\n    if None in res: res.remove(None)\n    mi = max(1, len(res))\n    ma = len(res) + len(x)\n    print(mi, ma)\n\nc()\n"}
{"label": 64, "index": 8211, "code": "import numpy as np\n \nn = int(input())\na = list(int(i) for i in input().split()) \na.sort()\nminCount = 0\nmaxCount = 0\ncount = np.zeros(9)\n\nfor i in range(n) :\n    if a[i] < 400 :\n        count[0] = count[0] + 1\n    elif a[i] < 800 :\n        count[1] = count[1] + 1\n    elif a[i] < 1200 :\n        count[2] = count[2] + 1\n    elif a[i] < 1600 :\n        count[3] = count[3] + 1\n    elif a[i] < 2000 :\n        count[4] = count[4] + 1\n    elif a[i] < 2400 :\n        count[5] = count[5] + 1\n    elif a[i] < 2800 :\n        count[6] = count[6] + 1\n    elif a[i] < 3200 :\n        count[7] = count[7] + 1\n    elif a[i] < 4801 :\n        count[8] = count[8] + 1\n\nfor i in range(8) :\n    if count[i] > 0 :\n        minCount = minCount + 1\n        maxCount = maxCount + 1\n\nmaxCount = maxCount + count[8]\nif minCount == 0 :\n    minCount = 1\n\n#print (a)\nprint (minCount, end =' ')\nprint (int(maxCount))"}
{"label": 64, "index": 8212, "code": "input();A=map(int,input().split());C=[0]*99;D=0\nfor a in A:a//=400;D+=a>7;C[a]=a<8\nE=sum(C);print(max(E,1),E+D)"}
{"label": 64, "index": 8213, "code": "N = int(input())\na = input().split()\nb = []\nfor ii in range(9):\n    b.append(0)\nfor ii in range(N):\n    if int(a[ii]) < 400:\n        b[0] = b[0] + 1\n    elif int(a[ii]) < 800:\n        b[1] = b[1] + 1\n    elif int(a[ii]) < 1200:\n        b[2] = b[2] + 1\n    elif int(a[ii]) < 1600:\n        b[3] = b[3] + 1\n    elif int(a[ii]) < 2000:\n        b[4] = b[4] + 1\n    elif int(a[ii]) < 2400:\n        b[5] = b[5] + 1\n    elif int(a[ii]) < 2800:\n        b[6] = b[6] + 1\n    elif int(a[ii]) < 3200:\n        b[7] = b[7] + 1\n    else:\n        b[8] = b[8] + 1\nmin = 0\nmax = 0\nfor ii in range(8):\n    if b[ii] > 0:\n        min = min + 1\n        max = max + 1\nmax = max + b[8]\nif min == 0 and b[8] >0:\n    min = 1\nprint(str(min) + ' ' + str(max))"}
{"label": 64, "index": 8214, "code": "N = int(input())\na = list(map(int,input().split()))\n\nGRAY = 400\nBROWN = 800\nGREEN = 1200\nCYAN = 1600\nBLUE = 2000\nYELLOW = 2400\nORANGE = 2800\nRED = 3200\n\ncolors = []\nover3200 = 0\n\nfor i in a:\n    if i < GRAY:\n        colors.append(GRAY)\n    elif i < BROWN:\n        colors.append(BROWN)\n    elif i < GREEN:\n        colors.append(GREEN)\n    elif i < CYAN:\n        colors.append(CYAN)\n    elif i < BLUE:\n        colors.append(BLUE)\n    elif i < YELLOW:\n        colors.append(YELLOW)\n    elif i < ORANGE:\n        colors.append(ORANGE)\n    elif i < RED:\n        colors.append(RED)\n    else:\n        over3200 += 1\n\ncolornum = len(set(colors))\nmincolor = max(colornum, 1)\nmaxcolor = colornum + over3200\n\nprint(' '.join([str(mincolor),str(maxcolor)]))"}
{"label": 64, "index": 8215, "code": "#!/usr/bin/python\n\nn = input()\na = [int(i) for i in input().split()]\ncolor = [0, 0, 0, 0, 0, 0, 0, 0]\ntr = 0\n\nfor i in a:\n  if i < 3200 and color[int(i/400)] == 0:\n    color[int(i / 400)] = 1\n  elif i >= 3200:\n    tr += 1\n\ncolor_kind = 0\nfor i in color:\n  if i == 1:\n    color_kind += 1\n\nif color_kind > 0:\n  print(str(color_kind) + \" \", end = '')\nelse:\n  print(str(1) + \" \", end = '')\n\nprint(str(color_kind + tr))"}
{"label": 64, "index": 8216, "code": "z = input()\ncs = [ int(x) for x in input().split() ]\nar = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nup = 0\nmn = 0\nmx = 0\n\nfor x in cs :\n  if x < 400 :\n    ar[0] = 1\n  elif x < 800 :\n    ar[1] = 1\n  elif x < 1200 :\n    ar[2] = 1\n  elif x < 1600 :\n    ar[3] = 1\n  elif x < 2000 :\n    ar[4] = 1\n  elif x < 2400 :\n    ar[5] = 1\n  elif x < 2800 :\n    ar[6] = 1\n  elif x < 3200 :\n    ar[7] = 1\n  else :\n    up = up + 1\n\nif sum(ar) == 0 :\n  mn = 1\n  mx = up\nelse :\n  mn = sum(ar)\n  mx = sum(ar) + up\n\nprint(str(mn) + \" \" + str(mx))"}
{"label": 64, "index": 8217, "code": "n = int(input())\na = map(int, input().split())\nl = [0 for i in range(9)]\n\nfor i in a:\n    if i // 400 >= 8:\n        l[8] += 1\n    else:\n        l[i // 400] = 1\nif sum(l[:8]) == 0:\n    print(1, sum(l))\nelse:\n    print(sum(l[:8]), sum(l))\n"}
{"label": 64, "index": 8218, "code": "N = int(input())\na = [int(n) for n in input().split()]\n\ncolors = [0,0,0,0,0,0,0,0]\nfree = 0\n\nfor i in a:\n    if i < 400:\n        colors[0] = 1\n    elif i < 800:\n        colors[1] = 1\n    elif i < 1200:\n        colors[2] = 1\n    elif i < 1600:\n        colors[3] = 1\n    elif i < 2000:\n        colors[4] = 1\n    elif i < 2400:\n        colors[5] = 1\n    elif i < 2800:\n        colors[6] = 1\n    elif i < 3200:\n        colors[7] = 1\n    else:\n        free += 1\n\ns = sum(colors)\n\nprint(str(max(s, 1)) + \" \" + str(s + free))\n"}
{"label": 64, "index": 8219, "code": "N=int(input())\na=list(map(int,input().split()))\nc=[0,0,0,0,0,0,0,0]\nr=0\nans=0\nfor i in a:\n    if i <400:\n        c[0] += 1\n    elif i>=400 and i<800:\n        c[1] += 1\n    elif i>=800 and i<1200:\n        c[2] += 1\n    elif i>=1200 and i<1600:\n        c[3] += 1\n    elif i>=1600 and i<2000:\n        c[4] += 1\n    elif i>=2000 and i<2400:\n        c[5] += 1\n    elif i>=2400 and i<2800:\n        c[6] += 1\n    elif i>=2800 and i<3200:\n        c[7] += 1\n    else:\n        r += 1\nfor i in c:\n    if i>0:\n        ans += 1\n\nif ans==0:\n    print(1,r)\nelse:\n    print(ans,ans+r)"}
{"label": 64, "index": 8220, "code": "N=int(input())\ngray=0\nbrown=0\ngreen=0\ncyan=0\nblue=0\nyellow=0\ndai=0\nred=0\nchan=0\nA=input().split()\nfor i in range(N):\n    a=int(A[i])\n    if a<400:\n        gray=1    \n    elif a<800:\n        brown=1\n    elif a<1200:\n        green=1   \n    elif a<1600:\n        cyan=1\n    elif a<2000:\n        blue=1\n    elif a<2400:\n        yellow=1\n    elif a<2800:\n        dai=1\n    elif a<3200:\n        red=1    \n    else:\n        chan=chan+1\nmin=gray+brown+green+cyan+blue+yellow+dai+red\n \n \nif chan==0:\n   print(str(min)+' '+str(min))\nelse:\n   max=min+chan\n   if min==0:\n      min=1\n   print(str(min)+' '+str(max))"}
{"label": 64, "index": 8221, "code": "# -*- coding: utf-8 -*-\nn = input()\na = map(int, raw_input().split())\na = sorted(a)\n\ncheck = [0]*8\nex = 0\nfor i in range(n):\n    if(a[i]<3200):\n        check[a[i]/400] = 1\n    else:\n        ex += 1\nl = max(sum(check),1)\nh = sum(check)+ex\nprint(str(l)+' '+str(h))"}
{"label": 64, "index": 8222, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\nN = int(input())\nA = list(map(int, input().split()))\n\nB = [0] * 8\nany_color = 0\n\nfor a in A:\n    if a <= 399:\n        B[0] += 1\n    elif a <= 799:\n        B[1] += 1\n    elif a <= 1199:\n        B[2] += 1\n    elif a <= 1599:\n        B[3] += 1\n    elif a <= 1999:\n        B[4] += 1\n    elif a <= 2399:\n        B[5] += 1\n    elif a <= 2799:\n        B[6] += 1\n    elif a <= 3199:\n        B[7] += 1\n    else:\n        any_color += 1\n\nif any_color == N:\n    print(1, any_color)\nelse:\n    colored_num = len([b for b in B if b > 0])\n    zero_num = len([b for b in B if b == 0])\n    max_num = colored_num + any_color\n    print(colored_num, max_num)"}
{"label": 64, "index": 8223, "code": "N = int(input())\na = list(map(int, input().split()))\ns = []\nk = 0\nl = 0\n\nfor i in range(N):\n\tif a[i] <= 399:\n\t\ts.append('a')\n\telif a[i] <= 799:\n\t\ts.append('b')\n\telif a[i] <= 1199:\n\t\ts.append('c')\n\telif a[i] <= 1599:\n\t\ts.append('d')\n\telif a[i] <= 1999:\n\t\ts.append('e')\n\telif a[i] <= 2399:\n\t\ts.append('f')\n\telif a[i] <= 2799:\n\t\ts.append('g')\n\telif a[i] <= 3199:\n\t\ts.append('h')\n\telse:\n\t\tk += 1\n\nif s.count(\"a\") != 0:\n\tl += 1\n\nif s.count(\"b\") != 0:\n\tl += 1\n\t\nif s.count(\"c\") != 0:\n\tl += 1\n\nif s.count(\"d\") != 0:\n\tl += 1\n\nif s.count(\"e\") != 0:\n\tl += 1\n\t\nif s.count(\"f\") != 0:\n\tl += 1\n\nif s.count(\"g\") != 0:\n\tl += 1\n\nif s.count(\"h\") != 0:\n\tl += 1\n\t\nm = k + l\n\nif l == 0:\n\tprint(1,m)\nelse:\n\tprint(l,m)"}
{"label": 64, "index": 8224, "code": "\nborders = [400, 800, 1200, 1600, 2000, 2400, 2800, 3200]\ndef getcolor(rate):\n    i = 0\n    for border in borders:\n        if rate < border:\n            return i\n        i += 1\n    return -1\n\nN = int(input())\nrates = [int(x) for x in input().split(\" \")]\ncolors = [0 for _ in range(len(borders))]\ntopcoders = 0\n\nfor rate in rates:\n    c = getcolor(rate)\n    if c != -1:\n        colors[c] = 1\n    else:\n        topcoders += 1\n\ns_c = sum(colors)\nans = \"{0} {1}\".format(max(s_c, 1), s_c + topcoders)\nprint(ans)"}
{"label": 64, "index": 8225, "code": "#\u5165\u529b\nN = int(input())\na_list = []\na_list = list(map(int,input().split()))\n\n#\u5909\u6570\u3092\u7528\u610f\ng_list = [0]*9\n\n#\u30b0\u30eb\u30fc\u30d71\u306e\u8981\u7d20\u304c\u3042\u308b\u304b\u78ba\u8a8d\nfor i in range(N):\n    if 1 <= a_list[i] <= 399:\n        g_list[0] = 1\n        break\n\n#\u30b0\u30eb\u30fc\u30d72\u304b\u30898\u306e\u8981\u7d20\u304c\u3042\u308b\u304b\u78ba\u8a8d\nfor j in range(1,8):\n    for k in range(N):\n        if 400*j <= a_list[k] <= (400*(j+1)-1):\n            g_list[j] = 1\n            break\n\n#\u30b0\u30eb\u30fc\u30d71\u304b\u30898\u306e\u8981\u7d20\u6570\u3092g\u306b\u4ee3\u5165\ng = 0\nfor m in range(8):\n    g += g_list[m] \n\n#\u30b0\u30eb\u30fc\u30d79\u306e\u8981\u7d20\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u6570\u3048\u308b\ng_list[8] = 0\nfor l in range(N):\n    if a_list[l] >= 3200:\n        g_list[8] += 1\n\n#\u6761\u4ef6\u5206\u5c90\u3057\u3066\u6570\u3048\u308b\nif g_list[8]==0:\n    print(g,g)\n\nelif g==0:\n    print(1,g_list[8])\n\nelse:\n    print(g,g+g_list[8])\n"}
{"label": 64, "index": 8226, "code": "# -*- coding: utf-8 -*-\nfrom collections import Counter\nN = int(input())\na = [int(n)//400 for n in input().split()]\ncounter = Counter(a)\n\ncolors = 0\nfor i in range(8):\n    if counter[i] > 0:\n        colors += 1\n\nrainbow_coder = 0\nfor i in range(8, 13):\n    rainbow_coder += counter[i]\n\nprint(\"{} {}\".format(max(1, colors), colors+rainbow_coder))\n"}
{"label": 64, "index": 8227, "code": "# coding: utf-8\nimport array, bisect, collections, copy, heapq, itertools, math, random, re, string, sys, time\n\nsys.setrecursionlimit(10 ** 7)\nINF = 10 ** 20\nMOD = 10 ** 9 + 7\n\n\ndef II(): return int(input())\ndef ILI(): return list(map(int, input().split()))\ndef IAI(LINE): return [ILI() for __ in range(LINE)]\ndef IDI(): return {key: value for key, value in ILI()}\n\n\ndef read():\n    N = II()\n    a = ILI()\n    return (N, a)\n\n\ndef solve(N, a):\n    count = [0] * 9\n    for ele in a:\n        if 1 <= ele <= 399:\n            count[0] = 1\n        elif 400 <= ele <= 799:\n            count[1] = 1\n        elif 800 <= ele <= 1199:\n            count[2] = 1\n        elif 1200 <= ele <= 1599:\n            count[3] = 1\n        elif 1600 <= ele <= 1999:\n            count[4] = 1\n        elif 2000 <= ele <= 2399:\n            count[5] = 1\n        elif 2400 <= ele <= 2799:\n            count[6] = 1\n        elif 2800 <= ele <= 3199:\n            count[7] = 1\n        elif ele >= 3200:\n            count[8] += 1\n\n    num_else = sum(count[0: 8])\n    ans_max = sum(count)\n    if num_else == 0:\n        ans_min = 1\n    else:\n        ans_min = num_else\n    \n    ans = (ans_min, ans_max)\n    return ans\n\n\ndef main():\n    params = read()\n    ans = solve(*params)\n    print(\"{} {}\".format(ans[0], ans[1]))\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 64, "index": 8228, "code": "N = int(input())\na = [int(i) for i in input().split()]\n\ncolor = [0] * 8\nover = 0\n\nfor i in a:\n    if 0 <= i <= 399:\n        color[0] = 1\n    elif 400 <= i <= 799:\n        color[1] = 1\n    elif 800 <= i <= 1199:\n        color[2] = 1\n    elif 1200 <= i <= 1599:\n        color[3] = 1\n    elif 1600 <= i <= 1999:\n        color[4] = 1\n    elif 2000 <= i <= 2399:\n        color[5] = 1\n    elif 2400 <= i <= 2799:\n        color[6] = 1\n    elif 2800 <= i <= 3199:\n        color[7] = 1\n    else:\n        over += 1\n\nmini = color.count(1)\nmaxi = color.count(1)\n\nif over >= 1:\n    if mini == 0:\n        mini = 1\n\n    maxi += over\n\nprint(mini, maxi)\n"}
{"label": 64, "index": 8229, "code": "if __name__ == '__main__':\n    N = int(input())\n    a = list(map(int, input().split()))\n\n    # 0:gray 1:brown 2:green ...... 7:red\n    colors_count = [0 for i in range(8)]\n    super_count = 0\n    for score in a:\n        if int(score / 400) == 0:\n            colors_count[0] += 1\n        elif int(score / 400) == 1:\n            colors_count[1] += 1\n        elif int(score / 400) == 2:\n            colors_count[2] += 1\n        elif int(score / 400) == 3:\n            colors_count[3] += 1\n        elif int(score / 400) == 4:\n            colors_count[4] += 1\n        elif int(score / 400) == 5:\n            colors_count[5] += 1\n        elif int(score / 400) == 6:\n            colors_count[6] += 1\n        elif int(score / 400) == 7:\n            colors_count[7] += 1\n        else:\n            super_count += 1\n\n    # print(colors_count)\n\n    # colors_count \u30670\u3067\u306f\u306a\u3044\u3068\u3053\u306e\u6570\n    not_zero_count = 0\n    for num in colors_count:\n        if num != 0:\n            not_zero_count += 1\n\n    if not_zero_count == 0:\n        ans_min = 1\n        # ans_max = super_count if super_count <= 8 else 8\n        ans_max = super_count\n    else:\n        ans_min = not_zero_count\n        # ans_max = not_zero_count + super_count if (not_zero_count + super_count) <= 8 else 8\n        ans_max = not_zero_count + super_count\n\n    print(str(ans_min) + ' ' + str(ans_max))\n"}
{"label": 64, "index": 8230, "code": "n=int(input())\na=list(map(int,input().split()))\nchoice=0\ncolour={}\nfor elements in a:\n\tif elements>=1 and elements<=399:colour[1]=1\n\telif elements>=400 and elements<=799:colour[2]=2\n\telif elements>=800 and elements<=1199:colour[3]=3\n\telif elements>=1200 and elements<=1599:colour[4]=4\n\telif elements>=1600 and elements<=1999:colour[5]=5\n\telif elements>=2000 and elements<=2399:colour[6]=6\n\telif elements>=2400 and elements<=2799:colour[7]=7\n\telif elements>=2800 and elements<=3199:colour[8]=8\n\telse:choice+=1\n\nm=len(colour)\nif m==0 and choice!=0:m=1\nprint(m,len(colour)+choice)\n"}
{"label": 64, "index": 8231, "code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nfor color in range(memTime):\n    member = memLate[color]\n    if member // 400 >= 8:\n        highLate += 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0:\n    minColor = 1\nprint(str(minColor) + \" \" + str(maxColor))"}
{"label": 64, "index": 8232, "code": "n = input()\na = list(map(int, input().split()))\n\nc = [0] * 8\nmax = 0\nfor i in a:\n    if i >= 3200:\n        max += 1\n    else:\n        c[i // 400] = 1\n\nmin = 0\nfor i in range(8):\n    if c[i] != 0:\n        min += 1\n\nmax += min\nif min == 0:\n    print(1, max)\nelse:\n    print(min, max)"}
{"label": 64, "index": 8233, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nfrom collections import deque\n\nn = int(sys.stdin.readline())\nai = list(map(int, sys.stdin.readline().split()))\n\no = [0] * 9\n\nfor a in ai:\n\tif a < 400:\n\t\to[0] += 1\n\telif a < 800:\n\t\to[1] += 1\n\telif a < 1200:\n\t\to[2] += 1\n\telif a < 1600:\n\t\to[3] += 1\n\telif a < 2000:\n\t\to[4] += 1\n\telif a < 2400:\n\t\to[5] += 1\n\telif a < 2800:\n\t\to[6] += 1\n\telif a < 3200:\n\t\to[7] += 1\n\telse:\n\t\to[8] += 1\n\non = 0\nfor i in range(0, 8):\n\tif o[i] > 0:\n\t\ton += 1\n\nmin = on\nif min == 0:\n\tmin = 1\n\non += o[8]\n\nmax = on\n\nprint(str(min) + ' ' + str(max))\n"}
{"label": 64, "index": 8234, "code": "def get_color(rating):\n    return rating / 400\n\nN = input()\na = map(int, raw_input().split())\ncolors = [get_color(a[i]) for i in range(N)]\n\nS, cnt = set(), 0\nfor c in colors:\n    if c < 8:\n        S.add(c)\n    else:\n        cnt += 1\nprint max(len(S), 1), (len(S) + cnt)"}
{"label": 64, "index": 8235, "code": "N=int(input())\nnums=input().split()\nr1=0\nr2=0\nr3=0\nr4=0\nr5=0\nr6=0\nr7=0\nr8=0\nr9=0\nfor n in range(0,N):\n    if 1<=int(nums[n])<=399:\n        r1=1\n    if 400<=int(nums[n])<=799:\n        r2=1\n    if 800<=int(nums[n])<=1199:\n        r3=1\n    if 1200<=int(nums[n])<=1599:\n        r4=1\n    if 1600<=int(nums[n])<=1999:\n        r5=1\n    if 2000<=int(nums[n])<=2399:\n        r6=1\n    if 2400<=int(nums[n])<=2799:\n        r7=1\n    if 2800<=int(nums[n])<=3199:\n        r8=1\n    if 3200<=int(nums[n]):\n        r9=r9+1\n\nif r1==r2==r3==r4==r5==r6==r7==r8==0 :\n    if 1<=r9<=8:\n        p1=r9\n        p2=1\n    else:\n        p1=8\n        p2=1\nelse:\n    p1=r1+r2+r3+r4+r5+r6+r7+r8+r9\n    p2=r1+r2+r3+r4+r5+r6+r7+r8\n\nprint(p2,p1)"}
{"label": 64, "index": 8236, "code": "N=int(raw_input())\na=map(int,raw_input().split())\nc=[0,0,0,0,0,0,0,0]\nm=0\nfor i in range(N):\n    b =a[i]/ 400\n    if b < 8:\n        c[b]+=1\n    else:\n        m+=1\n\n\nans=0\nfor i in c:\n    if i > 0:\n        ans+=1\n\nmi=ans\nif mi==0:\n    mi=1\nma=ans+m\nprint mi,ma"}
{"label": 64, "index": 8237, "code": "# -*- coding: utf-8 -*-\n#\u30ec\u30fc\u30c8 1-399\uff1a\u7070\u8272 :gray\n#\u30ec\u30fc\u30c8 400-799\uff1a\u8336\u8272 :brown\n#\u30ec\u30fc\u30c8 800-1199\uff1a\u7dd1\u8272 : green\n#\u30ec\u30fc\u30c8 1200-1599\uff1a\u6c34\u8272 :skyblue\n#\u30ec\u30fc\u30c8 1600-1999\uff1a\u9752\u8272 :blue\n#\u30ec\u30fc\u30c8 2000-2399\uff1a\u9ec4\u8272 :yellow\n#\u30ec\u30fc\u30c8 2400-2799\uff1a\u6a59\u8272 :orange\n#\u30ec\u30fc\u30c8 2800-3199\uff1a\u8d64\u8272 :red\n\nx = int(input())\ny = input().split()\n\ngray = 0\nbrown = 0\ngreen = 0\nskyblue = 0\nblue = 0\nyellow = 0\norange = 0\nred = 0\nother = 0\n\nfor i in range(x):\n    z = int(y[i]) \n    if z < 400:\n       gray = 1 \n    elif z < 800:\n        brown = 1\n    elif z < 1200:\n        green = 1\n    elif z < 1600:\n        skyblue = 1\n    elif z < 2000:\n        blue = 1\n    elif z < 2400:\n        yellow = 1\n    elif z < 2800:\n        orange = 1\n    elif z < 3200:\n        red = 1\n    else:\n        other = other + 1\n\nif other >= 1:\n    ans_max = gray + brown + green + skyblue + blue + yellow + orange + red + other\n    ans_min = gray + brown + green + skyblue + blue + yellow + orange + red + 0\n    \n    if ans_min == 0:\n        ans_min = 1\n    \n    print(str(ans_min) + \" \" + str(ans_max))\n\nelse:\n    ans = gray + brown + green + skyblue + blue + yellow + orange + red + other\n    \n    print(str(ans) + \" \" + str(ans))\n    \n"}
{"label": 64, "index": 8238, "code": "# -*- coding:utf-8 -*-\nN = int(input())\na = list(map(int, input().split()))\nrate = [ 0 for tmp in range(9) ]\nfactor = 0\nempty = 0\nfor tmp in range(N):\n    if 1 <= a[tmp] and  a[tmp] <= 399:\n        rate[0] += 1\n    elif 400 <= a[tmp] and a[tmp] <= 799:\n        rate[1] += 1\n    elif 800 <= a[tmp] and a[tmp] <= 1199:\n        rate[2] += 1\n    elif 1200 <= a[tmp] and a[tmp] <= 1599:\n        rate[3] += 1\n    elif 1600 <= a[tmp] and a[tmp] <= 1999:\n        rate[4] += 1\n    elif 2000 <= a[tmp] and a[tmp]<= 2399:\n        rate[5] += 1\n    elif 2400 <= a[tmp] and a[tmp] <= 2799:\n        rate[6] += 1\n    elif 2800 <= a[tmp] and a[tmp] <= 3199:\n        rate[7] += 1\n    else:\n        rate[8] += 1\nfor tmp in range(len(rate)-1):\n    if rate[tmp] > 0:\n        factor += 1\n    else:\n        empty += 1\nif rate[8] > 0:\n    if factor == 0:\n        print(\"1 \"+str(rate[8]))\n    else:\n        print(str(factor)+' '+str(factor+rate[8]))\nelse:\n    print(str(factor)+' '+str(factor)) "}
{"label": 64, "index": 8239, "code": "def c():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(lambda i: min(8, i//400), a))\n    over_rate = l.count(8)\n    res = set(l)\n    if 8 in res: res.remove(8)\n\n    mi = max(1, len(res))\n    ma = len(res) + over_rate\n    print(mi, ma)\n\nc()"}
{"label": 64, "index": 8240, "code": "import math\n\nranks = [False for i in range(8)]\nhighs = 0\nn = int(input())\ninps = [int(i) for i in input().split()]\nhighs = len([i for i in inps if i > 3199])\ninps = [i for i in inps if i <= 3199]\nfor i in inps:\n    if i >= 1 and i <= 399:\n        ranks[0] = True\n    elif i >= 400 and i <= 799:\n        ranks[1] = True\n    elif i >= 800 and i <= 1199:\n        ranks[2] = True\n    elif i >= 1200 and i <= 1599:\n        ranks[3] = True\n    elif i >= 1600 and i <= 1999:\n        ranks[4] = True\n    elif i >= 2000 and i <= 2399:\n        ranks[5] = True\n    elif i >= 2400 and i <= 2799:\n        ranks[6] = True\n    elif i >= 2800 and i <= 3199:\n        ranks[7] = True\nlows = len([i for i in ranks if i == True])\n\nminimum = max(lows, 1)\nmaximum = lows + highs\n\nprint(minimum, maximum)\n"}
{"label": 64, "index": 8241, "code": "N = int(raw_input())\nA = map(int, raw_input().split())\n\nX = [0 for _ in range(13)]\nfor a in A:\n    X[a / 400] += 1\ncnt = 0\nfor x in X[:8]:\n    if x != 0:\n        cnt += 1\ncnt2 = sum(X[8:])\n\nprint max(1, cnt), cnt + cnt2\n"}
{"label": 64, "index": 8242, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    a_list = list(map(int, input().split()))\n    color_set = set()\n    free = 0\n    for a in a_list:\n        for i, (s, e) in enumerate([(1, 399), (400, 799), (800, 1199), (1200, 1599), (1600, 1999), (2000, 2399), (2400, 2799), (2800, 3199)]):\n            if s <= a <= e:\n                color_set.add(i)\n                break\n        else:\n            free += 1\n    print(max(1, len(color_set)), len(color_set) + free)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 64, "index": 8243, "code": "\n    #\u30ec\u30fc\u30c8 1-399\uff1a\u7070\u8272\n    #\u30ec\u30fc\u30c8 400-799\uff1a\u8336\u8272\n    #\u30ec\u30fc\u30c8 800-1199\uff1a\u7dd1\u8272\n    #\u30ec\u30fc\u30c8 1200-1599\uff1a\u6c34\u8272\n    #\u30ec\u30fc\u30c8 1600-1999\uff1a\u9752\u8272\n    #\u30ec\u30fc\u30c8 2000-2399\uff1a\u9ec4\u8272\n    #\u30ec\u30fc\u30c8 2400-2799\uff1a\u6a59\u8272\n    #\u30ec\u30fc\u30c8 2800-3199\uff1a\u8d64\u8272\n\nfrom collections import Counter\nn = input()\nc = Counter([min(int(i) // 400, 8) for i in input().split()])\nans = 0\nfor i in range(8):\n    ans += (1 if c[i] > 0 else 0)\nprint(max(ans, 1), ans + c[8])"}
{"label": 64, "index": 8244, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport array\nfrom bisect import *\nfrom collections import *\nimport fractions\nimport heapq \nfrom itertools import *\nimport math\nimport re\nimport string\n\n_ = input()\nAs = list(map(int, input().split()))\nbins = [0] * 9\ntable = [400, 800, 1200, 1600, 2000, 2400, 2800, 3200, 10000]\nfor a in As:\n    for i, t in enumerate(table):\n        if a < t:\n            bins[i] += 1\n            break\nmn = sum(1 for x in bins[:-1] if x > 0)\nif mn == 0:\n    mn = 1\n    mx = bins[-1]\nelse:\n    mx = mn + bins[-1]\nprint(mn, mx)\n"}
{"label": 64, "index": 8245, "code": "N = input()\na = []\na.append(map(int, raw_input().split()))\n\na=a[0]\n\nc=[0,0,0,0,0,0,0,0]\n\nfree=0\n\nfor i in a:\n    if 1<=i and i<=399:\n        c[0]=1\n    elif 400<=i and i<=799:\n        c[1]=1\n    elif 800<=i and i<=1199:\n        c[2]=1\n    elif 1200<=i and i<=1599:\n        c[3]=1\n    elif 1600<=i and i<=1999:\n        c[4]=1\n    elif 2000<=i and i<=2399:\n        c[5]=1\n    elif 2400<=i and i<=2799:\n        c[6]=1\n    elif 2800<=i and i<=3199:\n        c[7]=1\n    elif 3200<=i:\n        free+=1\n\nma=sum(c)+free\n\n\n\nmi=sum(c)\nif mi<1:\n    mi=1\n\n\nprint(str(mi) + \" \" + str(ma))"}
{"label": 64, "index": 8246, "code": "import numpy as np\n\nn = int(input())\na_str = input().split()\na_num = [int(a) for a in a_str]\na_array = np.array(a_num)\n\nrate_list = [1,400,800,1200,1600,2000,2400,2800,3200]\n\ncount = 0\n\nfor i in range(8):\n    if len(a_array[np.where((a_array>=rate_list[i])&(a_array<rate_list[i+1]))]):\n        count += 1\n\nif count == 0:\n    min_count = 1\nelse:\n    min_count = count\n\ncount += len(a_array[a_array>=rate_list[8]])\nmax_count = count\n\nprint(str(min_count)+\" \"+str(max_count))"}
{"label": 64, "index": 8247, "code": "import random\nN = int(input())\na = set(n//400+1 if n < 3200 else random.random() for n in (map(int, input().split())),)\nmin_c = len([1 for n in a if n >= 1]) or 1\nmax_c = len(a)\nprint(min_c, max_c)"}
{"label": 64, "index": 8248, "code": "N=int(raw_input())\na=map(int,raw_input().split(' '))\n\ncolor=[0]*8\nfree=0\n\nfor ai in a:\n    if ai<400:\n        color[0]+=1\n    elif ai<800:\n        color[1]+=1\n    elif ai<1200:\n        color[2]+=1\n    elif ai<1600:\n        color[3]+=1\n    elif ai<2000:\n        color[4]+=1\n    elif ai<2400:\n        color[5]+=1\n    elif ai<2800:\n        color[6]+=1\n    elif ai<3200:\n        color[7]+=1\n    else:\n        free+=1\n\nc=len(color)-color.count(0)\n\nm=c+free\n\nif c==0:\n    c=1\n\nprint c,m\n"}
{"label": 64, "index": 8249, "code": "N = int(input())\nA = list(map(int,input().split()))\n\nsep = 400\nflag = [False]*8\nc = 0\nfor a in A:\n    s = a//sep\n    if s >= 8:\n        c += 1\n    else:\n        flag[s] = True\n\nmin = flag.count(True)\nmax = min + c\nif min == 0:\n    min = 1\nprint(\"{0} {1}\".format(min,max))\n\n"}
{"label": 64, "index": 8250, "code": "N=input()\nnlist= [int(l) for l in raw_input().split(' ')]\n\nrate= [0,0,0,0,0,0,0,0]\nup = 0\nfor n in nlist:\n\tif n/400>=8:\n\t\tup += 1\n\telse:\n\t\trate[n/400]=1\n\nprint max(1,sum(rate)),sum(rate)+up"}
{"label": 64, "index": 8251, "code": "n = int(input())\na = list(map(int, input().split()))\na.sort()\ncnt = [0 for i in range(100)]\nfor i in range(n):\n    cnt[a[i]//400] += 1\nmi = max(1, sum([1 if cnt[i]>0 else 0 for i in range(8)]))\nma = sum([1 if cnt[i]>0 else 0 for i in range(8)]) + sum(cnt[8:])\nprint(mi, ma)\n"}
{"label": 64, "index": 8252, "code": "N = int(input())\na = list(map(int, input().split()))\ngray = 0\nbrown = 0\ngreen = 0\nsky = 0\nblue = 0\nyellow = 0\norange = 0\nred = 0\ngod = 0\nfor i in range(N):\n    if a[i] < 400:\n        gray = 1\n    elif a[i] < 800:\n        brown = 1\n    elif a[i] < 1200:\n        green = 1\n    elif a[i] < 1600:\n        sky = 1\n    elif a[i] < 2000:\n        blue = 1\n    elif a[i] < 2400:\n        yellow = 1\n    elif a[i] < 2800:\n        orange = 1\n    elif a[i] < 3200:\n        red = 1\n    else:\n        god+=1\nzako = gray + brown + green + sky + blue + yellow + orange + red\nif god > 0 and zako == 0:\n    color_max = god\n    color_min = 1\nelif god > 0 and zako != 0:\n    color_max = zako + god\n    color_min = zako\nelse:\n    color_max = zako\n    color_min = zako\nprint(color_min, color_max)"}
{"label": 64, "index": 8253, "code": "N = int(input())\nA = [int(_) for _ in input().split()]\n\n\ndef color(n):\n    if 1 <= n <= 399:\n        return 0\n    elif 400 <= n <= 799:\n        return 1\n    elif 800 <= n <= 1199:\n        return 2\n    elif 1200 <= n <= 1599:\n        return 3\n    elif 1600 <= n <= 1999:\n        return 4\n    elif 2000 <= n <= 2399:\n        return 5\n    elif 2400 <= n <= 2799:\n        return 6\n    elif 2800 <= n <= 3199:\n        return 7\n    else:\n        return 8\n\n\nx = [color(a) for a in A]\ndora = x.count(8)\nunique = len(set(x)) if dora == 0 else len(set(x)) - 1\nmin_ = max(1, unique)\nmax_ = unique + dora\nprint(min_, max_)\n"}
{"label": 64, "index": 8254, "code": "import numpy as np\nN = int(input())\na = [int(_) for _ in input().split()]\na = np.array(a)\na = np.sort(a)\nmin = 0\nmax = 100\n\nfor i in range(8):\n    set_1 = set(np.where(i*400<=a)[0])\n    set_2 = set(np.where(a<(i+1)*400)[0])\n    match = list(set_1 & set_2)\n    if len(match)>0:\n        min+=1\nif min==0:\n    min=1\n    max = N\nelse:\n    if len(np.where(a>=3200)[0])==0:\n        max = min\n    else:\n        max = min + len(np.where(a>=3200)[0])\nprint (min, max)"}
{"label": 64, "index": 8255, "code": "\nN = int(input())\na = [int(e) for e in input().split()]\n\ndef colors(score):\n    if score < 400:\n        return 1\n    elif score < 800:\n        return 2\n    elif score < 1200:\n        return 3\n    elif score < 1600:\n        return 4\n    elif score < 2000:\n        return 5\n    elif score < 2400:\n        return 6\n    elif score < 2800:\n        return 7\n    elif score < 3200:\n        return 8\n    elif score >= 3200:\n        return 0\n\nary = [colors(s) for s in a]\nary_n = set(ary)\n\nif not 0 in ary_n:\n    n_min = len(ary_n)\n    n_max = len(ary_n)\nelse:\n    n_zero = sum([e == 0 for e in ary])\n    n_min = len(ary_n) - 1 if len(ary_n) > 1 else 1\n    n_max = len(ary_n) + n_zero - 1\n\nprint(n_min, n_max)\n"}
{"label": 64, "index": 8256, "code": "N = input()\na = map(int, raw_input().split())\n\nkinds = [0 for i in range(8)]\nwild = 0\nfor v in a:\n    if v < 400: kinds[0]= 1\n    elif v < 800: kinds[1]= 1\n    elif v < 1200: kinds[2]= 1\n    elif v < 1600: kinds[3]= 1\n    elif v < 2000: kinds[4]= 1\n    elif v < 2400: kinds[5]= 1\n    elif v < 2800: kinds[6]= 1\n    elif v < 3200: kinds[7]= 1\n    else:\n        wild += 1\n\nmn = sum(kinds)\nif mn == 0:\n    mn = 1\n    mx = wild\nelse:\n    mx = mn + wild\nprint mn,mx"}
{"label": 64, "index": 8257, "code": "N = input()\na = map(int, raw_input().split())\n\nmemo = [0 for i in range(9)]\nfor i in a:\n\tif(i < 3200):\n\t\tmemo[i / 400] = memo[i / 400] + 1\n\telse:\n\t\tmemo[8] = memo[8] + 1;\n\ncnt = 0\nfor i in range(8):\n\tif memo[i] > 0:\n\t\tcnt = cnt + 1;\nfree = memo[8]\n\nif cnt == 0:\n\tprint 1, memo[8]\nelse:\n\tprint cnt, memo[8] + cnt"}
{"label": 64, "index": 8258, "code": "N = int(input())\na = list(map(int,input().split()))\na.sort()\nb  = [[],[],[],[],[],[],[],[],[]]\ndef clsearch():\n    while(len(a)):\n        apop = a.pop(0)\n        if(apop<400):\n            b[0].append(apop)\n        elif(apop<800):\n            b[1].append(apop)\n        elif(apop<1200):\n            b[2].append(apop)\n        elif(apop<1600):\n            b[3].append(apop)\n        elif(apop<2000):\n            b[4].append(apop)\n        elif(apop<2400):\n            b[5].append(apop)\n        elif(apop<2800):\n            b[6].append(apop)     \n        elif(apop<3200):\n            b[7].append(apop)\n        else:\n            b[8].append(apop)\n    return\nclsearch()\nsum = 0\nfor i in range(len(b)-1):\n    if(len(b[i])!=0):\n        sum += 1\nprint((sum if sum != 0 else 1),sum+len(b[8]))\n"}
{"label": 64, "index": 8259, "code": "n = int(input())\na = [int(x)//400 for x in input().split()]\n\nb = 0\nc = set()\nfor i in range(n):\n    if a[i] > 7:\n        b += 1\n    else:\n        c.add(a[i])\n\nprint(max(1, len(c)), len(c)+b)\n"}
{"label": 64, "index": 8260, "code": "def main():\n    N = int(input().strip())\n\n    n_399 = 0\n    n_799 = 0\n    n_1199 = 0\n    n_1599 = 0\n    n_1999 = 0\n    n_2399 = 0\n    n_2799 = 0\n    n_3199 = 0\n    n_free = 0\n    rates = list(map(int, input().strip().split()))\n    for r in rates:\n        if r <= 399:\n            n_399 = 1\n        elif r <= 799:\n            n_799 = 1\n        elif r <= 1199:\n            n_1199 = 1\n        elif r <= 1599:\n            n_1599 = 1\n        elif r <= 1999:\n            n_1999 = 1\n        elif r <= 2399:\n            n_2399 = 1\n        elif r <= 2799:\n            n_2799 = 1\n        elif r <= 3199:\n            n_3199 = 1\n        else:\n            n_free += 1\n\n    n_less_3200 = n_399 + n_799 + n_1199 + \\\n        n_1599 + n_1999 + n_2399 + n_2799 + n_3199\n    n_rest = N - n_less_3200\n\n    n_min = n_less_3200\n    if n_less_3200 == 0 and n_free > 0:\n        n_min = 1\n\n    n_max = n_less_3200 + n_free\n    if n_less_3200 + n_free >= N:\n        n_max = N\n\n    print(n_min, n_max)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 64, "index": 8261, "code": "n = input()\na = list(map(int, input().split()))\n\nc = [0, 0, 0, 0, 0, 0, 0, 0]\nmax = 0\nfor i in a:\n    if i <= 399:\n        c[0] += 1\n    elif i <= 799:\n        c[1] += 1\n    elif i <= 1199:\n        c[2] += 1\n    elif i <= 1599:\n        c[3] += 1\n    elif i <= 1999:\n        c[4] += 1\n    elif i <= 2399:\n        c[5] += 1\n    elif i <= 2799:\n        c[6] += 1\n    elif i <= 3199:\n        c[7] += 1\n    else:\n        max += 1\n\nmin = 0\nfor i in range(8):\n    if c[i] != 0:\n        min += 1\n\nmax += min\nif min == 0:\n    print(1, max)\nelse:\n    print(min, max)"}
{"label": 64, "index": 8262, "code": "# -* encode: utf-8 *-\n\nN = int(input())\nrates = [int(x) for x in input().split()]\n\nrates.sort()\nuppers = [399, 799, 1199, 1599, 1999, 2399, 2799, 3199, 4800]\naccum = list()\ncounts = list()\n\nfor upper in uppers:\n    accum.append(len([x for x in rates if x <= upper]))\n\ncounts.append(accum[0])\nfor i in range(1, 9):\n    counts.append(accum[i] - accum[i-1])\n\n_least = sum([1 for count in counts[:-1] if count > 0])\nmax_scorerer = counts[-1]\n\nif _least == 0:\n    least = 1\n    most = max_scorerer\nelse:\n    least = _least\n    most = least + max_scorerer\n\nprint(\"{} {}\".format(least, most))"}
{"label": 64, "index": 8263, "code": "N = int(raw_input())\na = map(int, raw_input().split())\na.sort()\n\nrank = [False] * 8\n\ncount = 0\nfor i in range(N):\n  if 3200 <= a[i]:\n    count += 1\n  else:\n    rank[int(a[i]/400)] = True\n\nminimum = rank.count(True)\nmaximum = minimum + count\nif minimum == 0:\n  minimum = 1\nprint minimum, maximum"}
{"label": 64, "index": 8264, "code": "#coding: utf-8\nN = int(raw_input())\nrates = map(int, raw_input().split(' '))\n\ncolors = [0 for _ in range(8)]\ntop = 0\nfor r in rates:\n\tmod = r / 400\n\tif mod < 8:\n\t\tcolors[mod] = 1\n\telse:\n\t\ttop += 1\t\n\nminnum = sum(colors)\nmaxnum = minnum + top\nif minnum == 0:\n\tminnum = 1\nprint '{} {}'.format(minnum, maxnum)"}
{"label": 64, "index": 8265, "code": "N = input()\na = input().split()\nscores = [0,0,0,0,0,0,0,0]\nscore8 = 0\nfor i in a:\n    check = int(int(i) / 400)\n    if check > 7:\n        score8 += 1\n    else:\n        scores[check] = 1\nscore1to7 = sum(scores)\nsaidai = score1to7 + score8\nif score1to7 < 1:\n    saisho = 1\nelse:\n    saisho = score1to7\nprint(str(saisho) + \" \" + str(saidai))"}
{"label": 64, "index": 8266, "code": "n = int(input())\naa = [min(8, int(a) // 400) for a in input().split()]\nover3200 = aa.count(8)\ncolors = len(set(aa))\n_min = colors - 1 if over3200 and n > over3200 else colors\n_max = colors + over3200 - 1 if over3200 else colors\nprint(_min, _max)\n"}
{"label": 64, "index": 8267, "code": "n = int(input())\na = list(map(int, input().split()))\nst = [0] * 10\nextra = 0\nfor x in a:\n    if x >= 3200:\n        extra += 1\n        continue\n    for i in range(0, 2801, 400):\n        if i <= x <= i + 399:\n            st[i // 400] = 1\n            break\nans = sum(st)\nprint(max(ans, 1), ans + extra)\n"}
{"label": 64, "index": 8268, "code": "import numpy as np\nN = int(input())\na = np.array(list(map(int, input().split())))\n\nc = np.array([0] * 8)\n\na //= 400\n\nfor i in range(8):\n    num = np.sum(a == i)\n    c[i] = num\nred = np.sum(a >= 8)\n\n\nmincol = np.sum(c != 0)\nmaxcol = mincol + red\nif mincol == 0:\n    mincol = 1\n\nprint(mincol, maxcol)\n\n\n\n    \n"}
{"label": 64, "index": 8269, "code": "n = input()\na = map(int, raw_input().split())\ncolor = [0 for _ in range(9)]\nfor item in a:\n    i = item / 400\n    i = min(i, 8)\n    color[i] += 1\n\nans = 0\nfor num in color[0:8]:\n    if num != 0:\n        ans += 1\n\nmin_ans = max(ans, 1)\nmax_ans = ans + color[8]\n#max_ans = min(max_ans, 8)\n\nprint min_ans, max_ans\n"}
{"label": 64, "index": 8270, "code": "from sys import stdin\nn = int(stdin.readline())\na  = map(int,stdin.readline().split())\nans = set()\nco = 0\nfor i in a:\n if i < 3200:\n  ans.add(i/400)\n else:\n  co += 1\nprint  max(1,len(ans)),len(ans) + co"}
{"label": 64, "index": 8271, "code": "n = int(input())\na_list = [int(i) for i in input().split()]\n\ncolor_list = [0, 0, 0, 0, 0, 0, 0, 0]\nover_3200 = 0\n\nfor a in a_list:\n    tmp = a // 400\n    if tmp < 8:\n        color_list[tmp] += 1\n    else:\n        over_3200 += 1\n\nnum_colors = 0\nfor c in color_list:\n    if c > 0:\n        num_colors += 1\n\nmin_num = max(1, num_colors)\nmax_num = num_colors + over_3200\nprint(\"{0} {1}\".format(min_num, max_num))"}
{"label": 64, "index": 8272, "code": "N = int(input())\nA = list(map(int, input().split()))\nd = {}\n\nfor a in A:\n    m = a // 400\n    if m >= 8:\n        m = 8\n    d[m] = d.get(m, 0) + 1\n\nminans = 0\nfor i in range(8):\n    if i in d:\n        minans += 1\nif minans == 0:\n    print(\"{} {}\".format(1, N))\n    exit()\nmaxans = minans + d.get(8, 0)\nprint(\"{} {}\".format(minans, maxans))\n"}
{"label": 64, "index": 8273, "code": "N = int(input())\nA = [int(i) for i in input().split()]\n\nflg = [0,0,0,0,0,0,0,0,0]\nfor i in range(N):\n    if   A[i] <  400: flg[0] = 1\n    elif A[i] <  800: flg[1] = 1\n    elif A[i] < 1200: flg[2] = 1\n    elif A[i] < 1600: flg[3] = 1\n    elif A[i] < 2000: flg[4] = 1\n    elif A[i] < 2400: flg[5] = 1\n    elif A[i] < 2800: flg[6] = 1\n    elif A[i] < 3200: flg[7] = 1\n    else:             flg[8] += 1\n\ncolmin = max(sum(flg[0:8]), 1)\ncolmax = sum(flg)\nprint(colmin, colmax)\n"}
{"label": 64, "index": 8274, "code": "#! /usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\ns = set()\nfor i in a:\n    if 1 <= i <= 399 : s.add(1)\n    if 400 <= i <= 799 : s.add(2)\n    if 800 <= i <= 1199 : s.add(3)\n    if 1200 <= i <= 1599 : s.add(4)\n    if 1600 <= i <= 1999 : s.add(5)\n    if 2000 <= i <= 2399 : s.add(6)\n    if 2400 <= i <= 2799 : s.add(7)\n    if 2800 <= i : s.add(8)\nr = len([1 for x in a if 2800 <= x <= 3199]) < 1\nprint(len(s), len(s) + max((len([1 for x in a if x > 3199]) - r, 0)))"}
{"label": 64, "index": 8275, "code": "N=int(input())\na=[int(i) for i in input().split()]\nb,c,d,e,f,g,h,j,k=0,0,0,0,0,0,0,0,0\nfor i in range(N):\n if (a[i]<400):\n  b=1\n elif (400<=a[i]<800):\n  c=1\n elif (800<=a[i]<1200):\n  d=1\n elif (1200<=a[i]<1600):\n  e=1\n elif (1600<=a[i]<2000):\n  f=1\n elif (2000<=a[i]<2400):\n  g=1\n elif (2400<=a[i]<2800):\n  h=1\n elif (2800<=a[i]<3200):\n  j=1\n else:\n  k += 1\nmin=b+c+d+e+f+g+h+j\nmax=min+k\nif min==0:\n min=1\nprint (min,max)"}
{"label": 64, "index": 8276, "code": "def get_color_index(rate):\n    if 1 <= rate and rate <= 399:\n        return 0\n    elif 400 <= rate and rate <= 799:\n        return 1\n    elif 800 <= rate and rate <= 1199:\n        return 2\n    elif 1200 <= rate and rate <= 1599:\n        return 3\n    elif 1600 <= rate and rate <= 1999:\n        return 4\n    elif 2000 <= rate and rate <= 2399:\n        return 5\n    elif 2400 <= rate and rate <= 2799:\n        return 6\n    elif 2800 <= rate and rate <= 3199:\n        return 7\n    else:\n        return -1\n\nN = int(input())\na = list(map(int, input().split()))\n\ncolors = []\nwildcard_count = 0\n\nfor i in range(N):\n    c = get_color_index(a[i])\n    if c == -1:\n        wildcard_count += 1\n    elif c not in colors:\n        colors.append(c)\n\nc_min = max(len(colors), 1)\nc_max = len(colors) + wildcard_count\n\nprint(str(c_min) + ' ' + str(c_max))"}
{"label": 64, "index": 8277, "code": "n = int(input())\na = [ int(i) for i in input().split() ]\nc = [ 0 for _ in range(8)]\ncou = 0\n\nfor i in range(n):\n    keep=a[i]\n\n    if 1<= keep <=399:\n        c[0]=1\n    elif 400<= keep <=799:\n        c[1]=1\n    elif 800<= keep <=1199:\n        c[2]=1\n    elif 1200<= keep <=1599:\n        c[3]=1\n    elif 1600<= keep <=1999:\n        c[4]=1\n    elif 2000<= keep <=2399:\n        c[5]=1\n    elif 2400<= keep <=2799:\n        c[6]=1\n    elif 2800<= keep <=3199:\n        c[7]=1\n    else:\n        cou += 1\n\nMAX = MIN = c.count(1)\nMAX += cou\nMIN = max(MIN,1)\n\n\nprint(MIN,MAX)"}
{"label": 64, "index": 8278, "code": "# -*- coding:utf-8 -*-\n\nN = int(input())\na = input().split()\n\ngray = 0\nbrown = 0\ngreen = 0\nsky = 0\nblue = 0\nyellow = 0\norange = 0\nred = 0\nother = 0\nfor i in range(N):\n\ta[i] = int(a[i])\n\n\tif 1 <= a[i] and a[i] <= 399:\n\t\tgray = 1\n\telif 400 <= a[i] and a[i] <= 799:\n\t\tbrown = 1\n\telif 800 <= a[i] and a[i] <= 1199:\n\t\tgreen = 1\n\telif 1200 <= a[i] and a[i] <= 1599:\n\t\tsky = 1\n\telif 1600 <= a[i] and a[i] <= 1999:\n\t\tblue = 1\n\telif 2000 <= a[i] and a[i] <= 2399:\n\t\tyellow = 1\n\telif 2400 <= a[i] and a[i] <= 2799:\n\t\torange = 1\n\telif 2800 <= a[i] and a[i] <= 3199:\n\t\tred = 1\n\telif 3200 <= a[i]:\n\t\tother = other + 1\n\nsum = gray + brown + green + sky + blue + yellow + orange + red\n\nif sum > 1:\n\tmin = sum\nelse:\n\tmin = 1\n\nmax = sum + other\n\nprint(str(min) + \" \" + str(max))\n\t\t"}
{"label": 64, "index": 8279, "code": "N = int(input())\na = [int(i) for i in input().split()]\nhai,cha,mid,miz,ao,ki,dai,aka,zen = 0,0,0,0,0,0,0,0,0\nfor i in range(N):\n    if a[i] < 400:\n        hai = 1\n    elif a[i] < 800:\n        cha = 1\n    elif a[i] < 1200:\n        mid = 1\n    elif a[i] < 1600:\n        miz = 1\n    elif a[i] < 2000:\n        ao = 1\n    elif a[i] < 2400:\n        ki = 1\n    elif a[i] < 2800:\n        dai = 1\n    elif a[i] < 3200:\n        aka = 1\n    else:\n        zen += 1\nMin = hai+cha+mid+miz+ao+ki+dai+aka\nMax = Min+zen\nif Min == 0:\n    Min = 1\nprint(Min,Max)\n"}
{"label": 64, "index": 8280, "code": "N = int(input())\na = list(map(int,input().split()))\nR = [0]*9\nfor r in a:\n  rr = r//400\n  if rr < 8:\n    R[rr] = 1\n  else:\n    R[8] += 1\ns2 = sum(R)\ns1 = max(1,s2-R[8])\nprint(s1,s2)"}
{"label": 64, "index": 8281, "code": "N = int(input())\na = list(map(int, input().split()))\nmi = 0\nma = 0\nborder = [1, 400, 800, 1200, 1600, 2000, 2400, 2800, 3200, 4801]\nnum = [0 for i in range(9)]\nfor i in a:\n    for j in range(len(border[0:-1])):\n        if(border[j] <= i and i < border[j+1]):\n            num[j] += 1\n\nfor i in num[0:-1]:\n    if(i > 0):\n        mi += 1\n        ma += 1\n\nmi = max(1, mi)\nma = ma+num[-1]\nprint(mi, ma)\n"}
{"label": 64, "index": 8282, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc064.contest.atcoder.jp/tasks/abc064_c\n\n\"\"\"\nimport sys\nfrom sys import stdin\nfrom collections import defaultdict\ninput = stdin.readline\n\n\ndef get_color(s):\n    ans = 'any'\n    if s < 400:\n        ans = 'gray'\n    elif s < 800:\n        ans = 'brown'\n    elif s < 1200:\n        ans = 'green'\n    elif s < 1600:\n        ans = 'light blue'\n    elif s < 2000:\n        ans = 'blue'\n    elif s < 2400:\n        ans = 'yellow'\n    elif s < 2800:\n        ans = 'orange'\n    elif s < 3200:\n        ans = 'red'\n    return ans\n\n\ndef main(args):\n    N = int(input())\n    scores = [int(x) for x in input().split()]\n\n    colors = defaultdict(int)\n    for s in scores:\n        res = get_color(s)\n        colors[res] += 1\n\n    normal_color = 0\n    for k, v in colors.items():\n        if k != 'any':\n            normal_color += 1\n    any_color = colors['any']\n\n    print(max(1, normal_color), normal_color + any_color)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 64, "index": 8283, "code": "n = int(input())\na = [int(i) for i in input().split()]\ncol = [0 for i in range(n)]\ncnt = 0\nfor i in range(n):\n    if 1 <= a[i] <=399:\n        col[i] = \"b\"\n    elif 400<= a[i]<=799:\n        col[i] = \"c\"\n    elif 800<= a[i]<=1199:\n        col[i] = \"d\"\n    elif 1200<= a[i]<=1599:\n        col[i] = \"e\"\n    elif 1600<= a[i]<=1999:\n        col[i] = \"f\"\n    elif 2000<= a[i]<=2399:\n        col[i] = \"g\"\n    elif 2400<= a[i]<=2799:\n        col[i] = \"h\"\n    elif 2800<= a[i]<=3199:\n        col[i] = \"j\"\n    else:\n        col[i] = \"k\"\n        cnt += 1\ncolv = list(set(col))\nmn =mx = len(colv)\nif \"k\" in colv:\n        mn -=1\n        mx += cnt-1\n        if mn == 0:\n            mn =1\n        \nprint(str(mn)+\" \"+str(mx))"}
{"label": 64, "index": 8284, "code": "N=int(input())\na_n=[]\na2_n=[]\na_n = input().split(\" \")\ncount = 0\n\nfor i in range(N):\n    if int(a_n[i])/400 < 8:\n         a2_n.append(int(a_n[i])//400)\n    else:\n        count += 1\n\nn_min = len(set(a2_n))\nn_max = n_min+count\n\nprint(max(1, n_min),n_max)"}
{"label": 64, "index": 8285, "code": "input()\na = map(int, raw_input().split())\nS = set()\nc = 0\nfor t in a:\n    if t>=3200:\n        c += 1\n    else:\n        S.add(t/400)\nprint max(1, len(S)), len(S)+c\n"}
{"label": 64, "index": 8286, "code": "import sys\n\n\nif __name__ == \"__main__\":\n    N = int(input())\n\n    rates = map(int, raw_input().split())\n    # rates = [map(int, raw_input().split()) for i in range(N)]\n\n    # tasks = np.array(tasks)\n    normal_colors = int(3200/400)\n    colors = [0] * normal_colors\n    aaa = 0\n    for rate in rates:\n        if rate >= 3200:\n            aaa +=1\n        else:\n            colors[rate/400] = 1\n\n    print max(sum(colors),1), sum(colors)+aaa"}
{"label": 64, "index": 8287, "code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\ncolor = []\nother = 0\nfor i in a:\n    if i < 400 * 1:\n        color.append('1')\n    elif i < 400 * 2:\n        color.append('2')\n    elif i < 400 * 3:\n        color.append('3')\n    elif i < 400 * 4:\n        color.append('4')\n    elif i < 400 * 5:\n        color.append('5')\n    elif i < 400 * 6:\n        color.append('6')\n    elif i < 400 * 7:\n        color.append('7')\n    elif i < 400 * 8:\n        color.append('8')\n    else:\n        other += 1\nmax_ans = len(set(color)) + other\nmin_ans = len(set(color))\nif min_ans == 0 and other != 0:\n    min_ans = 1\nprint(min_ans, max_ans)\n"}
{"label": 64, "index": 8288, "code": "inf=float('inf')\nN = int(input())\nx = list(map(int, input().split()))\na=[0]*8\nb=0\nfor i in range(0,N):\n    if x[i]>=3200:\n        b +=1\n        x[i]=inf\nfor j in range(0,8):\n    for i in range(0,N):\n        if x[i]<400:\n            a[j] +=1\n            x[i] = inf\n        x[i] -= 400\n \n \nmincolar=0\nfor i in a:\n    if i!=0:\n        mincolar +=1\nif mincolar!=0:\n    print(mincolar,mincolar+b)\nelse:\n    print(1,b)\nquit()\n"}
{"label": 64, "index": 8289, "code": "N = int(input())\na = map(int, input().split())\nrate_under = []\nrate_upper = []\nfor i in a:\n    x = i // 400\n    if(x >= 8):\n        rate_upper.append(x)\n    else:\n        rate_under.append(x)\nmin = len(set(rate_under))\nmax = min + len(rate_upper)\nif(min == 0):\n    min = 1\nprint(str(min) + \" \" + str(max))"}
{"label": 64, "index": 8290, "code": "n = input()\na = map(int, raw_input().split())\n\nb = [0, 0, 0, 0, 0, 0, 0, 0]\nc = 0\n\nfor i in a:\n\tif i < 3200:\n\t\tb[int(i / 400)] = 1\n\telse:\n\t\tc += 1\n\ns = sum(b)\nif s == 0:\n\ts = 1\n\nprint s, sum(b) + c"}
{"label": 64, "index": 8291, "code": "import numpy as np\nn=input()\nn=int(n)\na=input().split()\nb=np.zeros(n)\ndiv=0\nnum_8=0\nfor i in range(n):\n a[i]=int(a[i])\n if a[i]<=399 and a[i]>=1:\n  b[i]=0\n elif a[i]>=400 and a[i]<=799:\n  b[i]=1\n elif a[i]>=800 and a[i]<=1199:\n  b[i]=2\n elif a[i]>=1200 and a[i]<=1599:\n  b[i]=3\n elif a[i]>=1600 and a[i]<=1999:\n  b[i]=4\n elif a[i]>=2000 and a[i]<=2399:\n  b[i]=5\n elif a[i]>=2400 and a[i]<=2799:\n  b[i]=6\n elif a[i]>=2800 and a[i]<=3199:\n  b[i]=7\n else:\n  b[i]=8\n  num_8=num_8+1\nfor i in range(8):\n if i in b:\n  div=div+1\nmin=div\nmax=div+num_8\nif min==0:\n min=1\nprint(min,max)"}
{"label": 64, "index": 8292, "code": "b = {}\nb['gray'] = 0\nb['brown'] = 0\nb['green'] = 0\nb['cyan'] = 0\nb['blue'] = 0\nb['yellow'] = 0\nb['orange'] = 0\nb['red'] = 0\nb['other'] = 0\n\nn = int(input())\na = list(map(int,input().split()))\n\nfor ai in a:\n    if ai < 400:\n        b['gray'] += 1\n    elif ai < 800:\n        b['brown'] += 1\n    elif ai < 1200:\n        b['green'] += 1\n    elif ai < 1600:\n        b['cyan'] += 1\n    elif ai < 2000:\n        b['blue'] += 1\n    elif ai < 2400:\n        b['yellow'] += 1\n    elif ai < 2800:\n        b['orange'] += 1\n    elif ai < 3200:\n        b['red'] += 1\n    else:\n        b['other'] += 1\n\nans = 0\nfor k, v in b.items():\n    if k != 'other' and v > 0:\n        ans += 1\n\nif ans == 0:\n    print(1, b['other'])\nelse:\n    print(ans, ans + b['other'])\n"}
{"label": 64, "index": 8293, "code": "N = int(input())\na = list(map(int, input().split()))\n\nd = [0] * 9\nfor i in a:\n    if i <= 399:\n        d[0] = 1\n    elif i <= 799:\n        d[1] = 1\n    elif i <= 1199:\n        d[2] = 1\n    elif i <= 1599:\n        d[3] = 1\n    elif i <= 1999:\n        d[4] = 1\n    elif i <= 2399:\n        d[5] = 1\n    elif i <= 2799:\n        d[6] = 1\n    elif i <= 3199:\n        d[7] = 1\n    else:\n        d[8] += 1\n\nminimam = max(1, sum(d[:8]))\nmaximam = sum(d)\n\nprint(minimam, maximam)\n"}
{"label": 64, "index": 8294, "code": "#coding:utf-8\n\ndef get_index(rate):\n    if 1 <= rate <= 399:\n        return 0\n    elif 400 <= rate <= 799:\n        return 1\n    elif 800 <= rate <= 1199:\n        return 2\n    elif 1200 <= rate <= 1599:\n        return 3\n    elif 1600 <= rate <= 1999:\n        return 4\n    elif 2000 <= rate <= 2399:\n        return 5\n    elif 2400 <= rate <= 2799:\n        return 6\n    elif 2800 <= rate <= 3199:\n        return 7\n\nif __name__ == \"__main__\":\n    N = int(input())\n    rates = list(map(int, input().split(\" \")))\n    color_list = [0] * 8\n\n    free_num = 0\n    for rate in rates:\n        if rate >= 3200:\n            free_num += 1\n        else:\n            color_list[get_index(rate)] += 1\n\n    color_kind = len(list(filter(lambda x: x > 0, color_list)))\n    if color_kind == 0:\n        print(str(1) + \" \" + str(free_num))\n    else:\n        print(str(color_kind) + \" \" + str(color_kind + free_num))\n"}
{"label": 64, "index": 8295, "code": "N = int(input())\nA = [int(i) for i in input().split()]\n     \nflg = [0,0,0,0,0,0,0,0,0]\nfor i in range(N):\n    if   A[i] <  400: flg[0] = 1\n    elif A[i] <  800: flg[1] = 1\n    elif A[i] < 1200: flg[2] = 1\n    elif A[i] < 1600: flg[3] = 1\n    elif A[i] < 2000: flg[4] = 1\n    elif A[i] < 2400: flg[5] = 1\n    elif A[i] < 2800: flg[6] = 1\n    elif A[i] < 3200: flg[7] = 1\n    else:             flg[8] += 1\n     \ncolmin = max(sum(flg[0:8]), 1)\ncolmax = sum(flg)\nprint(colmin, colmax)"}
{"label": 64, "index": 8296, "code": "def get_color_type_num(a_list):\n\n    c_list = [0 for i in range(9)]\n\n    for a in a_list:\n        if 1 <= a <= 399:\n            c_list[0] += 1\n        elif 400 <= a <= 799:\n            c_list[1] += 1\n        elif 800 <= a <= 1199:\n            c_list[2] += 1\n        elif 1200 <= a <= 1599:\n            c_list[3] += 1\n        elif 1600 <= a <= 1999:\n            c_list[4] += 1\n        elif 2000 <= a <= 2399:\n            c_list[5] += 1\n        elif 2400 <= a <= 2799:\n            c_list[6] += 1\n        elif 2800 <= a <= 3199:\n            c_list[7] += 1\n        else:\n            c_list[8] += 1\n\n    c_num = 0\n    c_free = c_list[8]\n    for i, c in enumerate(c_list):\n        if i == 8:\n            c_free = c\n        elif c:\n            c_num += 1\n\n    min_c = c_num\n    max_c = min_c + c_free\n    # if max_c > 8:\n    #     max_c = 8\n    if min_c == 0:\n        min_c = 1\n\n    return min_c, max_c\n\n\nif __name__ == '__main__':\n    N = input()\n    a_list = [int(i) for i in input().split()]\n\n    min_c, max_c = get_color_type_num(a_list)\n    print(min_c, max_c)\n"}
{"label": 64, "index": 8297, "code": "N = int(input())\nRates = list(map(int, input().split()))\nColors = []\nRainbow = 0\n\nfor Rate in Rates:\n    if Rate < 400:\n        Colors.append(\"\u7070\u8272\")\n    elif Rate < 800:\n        Colors.append(\"\u8336\u8272\")\n    elif Rate < 1200:\n        Colors.append(\"\u7dd1\u8272\")\n    elif Rate < 1600:\n        Colors.append(\"\u6c34\u8272\")\n    elif Rate < 2000:\n        Colors.append(\"\u9752\u8272\")\n    elif Rate < 2400:\n        Colors.append(\"\u9ec4\u8272\")\n    elif Rate < 2800:\n        Colors.append(\"\u6a59\u8272\")\n    elif Rate < 3200:\n        Colors.append(\"\u8d64\u8272\")\n    else:\n        Rainbow += 1\n\nColor = set(Colors)\nif len(Color) != 0:\n    print(len(Color) , len(Color) + Rainbow)\nelse:\n    print(1 , len(Color) + Rainbow)"}
{"label": 64, "index": 8298, "code": "#Colorful Leaderboard\nimport numpy as np\nn = int(input())\na = np.array(list(map(int, input().split())))\nb = sorted (a//400)\ncnt = 0\nfor i in range(len(b)):\n    if b[i]  < 8:\n        None\n    else:\n        b[i]+=i\n        cnt+=1\nc = len(list(set(b)))\n\nprint(str(max([1,c-cnt])) + \" \" + str(c))"}
{"label": 64, "index": 8299, "code": "import bisect\n\nn = int(input())\na = [int(i) for i in input().split()]\n\ntarget = 0\nl = [399, 799, 1199, 1599, 1999, 2399, 2799, 3199]\ncnt = [0 for i in range(len(l))]\n\nfor i in range(n):\n    if a[i] >= 3200:\n        target += 1\n    else:\n        x = bisect.bisect_left(l, a[i])\n        # print (\"value = \" + str(a[i]) + \", x = \" + str(x))\n        cnt[x] += 1\n\nmi = 0\nma = 0\nfor i in range(len(l)):\n    if cnt[i] != 0:\n        mi += 1\n\nma = mi + target\nif mi == 0:\n    mi = 1\n\nprint (str(mi) + \" \" + str(ma))"}
{"label": 64, "index": 8300, "code": "def main():\n    N = int(input())\n    A = tuple(map(int, input().split()))\n\n    color = set()\n    etc = 0\n    for a in A:\n        idx = a // 400\n        if idx >= 8:\n            etc += 1\n        else:\n            color.add(idx)\n\n    min_ = len(color)\n    if min_ == 0:\n        min_ = 1\n    max_ = len(color) + etc\n\n    print(min_, max_)\n\nmain()\n"}
{"label": 64, "index": 8301, "code": "N = int(input())\na = list(map(int, input().split()))\n\nl = [0] * 9\nfor i in a:\n    if i <= 399:\n        l[0]=1\n    elif i<=799:\n        l[1]=1\n    elif i<=1199:\n        l[2]=1\n    elif i<=1599:\n        l[3]=1\n    elif i<=1999:\n        l[4]=1\n    elif i<=2399:\n        l[5]=1\n    elif i<=2799:\n        l[6]=1\n    elif i<=3199:\n        l[7]=1\n    else:\n        l[8] += 1\nif sum(l[:8])==0:\n    print(1, l[8])\nelse:\n    print(sum(l[:8]), sum(l))\n"}
{"label": 64, "index": 8302, "code": "n = input()\na = list(map(int, input().split(\" \")))\n\nCOLOR_LIST = [399, 799, 1199, 1599, 1999, 2399, 2799, 3199]\nfree_color = 0\ncolor_contain = [0, 0, 0, 0, 0, 0, 0, 0]\n\n\n\nfor i in a:\n\tcnt = 0\n\tfor j in COLOR_LIST:\n\t\tif i > j:\n\t\t\tcnt += 1\n\t\n\tif cnt < len(color_contain):\n\t    color_contain[cnt] = 1\n\telse:\n\t    free_color += 1\n\nif free_color == 0:\n\tmin_ans = sum(color_contain)\n\tmax_ans = sum(color_contain)\nelse:\n    min_ans = max(1, sum(color_contain))\n    max_ans = sum(color_contain) + free_color\nprint(min_ans, max_ans)\n\t\t"}
{"label": 64, "index": 8303, "code": "n=input()\na=[int(i) for i in input().split()]\n\ndef cl(n):\n    return n//400\n\nbuff=[0]*9\n\nfor i in a:\n    color=cl(i)\n    if color>8:\n        color=8\n    buff[color]+=1\n\n\nmin=0\nfor i in range(len(buff)-1):\n    if buff[i]>=1:\n        min+=1\n\nmax=min+buff[8]\n\nif min==0:\n    min=1\n\nprint(str(min)+\" \"+str(max))\n\n"}
{"label": 64, "index": 8304, "code": "input()\nrates = sorted([int(x) for x in input().split()])\ncounts = []\nfor boundary in [399, 799, 1199, 1599, 1999, 2399, 2799, 3199]:\n    counts.append(1 if rates and (rates[0] <= boundary) else 0)\n    rates = [rate for rate in rates if rate > boundary]\nhigher = len(rates)\nleast = sum(counts)\nprint(\"{} {}\".format(1 if least == 0 else least, least+higher))"}
{"label": 64, "index": 8305, "code": "N=int(input())\na_n=[int(x) for x in input().split()]\nimport sys\n\nr=[]\nr.append([i for i in a_n if 1<=i<=399])\nr.append([i for i in a_n if 400<=i<=799])\nr.append([i for i in a_n if 800<=i<=1199])\nr.append([i for i in a_n if 1200<=i<=1599])\nr.append([i for i in a_n if 1600<=i<=1999])\nr.append([i for i in a_n if 2000<=i<=2399])\nr.append([i for i in a_n if 2400<=i<=2799])\nr.append([i for i in a_n if 2800<=i<=3199])\nR=[i for i in a_n if 3200<=i]\n\ncount=0\nfor i in range(len(r)):\n    if r[i]:\n        count+=1\nif count==0:\n    count+=1\n    print(str(count), str((count-1) + len(R)))\n    sys.exit()\n\nprint(str(count), str(count+len(R)))"}
{"label": 64, "index": 8306, "code": "n=int(raw_input())\na=map(int,raw_input().split())\nb=[0]*9\nfor i in a:\n\tc=i//400\n\tif c>=8:\n\t\tb[8]+=1\n\telse:\n\t\tb[c]=b[c] or 1\n\nif sum(b[:-1])==0 and b[-1]!=0:\n\td=1\nelse:\n\td=sum(b[:-1])\n\nprint d,sum(b)"}
{"label": 64, "index": 8307, "code": "N=int(input())\na=list(map(int,input().split()))\nb=[0]*9\nfor i in range(N):\n  if a[i]<400:\n    b[0]=1\n  elif a[i]<800:\n    b[1]=1\n  elif a[i]<1200:\n    b[2]=1\n  elif a[i]<1600:\n    b[3]=1\n  elif a[i]<2000:\n    b[4]=1\n  elif a[i]<2400:\n    b[5]=1\n  elif a[i]<2800:\n    b[6]=1\n  elif a[i]<3200:\n    b[7]=1\n  else:\n    b[8]+=1\nif b[8]==N:#\u5168\u54e1\u304c\u3064\u3088\u3044!\n  print(1,min(N,8))\nelse:\n  Min=0\n  Max=0\n  for i in range(8):\n    Min+=b[i]\n  print(Min,min(N,Min+b[8]))"}
{"label": 64, "index": 8308, "code": "n = int(input())\na = list(int(i) for i in input().split())\n\nhai = 0\ntya = 0\nmidori = 0\nmizu = 0\nao = 0\nki = 0\ndaidai = 0\naka = 0\n\nniji = 0\n\nfor i in range(n):\n    if 1 <= a[i] and a[i] <=399:\n        hai = 1\n    elif 400 <= a[i] and a[i] <= 799:\n        tya = 1\n    elif 800 <= a[i] and a[i] <= 1199:\n        midori = 1\n    elif 1200 <= a[i] and a[i] <=1599:\n        mizu = 1\n    elif 1600 <= a[i] and a[i] <= 1999:\n        ao = 1\n    elif 2000 <= a[i] and a[i] <= 2399:\n        ki = 1\n    elif 2400 <= a[i] and a[i] <=2799:\n        daidai = 1\n    elif 2800 <= a[i] and a[i] <= 3199:\n        aka = 1\n    elif 3200 <= a[i]:\n        niji += 1\n\nmincolor = hai + tya + midori + mizu + ao + ki + daidai + aka\n\nif mincolor == 0:\n    mincolor += 1\n    niji -= 1\n\nmaxcolor = mincolor + niji\n\n#if maxcolor >= 9:\n#    maxcolor = 8\n\nprint(mincolor, maxcolor)\n"}
{"label": 64, "index": 8309, "code": "import sys\n \nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\nn = ni()\na = na()\n\n\ns = set()\nx = 0\nfor v in a:\n    if v < 3200:\n        s.add(int(v / 400))\n    else:\n        x += 1\n\ny = len(s)\nz = x + y\n\nif x > 0:\n    y = max(1, y)\n\nprint(\"%d %d\" % (y, z))\n"}
{"label": 64, "index": 8310, "code": "input()\nrates = sorted([int(x) for x in input().split()])\nleast = 0\nfor boundary in [399, 799, 1199, 1599, 1999, 2399, 2799, 3199]:\n    least += 1 if rates and (rates[0] <= boundary) else 0\n    rates = [rate for rate in rates if rate > boundary]\nprint(\"{} {}\".format((least == 0)+least, least+len(rates)))"}
{"label": 64, "index": 8311, "code": "N = int(input())\na = list(map(int, input().split()))\n\nres_min = 0\nres_max = 0\n\ng = list(filter(lambda x: x <= 399, a))\nbr = list(filter(lambda x: 400 <= x <= 799, a))\ngr = list(filter(lambda x: 800 <= x <= 1199, a))\ns = list(filter(lambda x: 1200 <= x <= 1599, a))\nbl = list(filter(lambda x: 1600 <= x <= 1999, a))\ny = list(filter(lambda x: 2000 <= x <= 2399, a))\no = list(filter(lambda x: 2400 <= x <= 2799, a))\nr = list(filter(lambda x: 2800 <= x <= 3199, a))\nt = list(filter(lambda x: 3200 <= x, a))\n\nc_list = [g, br, gr, s, bl, y, o, r]\n\nfor c in c_list:\n    if len(c) != 0:\n        res_min += 1\n        res_max += 1\n\nif res_min == 0:\n    res_min += 1\nres_max += len(t)\n\n\nprint(res_min, res_max)"}
{"label": 64, "index": 8312, "code": "N = int(input())\na = list(map(int, input().split()))\nnum = [0] * 9\nfor i in range(N):\n    if 1 <= a[i] <= 399:\n        num[0] = 1\n    elif 400 <= a[i] <= 799:\n        num[1] = 1\n    elif 800 <= a[i] <= 1199:\n        num[2] = 1\n    elif 1200 <= a[i] <= 1599:\n        num[3] = 1\n    elif 1600 <= a[i] <= 1999:\n        num[4] = 1\n    elif 2000 <= a[i] <= 2399:\n        num[5] = 1\n    elif 2400 <= a[i] <= 2799:\n        num[6] = 1\n    elif 2800 <= a[i] <= 3199:\n        num[7] = 1\n    else:\n        num[8] = num[8] + 1\n\nif num[8] == 0:\n    maximum = sum(num[0:8])\n    minimum = sum(num[0:8])\nelse:\n    if num[8] == N:\n        maximum = N\n        minimum = 1\n    else:\n        maximum = sum(num[0:8]) + num[8]\n        minimum = sum(num[0:8])\n\nprint(minimum, maximum)\n"}
{"label": 64, "index": 8313, "code": "n = input()\na = list(map(int, input().split()))\ncount = [0] * 9\nfor i in a:\n    if i < 3200:\n        count[i//400] = 1\n    else:\n        count[8] += 1\nansMax = sum(count)\nansMin = sum(count[:8])\nif ansMin==0 and count[8] > 0:\n    ansMin = 1\nprint(ansMin, ansMax)\n        \n"}
{"label": 64, "index": 8314, "code": "import numpy as np\n\nN=int(input())\narr=[int(i) for i in input().split()]\n\n#calc binCount\nbinCount=np.zeros(9)\nfor rate in arr:\n    rateBin=rate//400\n    binCount[min(rateBin,8)]+=1\n\ncolorCount=int(np.sum(binCount[:-1]>0))\nnc=int(np.sum(binCount[:-1]))\nnf=int(binCount[-1])\nassert N==(nc+nf)\n\nif nc>0:\n    minColor=colorCount\nelif nf>0:\n    minColor=1\nelse:\n    minColor=0\n\nmaxColor=int(colorCount+nf)\nprint(minColor, maxColor)"}
{"label": 64, "index": 8315, "code": "import sys\nimport numpy as np\nfrom math import *\ndef get_read_func(fileobject):\n    if fileobject == None :\n        return raw_input\n    else:\n        return fileobject.readline\n\ndef main():\n    if len(sys.argv) > 1:\n        f = open(sys.argv[1])\n    else:\n        f = None\n    read_func = get_read_func(f);\n    input_raw = read_func().strip().split()\n    [N] = [int(input_raw[0])]\n    input_raw = read_func().strip().split()\n    color_list = [0 for i in range(8)]\n    top_coder_num = 0\n    for i in range(N):\n        rate = int(input_raw[i])\n        if rate>= 1 and rate < 400:\n            color_list[0] = 1\n        elif rate>= 400 and rate < 800:\n            color_list[1] = 1\n        elif rate>= 800 and rate < 1200:\n            color_list[2] = 1\n        elif rate>= 1200 and rate < 1600:\n            color_list[3] = 1\n        elif rate>= 1600 and rate < 2000:\n            color_list[4] = 1\n        elif rate>= 2000 and rate < 2400:\n            color_list[5] = 1\n        elif rate>= 2400 and rate < 2800:\n            color_list[6] = 1\n        elif rate>= 2800 and rate < 3200:\n            color_list[7] = 1\n        elif rate >= 3200:\n            top_coder_num += 1\n\n    min_color = sum(color_list)\n    if min_color == 0 and top_coder_num >= 1:\n        min_color = 1\n    max_color = sum(color_list) + top_coder_num\n\n    print min_color, max_color\n\n\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 64, "index": 8316, "code": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport math\n\nN, = map(int, sys.stdin.readline().rstrip().split())\na_list = list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef score_index(score):\n    if score < 400:\n        return 0\n    if score < 800:\n        return 1\n    if score < 1200:\n        return 2\n    if score < 1600:\n        return 3\n    if score < 2000:\n        return 4\n    if score < 2400:\n        return 5\n    if score < 2800:\n        return 6\n    if score < 3200:\n        return 7\n    else:\n        raise Exception()\n\n\n\nsuperplayers = 0\ncounts = set()\nfor a in a_list:\n    if a < 3200:\n        counts.add(score_index(a))\n    else:\n        superplayers += 1\n\nprint(\"{} {}\".format(\n    max(len(counts), 1),\n    len(counts) + superplayers\n))\n\nexit(0)\n"}
{"label": 64, "index": 8317, "code": "N = int(input())\na = list(map(int,input().split()))\nb = []\nj = 0\nfor i in a:\n\tif i < 3200:\n\t\tb.append(int(i/400))\n\tif i >= 3200:\n\t\tj += 1\nk = len(set(b))\nif k == 0 and j > 0:\n\tk = 1\n\tj = j-1\nprint(k,k+j)"}
{"label": 64, "index": 8318, "code": "n=int(raw_input())\na=map(int,raw_input().split())\nc=[0]*8\nmx=0\nfor i in xrange(n):\n    if 1<=a[i]<400:\n        c[0]=1\n    elif 400<=a[i]<800:\n        c[1]=1\n    elif 800<=a[i]<1200:\n        c[2]=1\n    elif 1200<=a[i]<1600:\n        c[3]=1\n    elif 1600<=a[i]<2000:\n        c[4]=1\n    elif 2000<=a[i]<2400:\n        c[5]=1\n    elif 2400<=a[i]<2800:\n        c[6]=1\n    elif 2800<=a[i]<3200:\n        c[7]=1\n    else:\n        mx+=1\nprint max(1,sum(c)),sum(c)+mx"}
{"label": 64, "index": 8319, "code": "N = int(input())\na = list(map(int,input().split()))\nans = set()\nother = 0\n\nfor i in a:\n    if i <400:\n        ans.add(\"gray\")\n    elif i <800:\n        ans.add(\"green\")\n    elif i < 1200:\n        ans.add(\"brown\")\n    elif i <1600:\n        ans.add(\"light_blue\")\n    elif i<2000:\n        ans.add(\"blue\")\n    elif i<2400:\n        ans.add(\"yellow\")\n    elif i <2800:\n        ans.add(\"orange\")\n    elif i <3200:\n        ans.add(\"red\")\n    else:\n        other += 1\n\ncolor = len(ans)\nif other == N:\n    print(1,\" \",min(other,8))\nelse:\n    print(color, \" \" ,min(N,color +other))"}
{"label": 65, "index": 8320, "code": "import re\n\nN = int(input())\nS = input()\n\nwhile True:\n    pre = S\n    S = re.sub(r'\\(((L|R)*?)\\)', r'L\\1R', S)\n    if pre == S:\n        break\n\nS = '(' * S.count(')') + S + ')' * S.count('(')\nS = S.replace('L', '(')\nS = S.replace('R', ')')\nprint(S)"}
{"label": 65, "index": 8321, "code": "N=int(input())\nr=0\nl=0\nS = input()\nli_S = []\ncount = 0\n\nfor i in range(N):\n    if S[i]==\")\":\n         r += 1\n         li_S.append(\")\")\n    else:\n        l += 1\n        li_S.append(\"(\")\n    if r > l :\n        li_S.insert(0,\"(\")\n        l += 1\n\nfor i in range(l-r):\n    li_S.append(\")\")\nprint(\"\".join(li_S))"}
{"label": 65, "index": 8322, "code": "#coding:utf-8\n\nif __name__ == \"__main__\":\n    N = int(input())\n    string = input()\n\n    right = 0\n    left = 0\n\n    for char in string:\n        if char == '(':\n            right += 1\n        else:\n            right -= 1\n\n        if right == -1:\n            left += 1\n            right = 0\n\n    L = '(' * left\n    R = ')' * right\n\n    print(L + string + R)\n"}
{"label": 65, "index": 8323, "code": "N=raw_input()\nS=raw_input()\n\npre=\"\"\ncnt=0\nfor s in S:\n    if s == \"(\":\n        cnt += 1\n    else:\n        if cnt == 0:\n            pre += \"(\"\n        else:\n            cnt -= 1\n\nsuf=\")\"*cnt\n\nprint pre+S+suf"}
{"label": 65, "index": 8324, "code": "N = int(input())\nS = input()\nbegin = 0\nend = 0\nfor i in range(N):\n    if(S[i] == \"(\" ):\n        begin += 1\n    elif(S[i] == \")\" and begin <= 0):\n        end += 1\n    else:\n        begin -= 1\nS = (\"(\" * end) + S + (\")\" * begin)\nprint(S)\n"}
{"label": 65, "index": 8325, "code": "#!/usr/bin/env python3\n\ninput()\ns = input()\nbalance = 0\nleft = 0\nfor c in s:\n    if c == '(':\n        balance += 1\n    elif balance == 0:\n        left += 1\n    else:\n        balance -= 1\nright = balance\nprint('(' * left + s + ')' * right)\n"}
{"label": 65, "index": 8326, "code": "n = int(input())\ns = input()\ns_original = s\n\nwhile s.count(\"()\") > 0:\n    s = s.replace(\"()\",\"\")\n\nleft_count = s.count(\")\")\nright_count = s.count(\"(\")\n\nfor i in range(left_count):\n    s_original = \"(\" + s_original\n    \nfor i in range(right_count):\n    s_original = s_original + \")\"\n    \nprint(s_original)"}
{"label": 65, "index": 8327, "code": "# -*- coding: utf-8 -*-\n\nfrom copy import deepcopy\nN = int(input())\nS = input()\nrawS = deepcopy(S)\n\nwhile S.count(\"()\"):\n    S = S.replace(\"()\", \"\")\n\nright = S.count(\"(\")\nleft = S.count(\")\")\nprint(\"(\"*left + rawS + \")\"*right)"}
{"label": 65, "index": 8328, "code": "n = int(input())\ns = input()\n\nunpair = 0\nleft = 0\nright = 0\nfor c in s:\n    if(c == \"(\"):\n        unpair += 1\n    else:\n        if(unpair):\n            unpair -= 1\n        else:\n            left += 1\nright = unpair\n\nprint(\"(\" * left + s + \")\" * right)\n"}
{"label": 65, "index": 8329, "code": "n = int(input())\ns = input()\ncopy = s\ns_list = list(s)\nleft_list = []\nright_list = []\n\nn = len(s_list)\nflag = 1\nif len(s_list) > 1:\n    while flag == 1:\n        flag = 0\n\n        if n>=1:\n            for i in range(n-1):\n                if s_list[i] == '(' and s_list[i+1] == ')':\n                    s_list.pop(i)\n                    s_list.pop(i)\n                    n -= 2\n                    flag = 1\n                    break\n\n        else:\n            break\n\n\n\n\nfor word in s_list:\n    if word == ')':\n        left_list.insert(0,'(')\n    else:\n        right_list.insert(len(right_list),')')\n\n\nword = \"\"\n\nfor lef in left_list:\n    word += lef\n\nword += s\n\nfor rig in right_list:\n    word += rig\n\nprint(word)"}
{"label": 65, "index": 8330, "code": "n = int(input())\ns = list(input())\n\n\nv = []\n\n\nstock = 0\n\nfor i in s:\n    if i==\"(\":\n        stock+=1\n        v.append(\"(\")\n    else:\n        if stock ==0:\n            v.insert(0,\"(\")\n            v.append(\")\")\n        else:\n            stock -= 1\n            v.append(\")\")\n\nfor i in range(stock):\n    v.append(\")\")\n\nprint(*v,sep='')\n"}
{"label": 65, "index": 8331, "code": "n=int(input())\ns=input()\na=0\nb=0\np=0\nfor i in range(len(s)):\n  if s[i]==\"(\":\n     a+=1\n  if s[i]==\")\":\n     b+=1\n     a-=1\n     if a<0:\n       p+=1\n       a=0\nprint(\"(\"*p+s+\")\"*a)"}
{"label": 65, "index": 8332, "code": "#coding: utf-8\nN = int(raw_input())\nS = raw_input()\n\nn = 0\nm = 0\nfor s in S:\n\tif s == '(':\n\t\tn += 1\n\telse:\n\t\tn -= 1\n\tm = min(n, m)\n\nl = abs(m)\nr = n + l\n\nS = '(' * l + S + ')' * r\nprint S"}
{"label": 65, "index": 8333, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\nN = int(input())\ns = input().strip()\nt = s\n\nwhile '()' in t:\n    t = t.replace('()', '')\n\nleft = t.count('(')\nright = t.count(')')\n\nanswer = '(' * right + s + ')' * left\n\nprint(answer)"}
{"label": 65, "index": 8334, "code": "N = int(input())\nS = input()\n\noutput = ''\n\nhiraki = 0\ntoji = 0\nfor i in S:\n    if i == '(':\n        if toji > 0:\n            output = '(' * toji + output\n            output += ')' * toji\n            toji = 0\n            hiraki += 1\n            output += i\n        else:\n            hiraki += 1\n            output += i\n    else:\n        if hiraki > 0:\n            hiraki -= 1\n            output += i\n        else:\n            toji += 1\n\nfor i in range(hiraki):\n    output += ')'\n\nfor i in range(toji):\n    output += ')'\n\noutput = '(' * toji + output\n\nprint(output)\n"}
{"label": 65, "index": 8335, "code": "# -*- coding: utf-8 -*-\nimport sys, re\n\nN = input()\nS = input()\n# pattern = re.compile(r'\\)\\(')\nsentence = ''\nleft, right = 0, 0\n# lit = []\nfor s in S:\n    sentence += s\n    if s == '(':\n        left += 1\n    else:\n        right += 1\n    if left - right < 0:\n        sentence = '(' + sentence\n        left += 1\nif left - right > 0:\n    sentence = sentence + ')' * (left - right)\nprint(sentence)"}
{"label": 65, "index": 8336, "code": "n = input()\ns = raw_input()\nright = 0\nfor i in xrange(n):\n    if s[i] == '(':\n        right += 1\n    else:\n        right = max(right-1, 0)\nleft = 0\nfor i in xrange(n-1, -1, -1):\n    if s[i] == ')':\n        left += 1\n    else:\n        left = max(left-1, 0)\nprint '('*left+s+')'*right"}
{"label": 65, "index": 8337, "code": "N = int(input())\nS = input()\n\nacc = 0\nl = 0\nfor i in range(N):\n    if S[i] == '(':\n        acc += 1\n    else:\n        acc -= 1\n\n    if acc == -1:\n        l += 1\n        acc += 1\n\nL = '(' * l\nR = ')' * acc\nprint (L + S + R)"}
{"label": 65, "index": 8338, "code": "n=int(raw_input())\ns=raw_input()\nstack=[]\nstidx=[]\nins=[]\nfor i in xrange(n):\n    if s[i]==\"(\":\n        stack.append(s[i])\n        stidx.append(i)\n    else:\n        if len(stack)==0:\n            ins.append(i)\n        else:\n            stack.pop()\n            stidx.pop()\ntmp=list(s)\nfor i in stidx:\n    tmp[n-1]=tmp[n-1]+\")\"\nfor i in xrange(len(ins)):\n    tmp[0]=\"(\"+tmp[0]\nprint \"\".join(tmp)\n"}
{"label": 65, "index": 8339, "code": "N = int(raw_input())\nS = raw_input()\n\nleftAdd = 0\nleftCount = 0\nfor i in range(N):\n  if S[i]=='(':\n    leftCount += 1\n  elif leftCount == 0:\n    leftAdd += 1\n  else:\n    leftCount -= 1\n\nresult = '(' * leftAdd + S + ')' * leftCount\nprint(result)"}
{"label": 65, "index": 8340, "code": "N = int(input())\nS = input()\n\ndef get_purified(string):\n    replaced = string.replace(\"()\", \"\")\n    if replaced == string:\n        return replaced\n    else:\n        return get_purified(replaced)\n\npurified_str = get_purified(S)\nright_braces = purified_str.count(\"(\")\nleft_braces = purified_str.count(\")\")\nout = \"(\" * left_braces + S + \")\" * right_braces\nprint(out)\n"}
{"label": 65, "index": 8341, "code": "n = int(input())\nN = input()\nL = 0\nR = 0\nnum = 0\nfor c in N:\n    if c == '(':\n        num += 1\n    else:\n        if num:\n            num -= 1\n        else:\n            L += 1\nR = num\n \nprint('('*L+N+')'*R)"}
{"label": 65, "index": 8342, "code": "def main():\n    N = int(input())\n    S = input()\n\n    s = S\n    while s.count('()'):\n        s = s.replace('()', '')\n\n    if len(s) == 0:\n        print(S)\n        return\n\n    left = ''\n    right = ''\n    if s[0] == ')':\n        left = '(' * s.count(')')\n    if s[-1] == '(':\n        right = ')' * s.count('(')\n\n    print('{}{}{}'.format(left, S, right))\n\nmain()\n"}
{"label": 65, "index": 8343, "code": "n = int(input())\nN = input()\nL = 0\nR = 0\nnum = 0\nfor c in N:\n    if c == '(':\n        num += 1\n    else:\n        if num:\n            num -= 1\n        else:\n            L += 1\nR = num\n\nprint('('*L+N+')'*R)"}
{"label": 65, "index": 8344, "code": "n = int(input())\ns = input()\n\nright = 0\nleft = 0\nsum_right = 0\nsum_left = 0\n\nfor c in s:\n    if c == \"(\":\n        right += 1\n    else:\n        left += 1\n        if right > 0:\n            right -= 1\n            left -= 1\n            \n        \nfor i in range(right):\n    s = s + \")\"\nfor i in range(left):\n    s = \"(\" + s\n\nprint(s)\n"}
{"label": 65, "index": 8345, "code": "# -*- coding: utf-8 -*-\nx = int(input())\ny = input()\n\nz = y\n\nwhile z.find(\"()\") != -1:\n    z = z.replace(\"()\",\"\")\n\na = z.count(\"(\")\nb = z.count(\")\")\n\nans = y\n\nfor i in range(a):\n    ans = ans + \")\"\n\nfor i in range(b):\n    ans = \"(\" + ans\n\nprint(ans)\n"}
{"label": 65, "index": 8346, "code": "n = int(input())\ns = input()\nhead = \"\"\ndepth = 0\nfor i in s:\n    if i == \"(\":\n        depth += 1\n    else:\n        if depth == 0:\n            head += \"(\"\n        else:\n            depth -= 1\ntail = \"\".join([\")\" for _ in range(depth)])\nprint(head + s + tail)"}
{"label": 65, "index": 8347, "code": "N = raw_input()\nS = raw_input()\n\ndef insert(string):\n    # str_len = len(string)\n    # print str_len\n    left = 0\n    right = 0\n    i=0\n    while i < len(string):\n        if string[i] == \"(\":\n            left += 1\n            # print \"left is \" + str(left)\n        else:\n            right += 1\n            # print \"right is \" + str(right)\n        if right > left:\n            string = \"(\" + string\n            left += 1\n            # print string\n            i=0\n            left = 0\n            right = 0\n        else:\n            i += 1\n    return string\n\ndef add_ket(string):\n    bra = 0\n    ket = 0\n    for i in range(len(string)):\n        if string[i] == \"(\":\n            bra += 1\n        else:\n            ket += 1\n    add = bra-ket\n    string = string + add * \")\"\n    return string\n\n\ntmp = insert(S)\nprint add_ket(tmp)\n"}
{"label": 65, "index": 8348, "code": "n = raw_input()\ns = raw_input()\nstack = []\nfor l in s:\n    stack.append(l)\n    if stack[-2:] == [\"(\", \")\"]:\n        stack.pop()\n        stack.pop()\nfor l in stack:\n    if l == \")\":\n        s = \"(\" + s\n    if l == \"(\":\n        s += \")\"\n\nprint s\n"}
{"label": 65, "index": 8349, "code": "N = int(input())\nS = input()\nans = []\n\np = 0\nparts = \"\"\nfor c in S:\n    if c == \"(\":\n        p+=1\n    else:\n        if p==0:\n            ans.insert(0, \"(\")\n        else:\n            p-=1\n    ans.append(c)\nif p > 0:\n    ans += [\")\"]*p\nprint(\"\".join(ans))"}
{"label": 65, "index": 8350, "code": "N=int(raw_input())\nS=raw_input()\n\ns=list(S)\n\ni=0\nj=0\nwhile i<N and j<N:\n    #print i,s\n    if s[i]=='(':\n        j=i\n        while j<N:\n            #print i,j\n            if s[j]==')':\n                s[i]='x'\n                s[j]='x'\n                #print (i,j),s\n                i+=1\n                break\n            else:\n                j+=1\n    else:\n        i+=1\n\nop=s.count(')')\ncl=s.count('(')\n\nprint '('*op+S+')'*cl"}
{"label": 65, "index": 8351, "code": "n = int(input())\ns = input()\nhead = \"\"\ndepth = 0\nfor i in s:\n    if i == \"(\":\n        depth += 1\n    else:\n        if depth == 0:\n            head += \"(\"\n        else:\n            depth -= 1\ntail = \")\" * depth\nprint(head + s + tail)"}
{"label": 65, "index": 8352, "code": "def main():\n    N = int(input())\n    S = input()\n\n    s = S\n    while True:\n        s = s.replace('()', '')\n        if s.count('()') == 0:\n            break\n\n    if len(s) == 0:\n        print(S)\n        return\n\n    left = ''\n    right = ''\n    if s[0] == ')':\n        left = '(' * s.count(')')\n    if s[-1] == '(':\n        right = ')' * s.count('(')\n\n    print('{}{}{}'.format(left, S, right))\n\nmain()\n"}
{"label": 65, "index": 8353, "code": "N=int(input())\ns=input()\n\nlc=0\nrc=0\nfor brc in s:\n    if brc=='(':\n        lc+=1\n    elif brc==')':\n        if lc>0:\n            lc-=1\n        else:\n            rc+=1\n            \nretVal=\"\"\nfor i in range(rc):\n    retVal+='('\nretVal+=s\nfor i in range(lc):\n    retVal+=')'\nprint(retVal)"}
{"label": 65, "index": 8354, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc064.contest.atcoder.jp/tasks/abc064_d\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef check_balance(S):\n    st = 0\n    for pos, c in enumerate(S):\n        if c == '(':\n            st += 1\n        else:                   #  ')'\n            st -= 1\n            if st < 0:\n                break\n    return st\n\n\ndef main(args):\n    N = int(input())\n    S = input().strip()\n    # S = '))))(((('\n\n    result = check_balance(S)\n    while result != 0:\n        if result < 0:\n            S = '(' + S\n        elif result > 0:\n            S = S + ')'\n        result = check_balance(S)\n\n    print(S)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"label": 65, "index": 8355, "code": "n = int(input())\ns = input()\nlist_s = list(s)\n\nunclosed_left = 0\nunclosed_right = 0\nfor c in list_s:\n    if c == '(':\n        unclosed_right += 1\n    else:\n        if unclosed_right > 0:\n            unclosed_right -= 1\n        else:\n            unclosed_left += 1\n\nfor i in range(unclosed_left):\n    list_s = ['('] + list_s\n\nfor i in range(unclosed_right):\n    list_s = list_s + [')']\n\nprint(''.join(list_s))"}
{"label": 65, "index": 8356, "code": "import copy\n\n\ndef get_completed(s):\n    ans = copy.deepcopy(s)\n\n    not_close = 0\n    not_open = 0\n\n    for c in s:\n        if c == '(':\n            not_close += 1\n\n        if c == ')':\n            if not_close > 0:\n                not_close -= 1\n            else:\n                not_open += 1\n\n    for i in range(not_open):\n        ans = '(' + ans\n\n    for i in range(not_close):\n        ans = ans + ')'\n\n    return ans\n\n\nif __name__ == '__main__':\n    N = input()\n    S = input()\n\n    print(get_completed(S))\n"}
{"label": 65, "index": 8357, "code": "n = int(input())\nS = input()\ns = S[:]\nwhile '()' in s:\n\ts = s.replace('()','')\n\nprint('('*s.count(')') + S + ')'*s.count('('))\n"}
{"label": 65, "index": 8358, "code": "N = int(input())\nS = input()\n\noutput = ''\n\nhiraki = 0\nfor i in S:\n    if i == '(':\n        hiraki += 1\n        output += i\n    else:\n        if hiraki > 0:\n            hiraki -= 1\n            output += i\n        else:\n            output = '(' + output\n            output += i\n\noutput += ')' * hiraki\n\nprint(output)\n"}
{"label": 65, "index": 8359, "code": "#! /usr/bin/env python3\n\nn = int(input())\ns = input()\nt0 = 0\nt1 = 0\nans = s\nfor i in s:\n    if i == '(' : t0 += 1\n    if i == ')' : t1 += 1\n    if t0 < 1 and t1 > 0:\n        t1 -= 1\n        ans = '(' + ans\n    if t0 > 0 and t1 > 0:\n        t0 -= 1\n        t1 -= 1\nprint(ans + ')' * t0)"}
{"label": 65, "index": 8360, "code": "N = int(input())\nS = input()\ns = S[:]\nwhile '()' in s:\n    s = s.replace('()', '')\nans = '(' * s.count(')') + S + ')' * s.count('(')\nprint(ans)\n"}
{"label": 65, "index": 8361, "code": "N = int(input())\nS = list(input())\nOut =  S[:]\nwhile len(S) > 0:\n\tif S[0] == \")\":\n\t\tOut.insert(0,\"(\")\n\t\tdel S[0]\n\telif S[0] == \"(\":\n\t\tfor j in range(len(S)):\n\t\t\tif S[j] == \")\":\n\t\t\t\tdel S[j]\n\t\t\t\tdel S[0]\n\t\t\t\tbreak\n\t\t\telif j == len(S) - 1 :\n\t\t\t\tOut.append(\")\")\n\t\t\t\tdel S[0]\nprint(''.join(Out))"}
{"label": 65, "index": 8362, "code": "N = int(input())\nS = input()\n\nc,L,R = 0,0,0\nfor i in range(N):\n    if S[i] == \"(\":\n        c += 1\n    else:\n        c -= 1\n    if c < 0:\n        L += 1\n        c = 0\n\nc = 0\nfor i in range(N-1,-1,-1):\n    if S[i] == \")\":\n        c += 1\n    else:\n        c -= 1\n    if c < 0:\n        R += 1\n        c = 0\n\nprint(L*\"(\" + S + R*\")\")\n"}
{"label": 65, "index": 8363, "code": "n = input()\ns = input()\n\ndef count(s, k):\n    c, needs = 0, 0\n    for i in s:\n        if i != k:\n            if c <= 0:\n                needs += 1\n            else:\n                c -= 1\n        else:\n            c += 1\n    return needs\n\nl = count(s, '(')\nr = count(s[::-1], ')')\nprint('('*l + s + ')'*r)\n"}
{"label": 65, "index": 8364, "code": "def main():\n    N = int(input())\n    S = input()\n\n    s = S\n    while True:\n        s = s.replace('()','')\n        if s.count('()') == 0:\n            break\n\n    if len(s) == 0:\n        print(S)\n        return\n\n    left = ''\n    right = ''\n    if s[0] == ')':\n        left = '(' * s.count(')')\n    if s[-1] == '(':\n        right = ')' * s.count('(')\n\n    print('{}{}{}'.format(left, S, right))\n\nmain()"}
{"label": 65, "index": 8365, "code": "N = int(raw_input())\nS = raw_input()\n\nv1 = 0\nv = 0\nfor s in S:\n    if s == \"(\":\n        v -= 1\n    if s == \")\":\n        v += 1\n    v1 = max(v1, v)\n\nv2 = v1 + S.count(\"(\") - S.count(\")\")\n\nprint \"(\" * v1 + S + \")\" * v2\n"}
{"label": 65, "index": 8366, "code": "N = int(input())\nS = list(input())\nOut =  S[:]\nTemp = S[:]\nwhile len(Temp) > 0:\n\tif Temp[0] == \")\":\n\t\tOut.insert(0,\"(\")\n\t\tdel Temp[0]\n\telif Temp[0] == \"(\":\n\t\ti = 0\n\t\tfor j in range(len(Temp)):\n\t\t\tif Temp[j] == \")\":\n\t\t\t\tdel Temp[j]\n\t\t\t\tdel Temp[0]\n\t\t\t\ti += 1\n\t\t\t\tbreak\n\t\tif i == 0:\n\t\t\tOut.append(\")\")\n\t\t\tdel Temp[0]\nprint(''.join(Out))"}
{"label": 65, "index": 8367, "code": "N=int(input())\nbk=list(input())\n\nl=0\nR=0\nfor sbk in bk:\n    if sbk==')':\n        if l==0:\n            R+=1\n        else:\n            l-=1\n    else:\n        l+=1\n\n\n\nr=0\nL=0\nfor sbk in reversed(bk):\n    if sbk=='(':\n        if r==0:\n            L+=1\n        else:\n            r-=1\n\n    else:\n        r+=1\n\n\n\n\nres='('*R+\"\".join(bk)+')'*L\nprint(res)\n"}
{"label": 65, "index": 8368, "code": "N = int(input())\nS = input()\n\nscore = 0\nln = 0\nrn = 0\n\nfor s in S:\n    if s == '(':\n        score += 1\n    elif s == ')':\n        score -= 1\n\n    if score < 0:\n        ln += 1\n        score = 0\n\nif score > 0:\n    rn = score\n    score = 0\n\nS = '('*ln + S + ')'*rn\nprint(S)"}
{"label": 65, "index": 8369, "code": "\n# coding: utf-8\n\n# In[38]:\n\nnumber = int(input())\nstrings = input()\n\n\n# In[39]:\n\nwhile True:\n    counter = 0\n\n    for s in strings:\n        if s == \"(\":\n            counter += 1\n        else:\n            if counter > 0:\n                counter -= 1\n            else:\n                strings = \"(\" + strings\n                counter = -1\n                break\n        \n    if counter > 0:\n        strings = strings + \")\" * counter\n        \n    if counter == 0:\n        break\n\nprint(strings)\n\n\n# In[ ]:\n\n\n\n"}
{"label": 65, "index": 8370, "code": "N = input()\nstring = input()\narrange = string\nwhile True:\n    after_arrange = arrange.replace('()','')\n    if after_arrange == arrange:\n        break\n    arrange = after_arrange\nleft = after_arrange.count(')')\nright = after_arrange.count('(')\nprint('('*left+string+')'*right)\n"}
{"label": 65, "index": 8371, "code": "N = int(input())\ndata = list(input())\napp = [0,0]\nfor i in range(N):\n    if data[i] == \")\":\n        app[0] += 1\n        if app[1] > 0:\n            app[0] -= 1\n            app[1] -= 1\n    elif data[i] == \"(\":\n        app[1] += 1\nprint(\"(\"*app[0] + \"\".join(data) + \")\"*app[1])\n"}
{"label": 65, "index": 8372, "code": "import sys\n\nstdin = sys.stdin\n\nns = lambda: stdin.readline()\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\n\nN = ni()\nS = ns().strip()\n\nd = 0\nmind = 0\n\nfor i in range(len(S)):\n    if(S[i] == '('):\n        d += 1\n    else:\n        d -= 1\n    mind = min(mind,d)\nprint ('('*(-mind) + S + ')'*(d-mind))"}
{"label": 65, "index": 8373, "code": "N = int(input())\nx = str(input())\n\ny=[0]*N\nleft=''\nright=''\n\nfor i in range(N):\n    if (x[i]==')'):\n        y[i]=-1\n    else:\n        y[i]= 1\n\nfor i in range(N):\n    if y[i]==1:\n        for j in range(i,N):\n            if y[j]==-1:\n                y[i]=y[j]=0\n                break\n\n\n\nfor i in range(y.count(-1)):\n    left=left+'('\nfor i in range(y.count(1)):\n    right=right+')'\n\nprint(left+x+right)\n        \nquit()"}
{"label": 65, "index": 8374, "code": "input()\nS = raw_input()\nc = 0\np = 0\nfor s in S:\n    if s==\"(\":\n        c += 1\n    else:\n        if c==0:\n            p += 1\n        else:\n            c -= 1\nprint \"(\"*p+S+\")\"*c\n"}
{"label": 65, "index": 8375, "code": "time = int(input())\nkakko = input()\nhidarikakko = 0 #(\nmigikakko = 0 #)\nhidariHuyasu = 0 #\u5de6\u306b\u5897\u3084\u3059(\u306e\u6570\nmigiHuyasu = 0 #\u53f3\u306b\n#\u5de6\u306b\u5897\u3084\u3059\u306e\u3092\u8003\u3048\u308b\nfor i in range(time):\n    if kakko[i] == \"(\":\n        hidarikakko += 1\n    else:\n        if hidarikakko == 0:\n            hidariHuyasu += 1\n        else:\n            hidarikakko -= 1\n#\u53f3\u306b\u5897\u3084\u3059\u306e\u3092\u8003\u3048\u308b\nhidarikakko = 0 #(\nmigikakko = 0 #)\ngyaku = range(time)\n# print(gyaku)\n# gyaku.reverse()\nfor i in reversed(range(time)):\n    if kakko[i] == \")\":\n        migikakko += 1\n    else:\n        if migikakko == 0:\n            migiHuyasu += 1\n        else:\n            migikakko -= 1\nprint(\"(\" * hidariHuyasu + kakko + \")\" * migiHuyasu)"}
{"label": 65, "index": 8376, "code": "n = int(raw_input())\ns = raw_input()\nct = 0\nmn = 0\nfor c in s:\n    if c == '(':\n        ct += 1\n    else:\n        ct -= 1\n    mn = min(mn,ct)\nl = abs(mn)\nr = ct + l\ns = '('*l + s + ')'*r\nprint s\n"}
{"label": 65, "index": 8377, "code": "\nN = int(input())\nS = input()\n\nl = []\nl.append(S)\ni = 0\nwhile True:\n    if i > 1 and l[i] == l[i-1]:\n        break\n    l.append(l[i].replace(\"()\",\"\"))\n    i += 1\n\na = l[i]\nleft = a.count(')')\nright = a.count('(')\nans = '('*left + S + ')'*right\nprint(ans)"}
{"label": 65, "index": 8378, "code": "N = input()\nss = raw_input()\ns=ss.split(\"()\")\n\nwhile len(s)>1:\n    s=\"\".join(s)\n    #print(s)\n    s=s.split(\"()\")\n\na=\"\"\nb=\"\"\n\ns=s[0]\nN=len(s)\n\n\n\nfor i in range(N):\n    if s[i]==\"(\":\n        a+=\")\"\n    if s[i]==\")\":\n        b+=\"(\"\n\nprint(b+ss+a)\n"}
{"label": 65, "index": 8379, "code": "import sys\n\n\nif __name__ == \"__main__\":\n    N = raw_input()\n    S = raw_input()\n\n    bra = 0\n    ket = 0\n    pair = 0\n    # ket = 0\n    for s in S:\n        if s == '(':\n            bra += 1\n        else:\n            if bra > 0:\n                bra -= 1\n                pair +=1\n            else:\n                ket += 1\n    print '(' * ket + S + ')'*bra\n"}
{"label": 65, "index": 8380, "code": "N = int(input())\nS = str(input())\n\ndef count_need(string, from_left=True):\n    savings = 0\n    ng = 0\n    \n    if from_left == False:\n        key = '('\n    else :\n        key = ')'\n\n    for s in string:\n        if (s == key):\n            if savings <= 0: \n                ng += 1\n            else:\n                savings -= 1\n        else:\n            savings += 1\n    return ng\n\nleft_num = count_need(S, from_left=True)\nright_num = count_need(S[::-1], from_left=False)\n\nprint(\"(\"*left_num + S + \")\"*right_num)"}
{"label": 65, "index": 8381, "code": "import numpy as np\n# import random\ndef d2():\n    n = int(input())\n    s = input()\n    l = [ 1 if x=='(' else -1 for x in s[:] ]\n    mt = np.cumsum(l) # mountain\n    mi = min(0, np.amin(mt))\n    left = ''; right = ''\n    if mi < 0:\n        left = '('*(mi*-1)\n    if mt[-1]-mi > 0:\n        right = ')'*(mt[-1]-mi)\n    # print(mt, mi)\n    print(left + s + right)\n\nd2()\n"}
{"label": 65, "index": 8382, "code": "n=int(input())\ndata=list(map(lambda x:[str(x),-1],input()))\nwhile 1:\n    i=0\n    while i<len(data):\n        if data[i][0]==')' and data[i][1] == -1:\n            break\n        i+=1\n    if i==len(data):\n        break\n    j=i-1\n    while j>=0:\n        if data[j][0]=='(' and data[j][1]==-1:\n            data[i][1]=1\n            data[j][1]=1\n            break\n        j-=1\n    if j==-1:\n        data[i][1]=1\n        data.insert(0,['(',1])\nwhile 1:\n    i=len(data)-1\n    while i>=0:\n        if data[i][0]=='(' and data[i][1] == -1:\n            break\n        i-=1\n    if i==-1:\n        break\n    data[i][1]=1\n    data.append([')',1])\nprint(''.join(list(map(lambda x:x[0],data))))"}
{"label": 65, "index": 8383, "code": "n=int(raw_input())\ns=raw_input()\ncnt1=0\ncnt2=0\nfor i in xrange(n):\n    if s[i]==\"(\":\n        cnt1+=1\n    else:\n        if cnt1>0:\n            cnt1-=1\n        else:\n            cnt2+=1\n\nfor i in xrange(cnt1):\n    s+=\")\"\nfor i in xrange(cnt2):\n    s=\"(\"+s\nprint s"}
{"label": 65, "index": 8384, "code": "N = int(raw_input())\na = raw_input()\n\nb = list(a)\ncheck = 0\nj = 0\nk = 0\nfor i in range(N):\n\tif b[i] == \"(\":\n\t\tcheck = check + 1\n\telse:\n\t\tcheck = check - 1\n\t\n\tif check < 0:\n\t\tj += 1\n\t\tcheck = check + 1\nfor i in range(j):\n\tb = [\"(\"] + b\n\nfor i in range(check):\n\tb = b + [\")\"]\n\tk += 1\nimport six\nfor i in range(N+j+k):\n\tsix.print_(b[i],end = \"\")"}
{"label": 65, "index": 8385, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    S = input()\n    t = S[:]\n    while True:\n        change = False\n        for i in range(1, len(t)):\n            if (t[i - 1], t[i]) == (\"(\", \")\"):\n                t = t[:i - 1] + t[i + 1:]\n                change = True\n                break\n        if not change:\n            break\n\n    a = \"(\" * t.count(\")\")\n    b = \")\" * t.count(\"(\")\n    print(a + S + b)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 65, "index": 8386, "code": "input()\ns = input().strip()\nans = s\ndepth = 0\nfor c in s:\n    if c == '(':\n        depth += 1\n    else:\n        if depth:\n            depth -= 1\n        else:\n            ans = '(' + ans\nans += ')' * depth\nprint(ans)\n"}
{"label": 65, "index": 8387, "code": "N = int(raw_input())\nS = raw_input()\n\nt = S\n\nwhile S.count(\"()\") != 0:\n    S = S.replace(\"()\", \"\")\n\nL = S.count(\"(\")\nR = S.count(\")\")\n\nprint \"(\"*R + t + \")\"*L\n"}
{"label": 65, "index": 8388, "code": "N=int(input())\nS=input()\n\nstack=[]\nstack2=[]\nindex=-1\nindex2=-1\n\n\n#append \")\" at the end of S\nfor i in range(N):\n    stack.append(S[i])\n    index+=1\n\n    if len(stack)==1 and stack[0]==')':\n        del stack[0]\n        index-=1\n\n    elif stack[index-1]=='(' and stack[index]==')':\n        stack.pop(index)\n        stack.pop(index-1)\n        index-=2\n    #print(stack)\n\nlast=len(stack)\nfor i in range(last):\n    S=S+\")\"\n\n#print(\"S\"+S)\n\nT=S[::-1]\n\n\n#print(\"T\"+T)\n\nleng=len(T)\nfor i in range(leng):\n    stack2.append(T[i])\n    index2+=1\n\n    if len(stack2)==1 and stack2[0]=='(':\n        del stack2[0]\n        index2-=1\n\n    elif stack2[index2-1]==')' and stack2[index2]=='(':\n        stack2.pop(index2)\n        stack2.pop(index2-1)\n        index2-=2\n    #print(stack2)\n\nfirst=len(stack2)\nfor i in range(first):\n    T=T+\"(\"\n\n#print(T)\nprint(T[::-1])\n"}
{"label": 65, "index": 8389, "code": "n = int(input())\ns = list(input())\nstack = []\n\n\nfor v in s:\n    if stack and stack[-1] == \"(\" and v == \")\":\n        stack.pop()\n    else:\n        stack.append(v)\n\n\nfor v in stack:\n    if v == \")\":\n        s.insert(0, \"(\")\n    else:\n        s.append(\")\")\n\nprint(\"\".join(s))\n\n"}
{"label": 65, "index": 8390, "code": "N=int(input())\nS=input()\nu=0\nl=0\nr=0\nfor c in S:\n if(c==\"(\"):\n  u+=1\n else:\n   if(u):\n    u-=1\n   else:\n    l+=1\nr=u\nprint(\"(\"*l+S+\")\"*r)\n\n  "}
{"label": 65, "index": 8391, "code": "n = int(input())\ns = input()\na = s\nf = 0\nfor c in a:\n\tif c==\"(\":\n\t\tf+=1\n\telse:\n\t\tif f>0:\n\t\t\tf-=1\n\t\telse:\n\t\t\ts = \"(\" + s\nfor i in range(f):\n\ts = s + \")\"\n\nprint(s)\n"}
{"label": 65, "index": 8392, "code": "N = int(input())\n\nparentheses = list(input())\n\nadd_open = 0\nclose_buff = 0\n\nresult = \"\"\n\nfor elem in parentheses:\n    result += elem\n\n    if elem == \"(\":\n        close_buff += 1\n\n    elif elem == \")\":\n        if close_buff > 0:\n            close_buff -= 1\n        else:\n            add_open += 1\n\nprint(\"(\"*add_open + result + \")\"*close_buff)\n"}
{"label": 65, "index": 8393, "code": "N = int(input())\nS = input()\n \nans = []\nst = 0\nfor c in S:\n    if c == '(':\n        st += 1\n        ans.append('(')\n    else:\n        if st > 0:\n            st -= 1\n        else:\n            ans.insert(0, '(')\n        ans.append(')')\n \nans.extend(')' * st)\n \nprint(*ans, sep='')"}
{"label": 65, "index": 8394, "code": "input();s=input();l=0\nexec(\"r=l\\nfor c in'%s':l=max(l-1+2*(c=='%s'),0)\\n\"*2%(s,'(',s[::-1],')'))\nprint(l*'('+s+')'*r)"}
{"label": 65, "index": 8395, "code": "n = int(input())\nstr = input()\n \nr = 0\nl = 0\ni = 0\n \nwhile i < n:\n    if str[i] == '(':\n        l += 1\n        i += 1\n    elif str[i] == ')' and l == 0:\n        str = '(' + str\n        n += 1\n        i += 2\n    else:\n        l -= 1\n        i += 1\n \nif l > 0:\n    while l > 0:\n        str = str + ')'\n        l -= 1\n \nprint(str)"}
{"label": 65, "index": 8396, "code": "N = int(input())\nS = input()\n\nSold = S\nwhile True:\n    Snew = Sold.replace('()', '')\n    if len(Snew) == len(Sold):\n        break\n    Sold = Snew\n\nnum = Snew.count(')')\nprint('(' * num + S + ')' * (len(Snew) - num))\n"}
{"label": 65, "index": 8397, "code": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport math\n\nN, = map(int, sys.stdin.readline().rstrip().split())\nS = sys.stdin.readline().rstrip()\n\ndef is_fullfilled(in_str):\n    LR = 0\n    for c in in_str:\n        if LR < 0:\n            return False\n        if c == \"(\":\n            LR += 1\n        else:\n            LR -= 1\n    if LR == 0:\n        return True\n    else:\n        return False\n\n\nLR = 0\nfor c in S:\n    if c == \"(\":\n        LR += 1\n    else:\n        LR -= 1\n\nwhile LR < 0:\n    S = \"(\" + S\n    LR += 1\nwhile LR > 0:\n    S = S + \")\"\n    LR -= 1\n\nwhile not is_fullfilled(S):\n    #print(S)\n    S = \"(\" + S + \")\"\n\nprint(S)\n\nexit(0)\n"}
{"label": 65, "index": 8398, "code": "from sys import stdin \nn = int(stdin.readline())\na = stdin.readline().strip()\nx = 0\nfir = 0 \nsec = 0\nfor i in a:\n    if i=='(':\n        fir+=1\n    else:\n        if fir > 0:\n            fir-=1\n        else:\n            sec+=1\n            fir = 0\n\nprint sec*'(' + a + ')'*fir"}
{"label": 65, "index": 8399, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport array\nfrom bisect import *\nfrom collections import *\nimport fractions\nimport heapq \nfrom itertools import *\nimport math\nimport re\nimport string\n\n_ = input()\nS = input()\nstack = 0\nmade = ''\nfor ch in S:\n    # print(\"ch, stack = \", ch, stack)\n    if ch == '(':\n        stack += 1\n        made += '('\n    elif ch == ')':\n        if stack == 0:\n            made = '(' + made + ')'\n        else:\n            made += ')'\n            stack -= 1\nmade += ')' * stack\nprint(made)"}
{"label": 65, "index": 8400, "code": "if __name__ == '__main__':\n    N = int(input())\n    S = input()\n    tmpS = S\n    for i in range(50):\n        tmpS = tmpS.replace(\"()\", \"\")\n\n    # print(tmpS)\n    left_parenthesis_count = 0\n    right_parenthesis_count = 0\n    for moji in tmpS:\n        if moji == \"(\":\n            left_parenthesis_count += 1\n        elif moji == \")\":\n            right_parenthesis_count += 1\n\n    ans = S\n    for i in range(right_parenthesis_count):\n        ans = \"(\" + ans\n\n    for i in range(left_parenthesis_count):\n        ans += \")\"\n\n    print(ans)\n"}
{"label": 65, "index": 8401, "code": "class Parenter:\n    def __init__(self):\n        self.left = 0\n        self.right = 0\n        self.data = \"\"\n\n    def _run(self, letter):\n        if letter == \"(\":\n            self.data += \"(\"\n            self.left += 1\n        if letter == \")\":\n            if self.left > 0:\n                self.left -= 1\n                self.data += \")\"\n            else:\n                self.right += 1\n                self.data += \")\"\n    \n    def run(self, string):\n        for s in string:\n            self._run(s)\n        self.data = \"(\"*self.right + self.data + \")\"*self.left\n    \n\np = Parenter()\nN = input()\ndata = input()\np.run(data)\nprint(p.data)"}
{"label": 65, "index": 8402, "code": "import sys\nimport numpy as np\nfrom math import *\ndef get_read_func(fileobject):\n    if fileobject == None :\n        return raw_input\n    else:\n        return fileobject.readline\n\ndef main():\n    if len(sys.argv) > 1:\n        f = open(sys.argv[1])\n    else:\n        f = None\n    read_func = get_read_func(f);\n    input_raw = read_func().strip().split()\n    [N] = [int(input_raw[0])]\n    input_raw = list((read_func().strip()))\n    S = list(input_raw)\n    left_count = 0\n    for i in range(N):\n        if input_raw[i] == '(':\n            left_count += 1\n\n        if input_raw[i] == ')':\n            if left_count > 0:\n                left_count -= 1\n            else:\n                S.insert(0, '(')\n\n    for i in range(left_count):\n        S.append(')')\n    print \"\".join(S)\n\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 65, "index": 8403, "code": "input()\ns = input()\nstk = list()\nfor c in s:\n    if c == '(':\n        stk.append('(')\n    elif len(stk) != 0 and stk[-1] == '(':\n        stk.pop()\n    else:\n        stk.append(')')\nprint(stk.count(')') * '(' + s + stk.count('(') * ')')\n"}
{"label": 65, "index": 8404, "code": "# coding: utf-8\ndef get_ln_inputs():\n    return input().split()\n\n\ndef main():\n    _ = get_ln_inputs()\n    S = get_ln_inputs()[0]\n\n    level = 0\n    index = 0\n    while index < len(S):\n        if S[index] == \"(\":\n            index += 1\n            level += 1\n            continue\n        if S[index] == \")\":\n            if level > 0:\n                index += 1\n                level -= 1\n                continue\n            S = \"(\" + S\n            index += 2\n    print(S + (\")\" * level))\n\n\nmain()"}
{"label": 65, "index": 8405, "code": "N = input()\nS = raw_input()\n\nl, r = 0, 0\ntmp = 0\nfor i in xrange(N):\n    if S[i] == '(':\n        tmp += 1\n    else:\n        tmp -= 1\n        if tmp < 0:\n            l += 1\n            tmp = 0\n\ntmp = 0\nfor i in xrange(N-1, -1, -1):\n    if S[i] == ')':\n        tmp += 1\n    else:\n        tmp -= 1\n        if tmp < 0:\n            r += 1\n            tmp = 0\nprint '(' * l + S + ')' * r\n"}
{"label": 65, "index": 8406, "code": "a = int(input())\nc = input()\nnl = 0\nnr = 0\nfor i in c :\n    if i == ')' :\n        nr += 1\n        if nl > 0 :\n            nr -= 1\n            nl -= 1\n    elif i == '(' :\n        nl += 1\nc = '('*nr + c + ')'*nl\nprint(c)\n"}
{"label": 65, "index": 8407, "code": "n = input()\nstr = raw_input()\n\nr = 0\nl = 0\ni = 0\n\nwhile i < n:\n    if str[i] == '(':\n        l += 1\n        i += 1\n    elif str[i] == ')' and l == 0:\n        str = '(' + str\n        n += 1\n        i = 0\n    else:\n        l -= 1\n        i += 1\n\nif l > 0:\n    while l > 0:\n        str = str + ')'\n        l -= 1\n\nprint str"}
{"label": 65, "index": 8408, "code": "n = int(input())\ns = input()\ncnt = [0, 0]\nadd = [0, 0]\nans = ''\nfor i in range(n):\n    if s[i] == ')':\n        cnt[0] += 1\n        if cnt[0] > cnt[1]:\n            add[1] += 1\n            cnt[1] += 1\n    else:\n        cnt[1] += 1\n\nprint('(' * add[1] + s + ')'*(cnt[1] -cnt[0]))\n"}
{"label": 65, "index": 8409, "code": "N=int(input())\nstr=input()\n\nstr1=str\nstr2=str\nn=int(N/2)\n\nfor var in range(1,n+1):\n    try:\n        str1=str1.replace(\"()\",\"\")\n    except:\n        break\n\ns1=str1.count(\"(\")\ns2=str1.count(\")\")\n\nprint(\"(\"*s2+str2+\")\"*s1)"}
{"label": 65, "index": 8410, "code": "n = int(input())\ns = input()\nstack_num = 0\nind = 0\nret = \"\"\nnr = 0\nfor c in s:\n    if(c == \"(\"):\n        stack_num += 1\n    else:\n        stack_num -= 1\n    if(stack_num < 0):\n        ret += \"(\"\n        stack_num += 1\nif(stack_num < 0):\n    ret += \"(\" * (-stack_num)\nret += s\nif(stack_num >= 0):\n    ret += \")\" * stack_num\nprint(ret)"}
{"label": 65, "index": 8411, "code": "n = int(input())\ns = input()\nstart = 0\nend = 0\n\nfor i in range(n):\n    if s[i] == \"(\":\n        start += 1\n    elif s[i] == \")\" and start <= 0:\n        end += 1\n    else:\n        start -= 1\n\nprint(\"(\"*end+s+\")\"*start)"}
{"label": 65, "index": 8412, "code": "N = int(input())\nS = list(input())\n\nv = []\ntmp =[]\n\nfor s in S:\n    if s == \"(\":\n        tmp.append(\")\")\n        v.append(\"(\")\n    else:\n        if len(tmp) == 0:\n            v.insert(0, \"(\")\n            v.append(\")\")\n        else:\n            v.append(tmp.pop())\n\nwhile tmp:\n    v.append(tmp.pop())\n\nprint(\"\".join(v))"}
{"label": 65, "index": 8413, "code": "N = input()\nS = raw_input()\nans = \"\"\ncnt = 0\nfor ch in S:\n    if (cnt <= 0) and (ch == \")\"):\n        ans = \"(\" + ans\n    elif (ch == \")\"):\n        cnt -= 1\n    else:\n        cnt += 1\n    ans += ch\nans += \")\" * cnt\nprint ans"}
{"label": 65, "index": 8414, "code": "input()\ns = input().strip()\nstock, depth = 0, 0\nfor c in s:\n    if c == '(':\n        depth += 1\n    else:\n        if depth:\n            depth -= 1\n        else:\n            stock += 1\nprint('(' * stock + s + ')' * depth)\n"}
{"label": 65, "index": 8415, "code": "import sys\n\nn = int(input())\ns = input()\n\ntries = []\n\ndef count(S):\n    cnt = 0\n    for i in S:\n        if i == \"(\":\n            cnt += 1\n        else:\n            cnt -= 1\n    return cnt\n\ndef valid(S):\n    cnt = 0\n    for i in S:\n        if i == \"(\":\n            cnt += 1\n        else:\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return True\n\ndef bt(S):\n    cnt = count(S)\n    if count(S) == 0 and valid(S):\n        tries.append(S)\n        return\n    else:\n        if cnt < 0:\n            return bt(\"(\" + S)\n        else:\n            return bt(S + \")\")\nbt(s)\nprint(min(tries))\n"}
{"label": 65, "index": 8416, "code": "N = int(input())\nS = list(input())\nr = 0\nl = 0\nfor s in S:\n\tif s == \"(\":\n\t\tl += 1\n\telse:\n\t\tif l == 0:\n\t\t\tr += 1\n\t\telse:\n\t\t\tl -= 1\nr2 = 0\nl2 = 0\nfor s in S[::-1]:\n\tif s == \")\":\n\t\tr2 += 1\n\telse:\n\t\tif r2 == 0:\n\t\t\tl2 += 1\n\t\telse:\n\t\t\tr2 -= 1\nS = [\"(\"] * r + S + [\")\"] * l\nprint(\"\".join(S))\n"}
{"label": 65, "index": 8417, "code": "N = int(input())\nS = list(input())\n\ncnt = 0\n\nans = []\n\nfor s in S:\n    if s ==\"(\":\n        if cnt >= 0:\n            cnt += 1\n            ans.append(s)\n        else:\n            ans.append(s)\n            cnt = 0 - cnt\n            for _ in range(cnt):\n                ans.insert(0, s)\n            cnt = 1\n    else:\n        if cnt <= 0:\n            cnt -= 1\n            ans.append(s)\n        else:\n            ans.append(s)\n            cnt -= 1\n\nif cnt > 0:\n    for _ in range(cnt):\n        ans.append(\")\")\nelif cnt < 0:\n    cnt = 0 - cnt\n    for _ in range(cnt):\n        ans.insert(0, \"(\")\n\nprint(''.join(ans))"}
{"label": 65, "index": 8418, "code": "N=int(input())\nS=input()\nopen=0\noutput=S\nfor c in S:\n    if c==\"(\":\n        open=open+1\n\n    else:\n        if open>0:\n            open=open-1\n        else:\n            output=\"(\"+output\n\nfor i in range(open):\n    if open>0:\n        output=output+\")\"\n\nprint(output)"}
{"label": 65, "index": 8419, "code": "n = input()\ns = input()\ncount = 0\ncountl = 0\nfor c in s:\n    if c=='(':\n        count += 1\n    else:\n        count -= 1\n    if count < 0:\n        countl += 1\n        count = 0\ncount = 0\ncountr = 0\nfor c in s[::-1]:\n    if c=='(':\n        count -= 1\n    else:\n        count += 1\n    if count < 0:\n        countr += 1  \n        count = 0\nprint('('*countl + s + ')'*countr)\n\n"}
{"label": 65, "index": 8420, "code": "input();s=input();r=l=0\nfor c in s:r=max(r-1+2*(c=='('),0)\nfor c in s[::-1]:l=max(l-1+2*(c==')'),0)\nprint(l*'('+s+')'*r)"}
{"label": 65, "index": 8421, "code": "# -*- coding: utf-8 -*-\n\nn = input()\ns = raw_input()\ncnt = 0\nflg = 1\nwhile(flg):\n    for i in range(len(s)):\n        if(s[i] == '('):\n            cnt += 1\n        elif(s[i] == ')'):\n            cnt -= 1\n            if(cnt<0):\n                s = '('+s\n                cnt = 0\n                break\n        if(i==len(s)-1):\n            flg = 0\nfor i in range(cnt):\n    s = s+')'\nprint(s)"}
{"label": 65, "index": 8422, "code": "n=int(input())\ns=input()\nstack=[]\nl=0\nr=0\nfor c in s:\n    if len(stack)>0 and stack[-1]=='(' and c==')':\n        stack.pop()\n    else:\n        stack.append(c)\nif len(stack)==0:\n    print(s)\nelse:\n    for c in stack:\n        if c==')':\n            l+=1\n        else:\n            r+=1\n    print('('*l+s+')'*r)\n"}
{"label": 65, "index": 8423, "code": "N = int(input())\nS = input().rstrip()\n\ndef solve(N, S):\n    n_close = 0\n    max_n_close = 0\n    for s in S:\n        if s == ')':\n            n_close += 1\n            max_n_close = max(max_n_close, n_close)\n        if s == '(':\n            n_close -= 1\n    SS = '(' * max_n_close + S\n    n_open = SS.count('(')\n    n_close = SS.count(')')\n    SSS = SS + ')' * (n_open - n_close)\n    return SSS\n\nprint(solve(N, S))"}
{"label": 65, "index": 8424, "code": "N = input()\nstring = [x for x in input()]\nstrings = string[:]  # manipulate\nstack = []\n\nfor i in range(len(strings)):\n    if strings[i] == '(':\n        stack.append(1)\n    elif strings[i] == ')':\n        if not stack:\n            string.insert(0,'(')\n        else:\n            stack.pop()\n\nif stack:\n    for i in range(len(stack)):\n        string.append(')')\n\nprint(''.join(string))\n"}
{"label": 65, "index": 8425, "code": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().rstrip()\n\n    level = 0 #level\u500b\u306e(\u62ec\u5f27\u304c\u958b\u3044\u3066\u3044\u308b\n    left_paren_app_num = 0\n    right_paren_app_num = 0\n\n    #\u30a4\u30ad\u30ca\u30ea)\u62ec\u5f27\u304c\u51fa\u3066\u304f\u308b\u304b\u3001\n    #(\u62ec\u5f27\u3067\u7d42\u308f\u3063\u3066\u3044\u308b\u3068\u30de\u30ba\u3044\n\n    for ch in s:\n        if ch == '(':\n            if level < 0:\n                left_paren_app_num += - level\n                level = 0\n            level += 1\n        elif ch == ')':\n            level -= 1\n\n    if level > 0:\n            right_paren_app_num += level\n            level = 0\n    elif level < 0:\n        left_paren_app_num += - level\n\n\n    l_s = \"\".join(['(' for i in range(left_paren_app_num)])\n    r_s = \"\".join([')' for i in range(right_paren_app_num)])\n    print(\"%s%s%s\" % (l_s, s, r_s))\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 65, "index": 8426, "code": "if __name__ == \"__main__\":\n\tN = int(input())\n\tS = input()\n\tleft = []\n\tright = []\n\tfor i,p in enumerate(S):\n\t\tif p == '(':\n\t\t\tleft.append(i)\n\t\telse:\n\t\t\tif (len(left) > 0):\n\t\t\t\tleft.pop(0)\n\t\t\telse:\n\t\t\t\tright.append(i)\n\tfor x in range(len(right)):\n\t\tS = '(' + S\n\tfor x in range(len(left)):\n\t\tS = S + ')'\n\tprint (S)\n"}
{"label": 65, "index": 8427, "code": "import sys\n\n# sys.stdin = open(\"d1.in\")\n\nn = int(input())\ns = input()\n\nc = 0\nm = 0\nM = 0\n\nfor l in s:\n    if l == '(':\n        c += 1\n    if l == ')':\n        c -= 1\n    if m > c:\n        m = c\n    if M < c:\n        M = c\n\nleft = '(' * (-m)\nc += -m\nright = ')' * c\nres = left + s + right\nprint(res)\n"}
{"label": 65, "index": 8428, "code": "n = int(input())\ns = input()\nbf = []\naf = []\nst = ['*']\n\nfor c in s:\n    pre = st[-1]\n    st.append(c)    \n\n    if c ==  ')':\n        if (pre == '(') :\n            st.pop()\n            st.pop()\n            af.pop()\n            continue\n        bf.append('(')\n    else:\n        af.append(')')\nans = ''.join(bf) + s + ''.join(af)\nprint(ans)\n\n"}
{"label": 65, "index": 8429, "code": "import sys\n \nstdin = sys.stdin\n \nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\n\nn = ni()\ns = ns()\n\nlevel = 0\nleft = 0\n\nfor i in range(0, n):\n    if s[i] == '(':\n        level += 1\n    else:\n        level -= 1\n    \n    if level + left < 0:\n        left += 1\n    \nlevel += left\n\nprint('(' * left + s[0:n] + ')' * level)\n"}
{"label": 65, "index": 8430, "code": "N = int(input())\nS = input()\n\ndef step(queue_l, queue_r, c):\n    if c == '(':\n        queue_l += 1\n    else:\n        if queue_l > 0:\n            queue_l -= 1\n        else:\n            queue_r += 1\n    return (queue_l, queue_r)\n\n\nout = []\nqueue_l = 0\nqueue_r = 0\nfor c in S:\n    queue_l, queue_r = step(queue_l, queue_r, c)\n\nprint('(' * queue_r + S + ')' * queue_l)"}
{"label": 65, "index": 8431, "code": "import copy\n\nif __name__ == \"__main__\":\n\n    N = int(input())\n    s = input().replace(\"\\n\",\"\")\n\n    left = 0\n    cp_s = copy.copy(s)\n    for c in s:\n        if c == \"(\":\n            left += 1\n        else:\n            left -= 1\n        if left < 0:\n            cp_s = \"(\" + cp_s\n            left += 1\n    if left > 0:\n        cp_s = cp_s + \")\"*left\n    print(cp_s)\n"}
{"label": 65, "index": 8432, "code": "N=input()\nbrac = raw_input()\nans = brac\n\nwhile '()' in brac:\n\tbrac=brac.replace('()','')\n\nleft=brac.count('(')\nright=brac.count(')')\n\nprint '('*right +ans +')'*left"}
{"label": 65, "index": 8433, "code": "def makeinsert(s):\n\tleft = 0\n\tinserttop = ''\n\tfor i in range(0, len(s)):\n\t\tif s[i] == '(':\n\t\t\tleft += 1\n\t\telse:\n\t\t\tif left > 0:\n\t\t\t\tleft -= 1\n\t\t\telse:\n\t\t\t\tinserttop = '(' + inserttop\n\tinsertbottom = ''\n\tfor i in range(0, left):\n\t\tinsertbottom = insertbottom + ')'\n\treturn inserttop + s + insertbottom\n\nraw_input()\ns = raw_input()\n\nprint makeinsert(s)\n"}
{"label": 65, "index": 8434, "code": "N = input()\nS = raw_input()\n\nopened = 0\nmin_opened = 0\nfor c in S:\n    if c == '(' :\n        opened += 1\n    else:\n        opened -= 1\n        min_opened = min(opened, min_opened)\n\nclosed = 0\nmin_closed = 0\nfor c in S[::-1]:\n    if c == ')' :\n        closed += 1\n    else:\n        closed -= 1\n        min_closed = min(closed, min_closed)\n\nop = '(' * -min_opened if min_opened < 0 else ''\ncl = ')' * -min_closed if min_closed < 0 else ''\nprint op + S + cl\n"}
{"label": 65, "index": 8435, "code": "import sys\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\nn = ni()\ns = ns().strip()\nh = 0\nminh = 0\nfor c in s:\n    if c == \"(\":\n        h += 1\n    else:\n        h -= 1\n    minh = min(minh, h)\nprint(\"(\"*(-minh) + s + \")\"*(h-minh))\n"}
{"label": 65, "index": 8436, "code": "input()\n\ns = raw_input().strip()\n\nl = \"(\"\nr = \")\"\n\nl_c = 0\nr_c = 0\nfor c in s:\n    if c == l:\n        l_c+=1\n    elif c == r:\n        if l_c>0:\n            l_c-=1\n        else:\n            r_c+=1\n            \nprint \"(\" * r_c + s + \")\" * l_c"}
{"label": 65, "index": 8437, "code": "input_line_1 = raw_input()\ninput_line_2 = raw_input()\n#N = int(input_line_1)\ncount_1 = 0\ncount_2 = 0\nfor kigou in input_line_2:\n\tif kigou == \"(\":\n\t\tcount_2 += 1\n\tif kigou == \")\":\n\t\tif count_2 > 0:\n\t\t\tcount_2 -= 1\n\t\telse:\n\t\t\tcount_1 += 1\n\t#print kigou, count_1, count_2\nprint count_1 * \"(\" + input_line_2 + count_2 * \")\"\n"}
{"label": 65, "index": 8438, "code": "n = int(raw_input())\ns = raw_input()\nm = 0\nc = 0\nfor si in s:\n    if si == \"(\":\n        c += 1\n    else:\n        c -= 1\n    m = min(m, c)\n\nans = \"\"\nif m < 0:\n    ans += \"(\" * (-m)\n    c += -m\n\nif c < 0:\n    ans = ans + \"(\" * (-c) + s\nelse:\n    ans = ans + s + \")\" * c\n\nprint ans"}
{"label": 65, "index": 8439, "code": "N = int(input())\nS = input()\n\noutput = ''\n\nhiraki = 0\ntoji = 0\nfor i in S:\n    if i == '(':\n        if toji > 0:\n            output = '(' * toji + output\n            toji = 0\n            hiraki += 1\n            output += i\n        else:\n            hiraki += 1\n            output += i\n    else:\n        if hiraki > 0:\n            hiraki -= 1\n            output += i\n        else:\n            toji += 1\n            output += i\n\noutput += ')' * hiraki\noutput = '(' * toji + output\n\nprint(output)\n"}
{"label": 65, "index": 8440, "code": "N = int(raw_input())\nS = raw_input()\nS_sub = S\nwhile (\"()\" in S):\n    S = S.replace(\"()\",\"\")\na = 0\nb = 0\nfor x in S:\n    if x == ')':\n        a += 1\n    else:\n        break\nfor x in S:\n    if x == '(':\n        b += 1\nprint \"(\" * a + S_sub + \")\" * b\n"}
{"label": 65, "index": 8441, "code": "import copy\n\nn = int(input())\ns = input()\ndeeps = copy.deepcopy(s)\n\nwhile s.count(\"()\") >= 1:\n    s = s.replace(\"()\",\"\")\n\nans = s.count(')')* '(' + deeps + s.count('(')*')'\n\nprint(ans)"}
{"label": 65, "index": 8442, "code": "n = int(input())\na = list(input())\nb = []\ncou1=0\n\nfor i in a:\n    if i==\"(\":\n        cou1 += 1\n        b.append(\"(\")\n    else:\n        b.append(\")\")\n        if cou1==0:\n            b.insert(0,\"(\")\n            continue\n        cou1 -= 1\n\nfor _ in range(cou1):\n    b.append(\")\")\n\nprint(*b,sep='')"}
{"label": 65, "index": 8443, "code": "n = int(input())\ns = input().rstrip()\n\ncur = 0\npre = 0\nfor c in s:\n    if c == '(':\n        cur += 1\n    else:\n        cur -= 1\n\n    if cur < 0:\n        pre += 1\n        cur += 1\n\nprint(\"(\"*pre + s + \")\"*cur)"}
{"label": 65, "index": 8444, "code": "N = int(input())\nS = list(input())\nOut =  S[:]\nwhile len(S) > 0:\n\tif S[0] == \")\":\n\t\tOut.insert(0,\"(\")\n\t\tdel S[0]\n\telif S[0] == \"(\":\n\t\ti = 0\n\t\tfor j in range(len(S)):\n\t\t\tif S[j] == \")\":\n\t\t\t\tdel S[j]\n\t\t\t\tdel S[0]\n\t\t\t\ti += 1\n\t\t\t\tbreak\n\t\t\telif j == len(S) - 1 :\n\t\t\t\tOut.append(\")\")\n\t\t\t\tdel S[0]\nprint(''.join(Out))"}
{"label": 65, "index": 8445, "code": "N = int(input())\nS = input()\n\na = 0\nb = 0\n\nfor s in S:\n    if s == \"(\":\n        a += 1\n    else:\n        if a > 0:\n            a -= 1\n        else:\n            b += 1\n            \nprint(\"(\"*b + S + \")\"*a)"}
{"label": 65, "index": 8446, "code": "# -*- coding: utf-8 -*-\ndef is_correct(s):\n    l = 0\n    for si in s:\n        if si == \"(\": l += 1\n        else: l -= 1\n        if l < 0: return False\n    return l == 0\n\nN = int(raw_input())\nS = raw_input()\n\nflag = False\nfor i in xrange(105):\n    for j in xrange(105):\n        T = \"(\"*i + S + \")\"*j\n        if is_correct(T):\n            print T\n            flag = True\n            break\n    if flag:\n        break\n\n"}
{"label": 65, "index": 8447, "code": "#!/usr/local/bin/python3.5 -tt\n\nimport random\nimport sys\n\nif __name__ == '__main__':\n    def _(f):\n        for l in f:\n            for i in l.split():\n                yield i\n\n    g = _(sys.stdin)\n\n    N, S = (int(next(g)),\n                next(g),\n    )\n\n    SS = S\n\n    while S:\n        while '()' in S:\n            S = S.replace('()', '')\n\n        while S.startswith(')'):\n            S = S[1:]\n            \n            SS = '(' + SS\n\n        while S.endswith('('):\n            S = S[:-1]\n\n            SS += ')'\n\n    print(SS)\n"}
{"label": 65, "index": 8448, "code": "import sys\nn = map(int, sys.stdin.readline().split())\na = sys.stdin.readline().strip()\nres = a\nh = 0\nfor i in range (len(a)):\n  if a[i] == '(':\n    h += 1\n  else:\n    h -= 1\n  if h < 0:\n    res = '(' + res\n    h = 0\n\nprint res + ')' * h\n\n\n\n"}
{"label": 65, "index": 8449, "code": "n = int(input())\ns = input()\nl = 0\nres = 0\nfor i in s:\n    if i == '(':\n        l += 1\n    elif l:\n        l -= 1\n    else:\n        res += 1\nprint(res * '(' + s + l * ')')"}
{"label": 66, "index": 8450, "code": "x,a,b = map(int,input().split())\nif b <= a:\n    print(\"delicious\")\nelif x >= b - a:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8451, "code": "x, a, b = map(int, input().split())\nif b - a <= 0:\n    print(\"delicious\")\nelif 0 < b - a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8452, "code": "x, a, b = (int(i) for i in input().split())\n\ne = b-a\n\nif e <= 0:\n    print(\"delicious\")\nelif e <= x:\n    print(\"safe\")\nelif e > x:\n    print(\"dangerous\")"}
{"label": 66, "index": 8453, "code": "x,a,b = map(int, input().split())\nif a-b>=0:\n    print(\"delicious\")\nelif x+a-b>=0:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8454, "code": "x,a,b = input().split()\nx = int(x)\na=int(a)\nb = int(b)\n\nif a >=b:\n    print(\"delicious\")\nelif a+x >= b:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8455, "code": "X,A,B = list(map(int,input().split()))\nif (B-A)<=X and (B-A)>0:\n    print(\"safe\")\nelif (B-A)<=0:\n    print(\"delicious\")\nelif (B-A)>X:\n    print(\"dangerous\")"}
{"label": 66, "index": 8456, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\ndef feel(x, a, b):\n    if b <= a:\n        return \"delicious\"\n    elif b - a <= x:\n        return \"safe\"\n    else:\n        return \"dangerous\"\n\ndef main():\n    x, a, b = map(int, input().split())\n\n    print(feel(x, a, b))\n\nif __name__ == \"__main__\": main()\n"}
{"label": 66, "index": 8457, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\n\ndef main():\n    x,a,b = LI()\n    if a >= b:\n        return 'delicious'\n    if a+x >= b:\n        return 'safe'\n    return 'dangerous'\n\n\nprint(main())\n\n\n\n\n\n\n"}
{"label": 66, "index": 8458, "code": "a = list(map(int, input().split()))\nif a[1]-a[2] >=0:\n    print(\"delicious\")\nelif a[1]-a[2] + a[0] >=0:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8459, "code": "S = input().split()\n \nif int(S[1]) >= int(S[2]):\n    print(\"delicious\")\nelif int(S[0])+int(S[1]) >= int(S[2]):\n    print(\"safe\")\nelse :\n    print(\"dangerous\")\n    "}
{"label": 66, "index": 8460, "code": "X,A,B =map(int,input().split())\n\n\nif B>=A+X+1:\n    print(\"dangerous\")\n\nelif B<=A:\n    print(\"delicious\")\n\nelse:\n    print(\"safe\")\n"}
{"label": 66, "index": 8461, "code": "X, A, B = map(int, input().split())\nif B - A <= 0:\n\tprint('delicious')\nelif B - A <= X:\n\tprint('safe')\nelse:\n\tprint('dangerous')"}
{"label": 66, "index": 8462, "code": "x, a, b = map(int, input().split(\" \"))\n\nif b <= a:\n    print(\"delicious\")\nelse:\n    print(\"safe\" if b-a <= x else \"dangerous\")\n"}
{"label": 66, "index": 8463, "code": "x = list(map(int,input().split()))\ny = x[2]-x[1]\nif y<=0:\n    print('delicious')\nelif y<=x[0]:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8464, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc065.contest.atcoder.jp/tasks/abc065_a\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    X, A, B = map(int, input().split())\n    if A >= B:\n        print('delicious')\n    elif (A + X) >= B:\n        print('safe')\n    else:\n        print('dangerous')\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 66, "index": 8465, "code": "\nx, a, b = map(int, input().split())\n\nif a >= b:\n    print(\"delicious\")\nelif b - a > x:\n    print(\"dangerous\")\nelse:\n    print(\"safe\")\n"}
{"label": 66, "index": 8466, "code": "XABstr = input().split()\nXAB = []\nfor n in XABstr:\n    XAB.append(int(n))\ndif = XAB[2]-XAB[1]\nif dif <= 0:\n    print('delicious')\nelif dif > 0:\n    if dif <= XAB[0]:\n        print('safe')\n    elif dif > XAB[0]:\n        print('dangerous')"}
{"label": 66, "index": 8467, "code": "x,a,b=map(int,input().split())\nif b<=a:\n    print('delicious')\nelif b<=a+x:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8468, "code": "x,a,b = map(int, input().split())\n\nif a >= b:\n    print(\"delicious\")\n\nelif b - a <= x:\n    print(\"safe\")\n\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8469, "code": "x,a,b = map(int,input().split())\nd = b-a\nif(d<=0):\n\tprint(\"delicious\")\nelif(d>0):\n\tif(d<=x):\n\t\tprint(\"safe\")\n\telse:\n\t\tprint(\"dangerous\")"}
{"label": 66, "index": 8470, "code": "X,A,B = map(int,input().split())\nif B <= A:\n   print(\"delicious\")\nelif B - A <= X:\n   print(\"safe\")\nelse:\n   print(\"dangerous\")"}
{"label": 66, "index": 8471, "code": "l = map(int, raw_input().split())\n\nX = l[0]\nA = l[1]\nB = l[2]\n\nif B - A > X:\n\tprint 'dangerous'\n\nif B - A <= X:\n\n\tif A >= B:\n\t\tprint 'delicious'\n\n\telse:\t\n\t\tprint 'safe'\n"}
{"label": 66, "index": 8472, "code": "x,a,b = map(int,input().split())\n\ny = a-b\nans = 'delicious'\nif y < 0:\n    if y >= -x:\n        ans = 'safe'\n    else:\n        ans = 'dangerous'\n\nprint(ans)\n"}
{"label": 66, "index": 8473, "code": "x,a,b = map(int, raw_input().split())\nif a >= b:\n    print 'delicious'\nelif b > a + x:\n    print 'dangerous'\nelse:\n    print 'safe'\n"}
{"label": 66, "index": 8474, "code": "ans = ['delicious', 'safe', 'dangerous']\n\ndef judge(x, a, b):\n\tif a >= b:\n\t\treturn 0\n\tif x + a >= b:\n\t\treturn 1\n\treturn 2\n\ninpt = map(int, raw_input().split())\nx = inpt[0]\na = inpt[1]\nb = inpt[2]\n\nprint ans[judge(x, a, b)]\n"}
{"label": 66, "index": 8475, "code": "X,A,B=map(int,raw_input().split(' '))\n\n\nif B-A<=0:\n    print 'delicious'\nelif B-A<=X:\n    print 'safe'\nelse:\n    print 'dangerous'"}
{"label": 66, "index": 8476, "code": "X, A, B = [int(n) for n in input().split()]\nif B <= A:\n  print(\"delicious\")\nelif B<=A+X:\n  print(\"safe\")\nelse:\n  print(\"dangerous\")"}
{"label": 66, "index": 8477, "code": "x,a,b = [int(i) for i in input().split()]\nif (b-a)>x:\n    print(\"dangerous\")\nelif b-a>0:\n    print(\"safe\")\nelse :\n    print(\"delicious\")\n"}
{"label": 66, "index": 8478, "code": "def a():\n    X, A, B = map(int, input().split())\n    print(\n        'delicious' if B-A <= 0 else\n        'safe' if 0 < B-A <= X else\n        'dangerous'\n    )\n\na()"}
{"label": 66, "index": 8479, "code": "X,A,B = map(int,input().split())\n\nif B<=A:\n    print('delicious')\nelif B<=A+X:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8480, "code": "x, a, b = (int(i) for i in input().split())\nif b<=a:\n    print('delicious')\nelif b<=a+x:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8481, "code": "l = list(map(int, input().split()))\nborder = l[1] - l[2]\nif border < 0:\n    if l[0] >= abs(border):\n        print(\"safe\")\n    else:\n        print(\"dangerous\")\nelse:\n    print(\"delicious\")"}
{"label": 66, "index": 8482, "code": "\nX, A, B = (int(e) for e in input().split())\n\nif B - A <= 0:\n    print('delicious')\nelif B - A > X:\n    print('dangerous')\nelse:\n    print('safe')"}
{"label": 66, "index": 8483, "code": "X,A,B=map(int,input().split())\nif B<=A:\n    print(\"delicious\")\nelif B<=(A+X):\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8484, "code": "# -*- coding: utf-8 -*-\n\nx, a, b = (int(i) for i in input().split())\nif a - b >= 0:\n    print(\"delicious\")\nelif a + x - b >= 0:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8485, "code": "x, a, b = map(int, input().split())\nif b-a<=0:\n    print('delicious')\nelif b-a>x:\n    print('dangerous')\nelse:\n    print('safe')"}
{"label": 66, "index": 8486, "code": "def ini(): return int(input())\ndef inli(): return list(map(int, input().split()))\ndef inf(): return float(input())\ndef inlf(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\na=inli()\n\nif a[1]-a[2] >= 0:\n    print(\"delicious\")\nelif (a[0]+a[1])-a[2]>=0:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8487, "code": "x, a, b = map(int, input().split())\nif b <= a:\n    print(\"delicious\")\nelse:\n    if (b - a) <= x:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")"}
{"label": 66, "index": 8488, "code": "X,A,B =map(int,input().split())\n\nif B>=A+X+1:\n    print(\"dangerous\")\nelif B<=A:\n    print(\"delicious\")\nelif B>=X-A:\n    print(\"safe\")\n"}
{"label": 66, "index": 8489, "code": "x, a, b = map(int, input().split())\nif b - a <= 0:\n    print(\"delicious\")\nelif b - a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8490, "code": "x,a,b = list(map(int,input().split()))\n\nif b>a+x:\n    print(\"dangerous\")\nelif b>a:\n    print(\"safe\")\nelse :\n    print(\"delicious\")\n"}
{"label": 66, "index": 8491, "code": "x, a, b = map(int, input().split())\n\nz = a - b\n\nif z >= 0:\n    print(\"delicious\")\nelif z*(-1) <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8492, "code": "# -*- coding:utf-8 -*-\nx,a,b = map(int, input().split())\nif a-b >= 0:\n    print(\"delicious\")\nelse:\n    if abs(a-b) <= x:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")"}
{"label": 66, "index": 8493, "code": "x,a,b=map(int,raw_input().split())\nif a>=b:\n print 'delicious'\nelif b<=a+x:\n print 'safe'\nelse:\n print 'dangerous'\n"}
{"label": 66, "index": 8494, "code": "X, A, B = list(map(int, input().split()))\nif B-A <= 0: print(\"delicious\")\nelif B-A > X: print(\"dangerous\")\nelse: print(\"safe\")"}
{"label": 66, "index": 8495, "code": "if __name__==\"__main__\":\n    x, a ,b = map(int, input().split())\n    if b - a <= 0:\n        print(\"delicious\")\n    elif b - a <= x:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")\n"}
{"label": 66, "index": 8496, "code": "X, A, B = map(int, raw_input().split())\nprint \"delicious\" if A >= B else \"safe\" if B - A <= X else \"dangerous\"\n"}
{"label": 66, "index": 8497, "code": "x, a, b = map(int, input().split())\n\nif b <= a:\n    print(\"delicious\")\nelif b <= a + x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8498, "code": "X,A,B = map(int,raw_input().split())\nif A-B >= 0:\n    print \"delicious\"\nelif B-A < X+1:\n    print \"safe\"\nelse:\n    print \"dangerous\""}
{"label": 66, "index": 8499, "code": "b, c, d = map(int, input().split())\nif d <= c :\n  print ('delicious')\nelif d - c <= b :\n  print ('safe')\nelse :\n  print ('dangerous')"}
{"label": 66, "index": 8500, "code": "[x,a,b] = [int(x) for x in input().split()]\nif -a+b<=0:\n    print('delicious')\nelif -a-x+b<=0:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8501, "code": "X, A, B = list(map(int, input().split(\" \")))\n\nif (A - B) >= 0:\n    print (\"delicious\")\nelif X - (B - A) >= 0:\n    print (\"safe\")\nelse :\n    print (\"dangerous\")\n"}
{"label": 66, "index": 8502, "code": "x,a,b=map(int,input().split())\n\nif b<=a:\n    print(\"delicious\")\nelif b<=x+a:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8503, "code": "(x, a, b) = map(int, input().split())\n\nif(b<=a):\n    print(\"delicious\")\nelif(b-a<=x):\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8504, "code": "x, a, b = (int(i) for i in input().split())\n\nif b-a>x:\n    print('dangerous')\nelif b-a>0:\n    print('safe')\nelse:\n    print('delicious')\n"}
{"label": 66, "index": 8505, "code": "x, a, b = [int(i) for i in input().split()]\nif (b - a) <= 0:\n    print(\"delicious\")\nelif b - a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8506, "code": "[x,a,b] = list(map(int,input().split()))\nn = b - a\nif n > x:\n  print(\"dangerous\")\nelif n > 0:\n  print(\"safe\")\nelse:\n  print(\"delicious\")"}
{"label": 66, "index": 8507, "code": "X, A, B = map((int), input().split() )\nif(A >= B):\n    print(\"delicious\")\nelif(B - A <= X):\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8508, "code": "x, a, b = map(int, input().split())\n\nif b-a <= 0:\n    print(\"delicious\")\nelif b-a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8509, "code": "X, A, B = map(int, input().split())\nif   B <= A:\n    print('delicious')\nelif A < B and B <= A + X:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8510, "code": "X, A, B = list(map(int, input().split()))\n\nif A >= B:\n  print(\"delicious\")\nelif B - A <= X:\n  print(\"safe\")\nelse:\n  print(\"dangerous\") "}
{"label": 66, "index": 8511, "code": "# coding: utf-8\nx, a, b = map(int, input().split())\nif (b-a)<=0:\n    print(\"delicious\")\nelif x<(b-a):\n    print(\"dangerous\")\nelse:\n    print(\"safe\")"}
{"label": 66, "index": 8512, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import division, print_function\nimport sys\n\n\ndef main():\n    x, a, b = map(int, sys.stdin.readline().strip().split(\" \"))\n    if b - a <= 0:\n        print(\"delicious\")\n    elif b - a <= x:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 66, "index": 8513, "code": "X, A, B = list(map(int, input().split()))\n\nif A - B < -X:\n\tprint('dangerous')\nelif A - B >= 0:\n\tprint('delicious')\nelse:\n\tprint('safe')"}
{"label": 66, "index": 8514, "code": "X, A, B = list(map(int, input().split(\" \")))\n\nif (A - B) >= 0:\n    print(\"delicious\")\nelif (B - A) <= X:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8515, "code": "x,a,b = list(map(int,input().split()))\nif (a - b >= 0):\n    print(\"delicious\")\nelif ((x + a) - b >= 0):\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8516, "code": "x,a,b=map(int,input().split())\nprint((\"delicious\",\"safe\",\"dangerous\")[(a<b)+(x+a<b)])"}
{"label": 66, "index": 8517, "code": "x, a ,b = map(int, input().split(\" \"))\n\nif a >= b :\n    print(\"delicious\")\nelif x >= b - a :\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n    \n"}
{"label": 66, "index": 8518, "code": "# -*- coding: utf-8 -*-\nX, A, B = map(int, raw_input().split())\nif A >= B:\n    print 'delicious'\nelif A + X >= B:\n    print 'safe'\nelse:\n    print 'dangerous'"}
{"label": 66, "index": 8519, "code": "x,a,b=map(int,input().split())\nif b-a <= 0:\n    print('delicious')\nelif b-a <= x and b-a >0:\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8520, "code": "if __name__ == '__main__':\n    X, A, B = list(map(int, input().split()))\n    if B - A <= 0:\n        print(\"delicious\")\n    elif B - A <= X:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")\n"}
{"label": 66, "index": 8521, "code": "# -*- coding: utf-8 -*-\n\nX, A, B = [int(x) for x in input().split()]\n\nif A >= B:\n    print(\"delicious\")\nelif (A + X) >= B:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8522, "code": "X, A, B = map(int, raw_input().split())\n\nif B - A <= 0:\n    print \"delicious\"\nelif B - A > X:\n    print \"dangerous\"\nelse:\n    print \"safe\"\n"}
{"label": 66, "index": 8523, "code": "X,A,B = map(int,input().split())\nif B <= A:\n  print('delicious')\nelif B-A <= X:\n  print('safe')\nelse:\n  print('dangerous')"}
{"label": 66, "index": 8524, "code": "data = input().split()\nX = int(data[0])\nA = int(data[1])\nB = int(data[2])\n\nif((A - B) >= 0):\n\tprint(\"delicious\")\nelse:\n\tif((B - A) <= X):\n\t\tprint(\"safe\")\n\telse:\n\t\tprint(\"dangerous\")\n\n"}
{"label": 66, "index": 8525, "code": "def main():\n    X, A, B = map(int, input().split())\n\n    if A >= B:\n        ans = 'delicious'\n    elif B - A <= X:\n        ans = 'safe'\n    else:\n        ans = 'dangerous'\n\n    print(ans)\n\nmain()\n"}
{"label": 66, "index": 8526, "code": "X,A,B=map(int,input().split())\nif B-A<=0:\n  print(\"delicious\")\nelif B-A<=X:\n  print(\"safe\")\nelse:\n  print(\"dangerous\")"}
{"label": 66, "index": 8527, "code": "# coding: utf-8\nX, A, B = map(int, input().split())\n\nif abs(B) <= abs(A):\n    print('delicious')\n\nelif abs(A) < abs(B) <= abs(A + X):\n    print('safe')\n\nelif abs(X + A) < abs(B):\n    print('dangerous')"}
{"label": 66, "index": 8528, "code": "first = input()\nsplit_first = first.split()\n\nd = int(split_first[0])\na = int(split_first[1])\nb = int(split_first[2])\n\nif a >= b:\n   print ('delicious')\nelif b - a <= d:\n   print ('safe')\nelse:\n   print ('dangerous')"}
{"label": 66, "index": 8529, "code": "X,A,B = [int(i) for i in input().split(\" \")]\nif B-A <= 0 :\n    print('delicious')\nelif B-A <= X :\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8530, "code": "# encoding:utf-8\nX, A, B = list(map(int, input().split()))\nif B - A <= 0:\n\tprint(\"delicious\")\nelif B - A <= X:\n\tprint(\"safe\")\nelse:\n\tprint(\"dangerous\")\n"}
{"label": 66, "index": 8531, "code": "if(__name__==\"__main__\"):\n    X, A, B =[int(i) for i in input().split()]\n    #print(sum(a))\n    \n    if(A - B >= 0):\n        print(\"delicious\")\n    elif(abs(A - B) <= X):\n        print(\"safe\")\n    else:\n        print(\"dangerous\")"}
{"label": 66, "index": 8532, "code": "x,a,b = [int(x) for x in input().split()]\n\nif b <= a:\n\tprint('delicious')\nelif a < b <= a+x:\n\tprint('safe')\nelse:\n\tprint('dangerous')"}
{"label": 66, "index": 8533, "code": "X,A,B = map(int, raw_input().split())\n\nif B-A <= 0:\n    print 'delicious'\nelif B-A <= X:\n    print 'safe'\nelse:\n    print 'dangerous'\n"}
{"label": 66, "index": 8534, "code": "x,a,b=[int(i) for i in input().split()]\n\nif b-a<=0:\n print(\"delicious\")\nelif b-a<=x:\n print(\"safe\")\nelse:\n print(\"dangerous\")"}
{"label": 66, "index": 8535, "code": "# coding: utf-8\n\nx, a, b = map(int, raw_input().split())\n\nt = a - b\n\nif t >= 0:\n    print \"delicious\"\n    exit()\n\nif x+1 > -t:\n    print \"safe\"\nelse:\n    print \"dangerous\"\n"}
{"label": 66, "index": 8536, "code": "input_ = input().split(' ')\nX = int(input_[0])\nA = int(input_[1])\nB = int(input_[2])\nif B <= A:\n    print('delicious')\nelif  B <= A+X:\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8537, "code": "# -*- coding: utf-8 -*-                                      \n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nX, A, B = map(int, input().split())\n\nif   A >= B:     print(\"delicious\")\nelif A + X >= B: print(\"safe\")\nelse:           print(\"dangerous\")\n\n"}
{"label": 66, "index": 8538, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\nx, a, b = read_int_list()\nif x >= b:\n    print('delicious')\nelse:\n    if x >= b - a:\n        print('safe')\n    if x < b - a:\n        print('dangerous')\n"}
{"label": 66, "index": 8539, "code": "x,a,b = map(int,input().split())\nif b <= a:\n    print(\"delicious\")\nelif x >= b - a:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8540, "code": "x, a, b =map(int, input().split(\" \"))\nif a >= b:\n    print(\"delicious\")\nelif x + a >= b:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8541, "code": "# -*- coding: utf-8 -*-\n\ndigest_limit, days_ago, after_days = map(int, input().rstrip().split())\n\ndays_to_limit = after_days - days_ago\n\nif days_to_limit <= 0:\n    print('delicious')\nelif days_to_limit < digest_limit + 1:\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8542, "code": "X,A,B=map(int,input().split())\nif A-B>=0:\n  print(\"delicious\")\nelif B-A<=X:\n  print(\"safe\")\nelse:\n  print(\"dangerous\")"}
{"label": 66, "index": 8543, "code": "# 4 3 6\n\nx, a, b = map(int, input().split())\ny = (-a + b)\n\nif y <= 0:\n print(\"delicious\")\nelif y <= x:\n print(\"safe\")\nelse:\n print(\"dangerous\")"}
{"label": 66, "index": 8544, "code": "z =list(map(int,input().split(\" \")))\nd=z[2]-z[1]\nif d<=0:\n  print(\"delicious\")\nelif d<=z[0]:\n  print(\"safe\")\nelse:\n  print(\"dangerous\")"}
{"label": 66, "index": 8545, "code": "a,b,c=map(int,input().split())\nif b<c:\n    if c-b>a:\n        print(\"dangerous\")\n    else:\n        print(\"safe\")\nelse:\n    print(\"delicious\")"}
{"label": 66, "index": 8546, "code": "X, A, B = map(int, input().split())\nif A + X - B >= 0:\n    if A - B >= 0:\n        print('delicious')\n    else:\n        print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8547, "code": "x,a,b = map(int,input().split())\nif b-a > 0 and x < b-a:\n    print(\"dangerous\")\nelif b-a > 0 and x >= b-a:\n    print(\"safe\")\nelse:\n    print(\"delicious\")"}
{"label": 66, "index": 8548, "code": "X ,A , B = map(int, input().split())\n\nif A >= B:\n    print(\"delicious\")\nelif (B - A) <= X:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8549, "code": "X, A, B = [int(x) for x in input().split()]\nif A - B >= 0:\n\tprint(\"delicious\")\nelif X + A - B >= 0:\n\tprint(\"safe\")\nelse:\n\tprint(\"dangerous\")\n\n"}
{"label": 66, "index": 8550, "code": "def main():\n    x, a, b = map(int, input().split())\n    if b <= a: print(\"delicious\")\n    elif b <= a+x: print(\"safe\")\n    else: print(\"dangerous\")\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 66, "index": 8551, "code": "x, a, b = [int(i) for i in input().split()]\nif b - a <= 0:\n    print(\"delicious\")\nelif b - a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8552, "code": "# -*- coding: utf-8 -*-\n#\u98df\u54c1\u3092\u304a\u3044\u3057\u304f\u611f\u3058\u305f\u5834\u5408 delicious\n#\u304a\u3044\u3057\u304f\u306f\u611f\u3058\u306a\u304b\u3063\u305f\u304c\u304a\u8179\u306f\u58ca\u3055\u306a\u304b\u3063\u305f\u5834\u5408 safe\n#\u304a\u8179\u3092\u58ca\u3057\u305f\u5834\u5408 dangerous \u3092\u51fa\u529b\u305b\u3088\u3002\n\n#X\uff1a\u6d88\u8cbb\u671f\u9650\u904e\u304e\u3066\u3082OK\u65e5\u6570\n#A\uff1a\u6d88\u8cbb\u671f\u9650\u524dA\u65e5\u306b\u8cfc\u5165\n#B\uff1aA\u65e5\u306b\u8cfc\u5165\u5f8c\u3001\u98df\u3079\u305f\u65e5\u306fB\u65e5\u5f8c\n\nData = input().split()\n\nX = int(Data[0])\nA = int(Data[1])\nB = int(Data[2])\n\nset1 = A-B\n\nif set1 >= 0:\n    print(\"delicious\")\n\nelif X + set1 >= 0:\n    print(\"safe\")\n\nelse:\n    print(\"dangerous\")\n\n"}
{"label": 66, "index": 8553, "code": "X,A,B=[int(i) for i in input().split()]\nprint(\"delicious\" if B-A<=0 else \"safe\" if B-A<=X else \"dangerous\")"}
{"label": 66, "index": 8554, "code": "x,a,b=map(int,input().split())\n\nif b-a<=0:\n    print(\"delicious\")\nelif b-a<=x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8555, "code": "X, A, B = map(int, input().split())\n\nif B - A <= 0:\n    print('delicious')\nelif B - A <= X:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8556, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    for line in sys.stdin:\n        X, A, B = map(lambda x: int(x), line.split(\" \", 3))\n        if B <= A:\n            print(\"delicious\")\n        elif (B - A) <= X:\n            print(\"safe\")\n        else:\n            print(\"dangerous\")\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 66, "index": 8557, "code": "a = list(map(int, input().split(\" \")))\nx = a[0]\nA = a[1]\nB = a[2]\n\nkigen = A\nsafe = x + A\nif B <= kigen:\n    print(\"delicious\")\nelif B <= safe:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8558, "code": "\nX,A,B = input().split(' ')\nX = int(X)\nA = int(A)\nB = int(B)\nif A + X < B:\n    print('dangerous')\nelif B <= A:\n    print('delicious')\nelse:\n    print('safe')"}
{"label": 66, "index": 8559, "code": "x, a, b = map(int, input().split())\n\nif a >= b:\n    print('delicious')\nelif a + x >= b:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8560, "code": "X, A, B = map(int, input().split())\n\nif A >= B:\n    print('delicious')\n\nelif A + X >= B:\n    print('safe')\n\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8561, "code": "X, A, B = map(int, input().split())\nif B <= A:\n    print('delicious')\nelif A + X >= B:\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8562, "code": "# coding: utf-8\nx, a, b = map(int, input().split())\nif (b-a) <= 0:\n    print('delicious')\nelif (b-a) > 0 and (b-a) <= x:\n    print('safe')\nelif (b-a) > x:\n    print('dangerous')"}
{"label": 66, "index": 8563, "code": "x,a,b=map(int,input().split())\nif b<=a:print('delicious')\nelif b-a<=x:print('safe')\nelse :print('dangerous')"}
{"label": 66, "index": 8564, "code": "\n\nX, A, B = map(int, input().split())\n\nD = B - A\n\nif D <= 0:\n    print('delicious')\nelif D <= X:\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8565, "code": "X, A, B = map(int, input().split())\nif B-A>X:\n    print(\"dangerous\")\nelif A>=B:\n    print(\"delicious\")\nelse:\n    print(\"safe\")"}
{"label": 66, "index": 8566, "code": "x, a, b = map(int, input().split())\n\nif -a + b <= x:\n    if -a + b <= 0:\n        print('delicious')\n    else:\n        print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8567, "code": "X, A, B = map(int,input().split())\n\nif B <= A:\n    print(\"delicious\")\nelif B <= (A + X):\n    print(\"safe\")\nelif B >= (A + X):\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8568, "code": "def main():\n    X, A, B = list(map(int, input().strip().split()))\n    answer = \"\"\n    if -A + B <= 0:\n        print(\"delicious\")\n    elif -A + B <= X:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 66, "index": 8569, "code": "num=raw_input('')\nnumberdays=num.split(' ')\nif int(numberdays[2])-int(numberdays[1])>int(numberdays[0]):\n    print 'dangerous'\nif 0<int(numberdays[2])-int(numberdays[1])<=int(numberdays[0]):\n    print 'safe'\nif int(numberdays[2])-int(numberdays[1])<=0:\n    print 'delicious'"}
{"label": 66, "index": 8570, "code": "x, a, b = map(int, raw_input().split())\n\nif b - a <= 0:\n\tprint \"delicious\"\nelif b - a <= x:\n\tprint \"safe\"\nelse:\n\tprint \"dangerous\""}
{"label": 66, "index": 8571, "code": "X, A, B = map(int, raw_input().split())\nif B > A + X:\n    print \"dangerous\"\nelif B > A:\n    print \"safe\"\nelse:\n    print \"delicious\""}
{"label": 66, "index": 8572, "code": "#! /usr/bin/env python3\n\nX, A, B = map(int, input().split())\na = 0\nif B > A : a = 1\nif B > X + A : a = 2\nprint(['delicious', 'safe', 'dangerous'][a])"}
{"label": 66, "index": 8573, "code": "x, a, b = map(int, input().split())\nif a >= b:\n    print(\"delicious\")\nelif b - a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8574, "code": "X, A, B = map(int, input().split())\nif A >= B:\n    print(\"delicious\")\nelif B - A <= X:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8575, "code": "x, a, b = map(int, input().split())\n\nif a >= b:\n    print(\"delicious\")\nelif b - a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8576, "code": "from sys import stdin\nx,a,b = map(int,stdin.readline().split())\nans = 'safe'\nif b-a > x:\n ans = 'dangerous'\nelif b<=a:\n ans = 'delicious'\n\nprint ans"}
{"label": 66, "index": 8577, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nx,a,b = rli()\nif(a-b >= 0):\n    print(\"delicious\")\nelif(b-a <= x):\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8578, "code": "x, a, b = map(int, input().split())\n \nif b <= a:\n    print('delicious')\nelif (b-a) <= x:\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8579, "code": "X,A,B= map(int,input().split())\n\nif B <= A :\n    print(\"delicious\")\nelif X < B - A :\n    print(\"dangerous\")\nelse :\n    print(\"safe\")"}
{"label": 67, "index": 8580, "code": "n=int(input())\narr=[]\nfor _ in range(n):\n    arr.append(int(input())-1)\ncur=0\nfor i in range(n):\n    nxt = arr[cur]\n    if nxt==0:\n        print(-1)\n        break\n    elif nxt==1:\n        print(i+1)\n        break\n    cur=nxt\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8581, "code": "# -*- coding: utf-8 -*-\n\n#\u30dc\u30bf\u30f31\u2192\u3044\u308d\u3044\u308d\u3042\u3063\u3066\u30dc\u30bf\u30f32\u3067\u7d42\u308f\u308b\u306a\u3089\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u56de\u6570\u3001\u7121\u7406\u306a\u3089-1\u3092\u51fa\u529b\n\nN = int(input())\n\nBo = []\n\nfor i in range(N):\n    A = int(input())\n    Bo.append(A)\n\n\nS = Bo[0]\n\nif S == 2:\n    print(1)\n\nelse:\n    \n    ans = []\n    \n    for i in range(N):\n        S = Bo[S - 1]\n        \n        if S == 2:\n            C = i + 2\n            ans.append(C)\n        \n    if len(ans) != 0:\n        print(ans[0])\n    \n    else:\n        print(-1)\n\n  \n    "}
{"label": 67, "index": 8582, "code": "N = int(input())\na = [int(input()) for x in range(N)]\n\ncount = 1\nflag = False\nplace = 1\nfor i in range(N):\n    place = a[place-1]\n    if place == 2:\n        flag = True\n        print(count)\n        break\n    else:\n        count +=1\nif flag == False:\n    print(-1)"}
{"label": 67, "index": 8583, "code": "import sys\n\nN = int(input())\na = [int(i) for i in sys.stdin]\n    \ns = a[0]\ncnt = 1\n\nfor i in range(N):\n    if s == 2:\n        print(cnt)\n        exit()\n    cnt += 1\n    s = a[s-1]\n    \nprint(-1)"}
{"label": 67, "index": 8584, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    a_list = [int(input()) for _ in range(N)]\n    used = set()\n    now = 1\n    ans = 0\n    while True:\n        if now == 2:\n            print(ans)\n            return\n        now = a_list[now - 1]\n        if now in used:\n            print(-1)\n            return\n        used.add(now)\n        ans += 1\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 67, "index": 8585, "code": "def main():\n    N = int(input().strip())\n    a = [int(input().strip())\n         for i in range(N)]\n\n    b = 1\n    pushed = set()\n    push_count = 0\n    while True:\n        push_count += 1\n        pushed.add(b)\n        b = a[b - 1]\n        if b in pushed:\n            print(-1)\n            break\n\n        if b == 2:\n            print(push_count)\n            break\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 67, "index": 8586, "code": "# -*- coding: utf-8 -*-\n\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\nif 2 not in a:\n    print(-1)\nelse:\n    cnt = 0\n    before_num = 1\n    lighted_bottons = [0 for i in range(n + 1)]\n    while True:\n        cnt += 1\n        if a[before_num - 1] == 2:\n            print(cnt)\n            break\n        else:\n            if lighted_bottons[a[before_num - 1]] == 1:\n                print(-1)\n                break\n            before_num = a[before_num - 1]\n            lighted_bottons[before_num] = 1"}
{"label": 67, "index": 8587, "code": "n = int(input())\na = []\nfor _ in range(n):\n    s = int(input())\n    a.append(s-1)\n\nvis = [False for _ in range(n)]\n\nans = 0\nnow = 0\nwhile True:\n    if vis[now]:\n        ans = -1\n        break\n\n    vis[now] = True\n    ans += 1\n    now = a[now]\n    if now == 1:\n        break\n\nprint(ans)\n"}
{"label": 67, "index": 8588, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nN = int(input())\na = [int(input()) - 1 for i in range(N)]\n\nvisited = [False] * N\ncur = 0\ncnt = 0\nwhile True:\n    if visited[cur]:\n        print(-1)\n        exit(0)    \n    if cur == 1:\n        print(cnt)\n        exit(0)\n\n    visited[cur] = True    \n    cur = a[cur]\n    cnt += 1\n"}
{"label": 67, "index": 8589, "code": "N = int(input())\n\na_n=[int(input()) for i in range(N)]\nimport sys\n\ni=1\ncount=0\nfor k in range(N):\n    if a_n[i-1]==2:\n        count+=1\n        print(count)\n        sys.exit()\n    else:\n        i=a_n[i-1]\n        count+=1\n\nprint(-1)"}
{"label": 67, "index": 8590, "code": "def b():\n    N = int(input())\n    A = {i:int(input()) for i in range(1,N+1)}\n    tmp = 1; times = 0\n    for _ in range(N):\n        tmp = A[tmp]; times += 1\n        if tmp == 2:\n            print(times)\n            break\n        elif tmp == 1:\n            print(-1)\n            break\n    else:\n        print(-1)\n\n\nb()\n"}
{"label": 67, "index": 8591, "code": "N = int(input())\n\na = []\nfor _ in range(N):\n    a.append(int(input()))\n\nans = 1\nbutton = a[0]\nfor i in range(N):\n    if button == 2:\n        break\n    button = a[button-1]\n    ans += 1\n    \nif ans >= N+1:\n    print(-1)\nelse:\n    print(ans)"}
{"label": 67, "index": 8592, "code": "n = int(input())\na = [int(input()) if(i) else 0 for i in range(n+1)]\ndistance = [None] * (n+1)\nqueue = [(1, 0)]\nwhile(len(queue)):\n    p, d = queue.pop()\n    if(p==2):\n        print(d)\n        break\n    if(distance[p]!=None or d==100001):\n        print(-1)\n        break\n    distance[p] == d\n    nextp = a[p]\n    queue.append((nextp, d+1))\n"}
{"label": 67, "index": 8593, "code": "#x,a,b=[int(i) for i in input().split()]\n\nN=int(input())\na=[int(input()) for i in range(N)]\nlight=[0 for i in range(N)]\nlight[0]=1\npush=0\nbotton=0\n\nfor k in range(N):\n\n light[botton]=0\n light[a[botton]-1]=1\n\n botton=a[botton]-1\n push=push+1\n if light[1]==1:\n   print(push)\n   break\n\n\n\n\nif light[1]!=1:\n  print(-1)\n"}
{"label": 67, "index": 8594, "code": "N = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input()))\n    \ns = a[0]\ncnt = 1\n\nfor i in range(N):\n    if s == 2:\n        print(cnt)\n        exit()\n    cnt += 1\n    s = a[s-1]\n    \nprint(-1)"}
{"label": 67, "index": 8595, "code": "import sys\n\n\ndef main():\n    n = int(input())\n    buttons = [int(input()) for _ in range(n)]\n\n    def push(x):\n        return buttons[x - 1]\n\n    seq = [push(1)]\n\n    for _ in range(n):\n        if seq[-1] == 2:\n            print(len(seq))\n            return 0\n        seq += [push(seq[-1])]\n\n    print(-1)\n\n    return 0\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 67, "index": 8596, "code": "N = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input()))\n\ncnt = 0\ns = a[0]\n\nif s == 2:\n    print(cnt + 1)\nelse:\n    for i in range(N):\n        s = a[s-1]\n        cnt += 1\n        if s ==  2:\n            print(cnt + 1)\n            break\n        if i == N-1:\n            print('-1')"}
{"label": 67, "index": 8597, "code": "n = int(input())\narr = [int(input()) for i in range(n)]\npush = 1\ncount = 0\nwhile count <= n:\n    push = arr[push - 1]\n    count += 1\n    if push == 2:\n        print(count)\n        break\nelse:\n    print(-1)"}
{"label": 67, "index": 8598, "code": "n = int(input())\na_list = list([0])\nfor _ in range(n):\n    a_list.append(int(input()))\n    \ncount = 0\nbangou = 1\n\nwhile bangou > 0:\n    if a_list[bangou] == 0:\n        print(\"-1\")\n        break\n    bangou_next = a_list[bangou]\n    count += 1\n    if bangou_next == 2:\n        print(count)\n        break\n    \n    a_list[bangou] = 0\n    bangou = bangou_next\n"}
{"label": 67, "index": 8599, "code": "N = int(input())\nA = []\nfor i in range(N):\n\tA.append(int(input()))\ncnt = 0\nlight = 1\nfor i in range(N):\n\tcnt += 1\n\tlight = A[light - 1]\n\tif light == 2:\n\t\tbreak\n\nif cnt == N:\n\tprint(-1)\nelse:\n\tprint(cnt)"}
{"label": 67, "index": 8600, "code": "N = int(input())\na = [int(input()) for i in range(N)]\nc = 1\ntf = False\nfor i in range(N):\n    c = a[c-1]\n    if c == 2:\n        print(i+1)\n        tf = True\n        break\nif not tf:\n    print(-1)"}
{"label": 67, "index": 8601, "code": "N=int(input())\na=[int(input()) for _ in range(N)]\nb=[False]*N\ncount=0\ni=0\nb[i]=True\nflag=True\nwhile b[1]!=True:\n    if(b[a[i]-1]==True):\n        print(-1)\n        flag=False\n        break\n    b[a[i]-1]=True\n    i=a[i]-1\n    count+=1\nif flag:\n    print(count)"}
{"label": 67, "index": 8602, "code": "def solve():\n    n = int(input())\n    l = []\n\n    for i in range(n):\n        l.append(int(input()))\n\n    a = 1\n    hist = set([])\n    while(True):\n        if(a-1 in hist):\n            return -1\n        if(a-1 == 1):\n            return len(hist)\n        hist.add(a-1)\n        a = l[a-1]\n\nif(__name__ == \"__main__\"):\n    print(solve())\n"}
{"label": 67, "index": 8603, "code": "# coding: utf-8\n\nn = input()\na = [input() for _ in xrange(n)]\ni = 1\nc = 0\n\nwhile True:\n    a[i-1], i = 0, a[i-1]\n    c += 1\n\n    if i == 2:\n        print c\n        exit()\n\n    if a[i-1] == 0:\n        print -1\n        exit()\n"}
{"label": 67, "index": 8604, "code": "n = int(input())\na = []\nfor i in range(n):\n    a.append(int(input())-1)\n \nlight=0\n \nfor i in range(1,n+1):\n    light=a[light]\n    if light == 1:\n        print(i)\n        break\nelse:\n    print(-1)"}
{"label": 67, "index": 8605, "code": "N = int(input())\na = []\nfor i in range(N):\n  a.append(int(input())-1)\n\nnow = 0\ncnt = -1\nfor i in range(1, N):\n  now = a[now]\n  if(now == 1):\n    cnt = i\n    break\n\nprint(cnt)"}
{"label": 67, "index": 8606, "code": "n = int(raw_input())\nl = [[0,False]]\nfor _ in range(n):\n    l.append([int(raw_input()), False])\nl[1][1] = True\np = 1\nwhile True:\n    p = l[p][0]\n    if l[p][1] == True:\n        break\n    l[p][1] = True\n    if p == 2:\n        break\nif l[2][1] == True:\n    c = 0\n    for [_,f] in l:\n        if f == True:\n            c += 1\n    print c - 1\nelse:\n    print -1\n"}
{"label": 67, "index": 8607, "code": "n = int(input())\na_list = []\nfor i in range(n):\n    a_list.append(int(input()))\ncnt = 1\ni = 0\nwhile a_list[i] != 2:\n    i = a_list[i] - 1\n    cnt += 1\n    if len(a_list) < cnt:\n        cnt = -1\n        break\n\nprint(cnt)"}
{"label": 67, "index": 8608, "code": "N = int(input())\n\na = []\n\nfor i in range(N):\n    a.append(int(input()) - 1)\n\nc = a[0]\n\nfor i in range(N+1):\n    if c == 1:\n        print(i + 1)\n        break\n    c = a[c]\nelse:\n    print(-1)\n\n\n"}
{"label": 67, "index": 8609, "code": "import sys\n\nn=int(raw_input())\nl=[]\ncnt=0\nfor i in xrange(n):\n l.append(int(raw_input()))\nif l[0]==2:\n print 1\n sys.exit()\ni=0\ncnt=1\nnext=0\nwhile i<n:\n next=l[next]-1\n if l[next]==2:\n  print cnt+1\n  sys.exit()\n cnt+=1\n i+=1\nprint -1\n"}
{"label": 67, "index": 8610, "code": "n = int(input())\nls = []\nfor i in range(n):\n  ls.append([int(input())-1,False])\ncount = 0\nx = 0\nwhile (x != 1):\n  if ls[x][1]:\n    count = -1\n    break\n  else:\n    count += 1\n    ls[x][1] = True\n    x = ls[x][0]\nprint(count)"}
{"label": 67, "index": 8611, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import division, print_function\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = []\n    for _ in range(n):\n        a.append(int(sys.stdin.readline().strip()))\n\n    visited = set()\n\n    i = 0\n    counter = 0\n    while True:\n        if i in visited:\n            print(-1)\n            break\n        visited.add(i)\n        i = a[i] - 1\n        counter += 1\n        if i == 1:\n            print(counter)\n            break\n    #     pass\n    # a[0]\n    # if 2 not in a:\n    #     print(-1)\n    #     return\n    # print(n, a)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 67, "index": 8612, "code": "import sys\n\nN = int(input())\na = []\nfor i in range(N):\n    a.append(int(input()))\n\ncount = 0\nnow = 1\n\nwhile count < N:\n    count += 1\n    now = a[now - 1]\n    if now == 2:\n        print(count)\n        sys.exit()\n\nprint(-1)\n"}
{"label": 67, "index": 8613, "code": "N = int(input())\na = []\n\nfor i in range(N):\n    a.append(int(input()))\n\ni = 0\nnow = 0\nwhile True:\n    if now == 1:\n        print(i)\n        break\n    if i == N:\n        print(\"-1\")\n        break\n    now = a[now] - 1\n    i = i + 1"}
{"label": 67, "index": 8614, "code": "N = int(input())\na = [[int(input()), False] for i in range(N)]\n\n\nnum = 1\nfor i in range(N):\n    if a[num-1][1]:\n        print(-1)\n        break\n    if a[num-1][0] == 2:\n        print(i+1)\n        break\n    a[num-1][1] = True\n    num = a[num-1][0]"}
{"label": 67, "index": 8615, "code": "n = int(input()) \nxs = [int(input())-1 for i in range(n)]\nv = [False] * n\n\ni = 0\nans = 0\nwhile True:\n  if i == 1:\n    break\n  elif v[i]:\n    ans = -1\n    break\n  v[i] = True\n  ans += 1\n  i = xs[i]\n\nprint(ans)\n"}
{"label": 67, "index": 8616, "code": "N = int(input())\na = [input() for i in range(N)]\n\nnow = 1\ncount = 0\n\nfor i in range(N):\n    if now != 2:\n        now = int(a[now-1])\n        count += 1\n    else:\n        print(count)\n        break\n\nif count == N:\n    print(-1)\n"}
{"label": 67, "index": 8617, "code": "N = int(input())\na = [int(input()) - 1 for i in range(N)]\n\nbtn = 0\nhist = set()\nans = 0\nwhile True:\n    if btn == 1:\n        break\n\n    if btn in hist:\n        ans = -1\n        break\n\n    hist.add(btn)\n    btn = a[btn]\n    ans += 1\n\nprint(ans)\n"}
{"label": 67, "index": 8618, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc065.contest.atcoder.jp/tasks/abc065_b\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    N = int(input())\n    a = [int(input()) for _ in range(N)]\n    a.insert(0, '@')            #  1\u8d77\u7b97\u306b\u3059\u308b\u305f\u3081\u306e\u30c0\u30df\u30fc\n\n\n    possible = False\n    next_btn = a[1]\n    visited = set([1])\n    while next_btn not in visited:\n        if next_btn == 2:\n            possible = True\n            break\n        visited.add(next_btn)\n        next_btn = a[next_btn]\n    if possible:\n        print(len(visited))\n    else:\n        print(-1)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 67, "index": 8619, "code": "N=int(input())\na=list(int(input()) for i in range(N))\nj=0\ni=1\nwhile j < N:\n    i=a[i-1]\n    j+=1\n    if(i==2):\n        print(j)\n        break\nelse:\n    print(\"-1\")"}
{"label": 67, "index": 8620, "code": "n=int(input())\na=[]\nc=[0]*n\nfor i in range(n):\n    a.append(int(input()))\n\ncount=1\nans=0\n\nwhile c[1]==0:\n\n    if c[count-1] != 0:\n        print(-1)\n        exit()\n    else:\n        c[count-1]=1\n        count=a[count-1]\n        ans += 1\n\n\nprint(ans-1)\n\n\n\n    \n"}
{"label": 67, "index": 8621, "code": "N = int(raw_input())\na = [int(raw_input()) for i in xrange(N)]\ni = 0\nans = 0\nwhile True:\n    if a[i] == -1:\n        break\n    ni = a[i] - 1\n    a[i] = -1\n    i = ni\n    ans += 1\n    if i == 1:\n        break\nprint ans if a[i] != -1 else -1\n\n"}
{"label": 67, "index": 8622, "code": "#python\nimport sys\n\nN = input()\na = []\nfor i in range(N):\n\ta.append(input())\n#print a\n\nif 2 not in a:\n\tprint \"-1\"\n\tsys.exit()\n\ni=1\n\nwhile a[i-1]!=2:\n\n\tif a[i-1]==0:\n\t\tprint \"-1\"\n\t\tsys.exit()\n\n\t#print i,a[i-1]\n\tbefore=i\n\ti=a[i-1]\n\ta[before-1]=0\n\t#print a\n\t\n\nprint a.count(0)+1\n"}
{"label": 67, "index": 8623, "code": "N = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input()))\n\nidx = 0\nsuccess = False\nfor i in range(N):\n    idx = a[idx]-1\n    if idx == 1:\n        print(\"%d\"%(i+1))\n        success = True\n        break\n        \nif success == False:\n    print(\"%d\"%(-1))"}
{"label": 67, "index": 8624, "code": "n = int(input())\nli = []\n\nfor i in range(n):\n    a = int(input())\n    li.append(a)\n\ni = 0\nj = 0\ncount = 0\nans = 0\n\nwhile i >= 0:\n    if i == 1:\n        ans += 1\n        break\n    else:\n        j = i\n        i = li[i] - 1\n        count += 1\n        li[j] = 0\nif ans == 1:\n    print(count)\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8625, "code": "N=int(input())\nA=[ int(input()) - 1 for _ in range(N) ]\nB=[ False ] * N\n\nans = 0\ni=0\nwhile True:\n  if B[i]:\n    ans = -1\n    break\n  if i == 1:\n    break\n  B[i] = True\n  i = A[i]\n  ans += 1\nprint(ans)\n"}
{"label": 67, "index": 8626, "code": "import sys\nN=int(input())\na=[int(input()) for i in range(N)]\ni=1\ns=1\nwhile i<N:\n  if a[s-1]==2:\n    print(i)\n    sys.exit()\n  s=a[s-1]\n  i+=1\n  \nprint(-1)"}
{"label": 67, "index": 8627, "code": "n = int(input())\nbuttons = []\nfor _ in range(n):\n    buttons.append(int(input()))\ndef calc():\n    count = 0\n    now = 1\n    flag = True\n    for i in range(n):\n        if not flag:\n            pass\n        elif now == 2:\n            print(count)\n            flag = False\n        else:\n            now = buttons[now-1]\n        count += 1\n    if flag:\n        print(-1)\n\ncalc()"}
{"label": 67, "index": 8628, "code": "import collections\n\nN = int(input())\na = collections.deque()\nfor i in range(N):\n    a.append(int(input()))\n    \ns = a[0]\ncnt = 1\n\nfor i in range(N):\n    if s == 2:\n        print(cnt)\n        exit()\n    cnt += 1\n    s = a[s-1]\n    \nprint(-1)"}
{"label": 67, "index": 8629, "code": "N = int(raw_input())\nA = [int(raw_input()) - 1 for _ in range(N)]\n\nans = 0\ni = 0\nused = set([0, 1])\nwhile True:\n    if ans != 0 and i in used:\n        break\n    used.add(i)\n    i = A[i]\n    ans += 1\nif i != 1:\n    ans = -1\nprint ans\n"}
{"label": 67, "index": 8630, "code": "if __name__ == \"__main__\":\n    N = int(input())\n    a = [int(input()) for _ in range(N)]\n\n    index = 0\n    count = 0\n    number = 1\n    flags = [0 for _ in range(N)]\n    flags[index] = 1\n    while(number != 2):\n        number = a[index]\n        index = number - 1\n        count += 1\n        if flags[index] == 1:\n            break\n        else:\n            flags[index] = 1\n\n    if number == 2:\n        print(count)\n    else:\n        print(-1)"}
{"label": 67, "index": 8631, "code": "n = int(input())\na = [int(input()) for i in range(n)]\ncounter = 0\ni = 1\nwhile counter <= n:\n    i = a[i - 1]\n    counter += 1\n    if i == 2:\n        print(counter)\n        break\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8632, "code": "if __name__ == \"__main__\":\n    N = int(input())\n    A = []\n    for x in range(N):\n        y = int(input())\n        y -= 1\n        A.append(y)\n    pos = 0\n    cnt = 0\n    visited = set()\n    while (cnt <= N + 1):\n        visited.add(pos)\n        if (pos == 1):\n            print (cnt)\n            exit()\n        pos = A[pos]\n        cnt += 1\n        if pos in visited:\n            break\n\n    print (-1)\n"}
{"label": 67, "index": 8633, "code": "N = int(input())\na = [0]\nfor i in range(N):\n    a.append(int(input()))\nhaspushed = [0]*(N+1)\nreach = 0\nitr = 1\ni = a[1]\nhaspushed[1] = 1\nwhile haspushed[i] == 0:\n    haspushed[i] = 1\n    if i == 2:\n        reach=1\n        break\n    i = a[i]\n    itr += 1\n\nif reach == 1:\n    print(itr)\nelse:\n    print(-1)"}
{"label": 67, "index": 8634, "code": "def solve(nexts):\n    pushed = {0}\n    now_on = 0\n    count = 0\n    while True:\n        now_on = nexts[now_on]\n        count += 1\n        if now_on in pushed:\n            return -1\n        if now_on == 1:\n            return count\n        pushed.add(now_on)\n\n\nn = int(input())\nprint(solve([int(input()) - 1 for _ in range(n)]))\n"}
{"label": 67, "index": 8635, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\n\ndef main():\n    n = I()\n    a = [I()-1 for _ in range(n)]\n    f = [False] * n\n    t = 0\n    c = 0\n    while True:\n        if t == 1:\n            return c\n        if f[t]:\n            return -1\n        f[t] = True\n        t = a[t]\n        c += 1\n\n\nprint(main())\n\n\n\n\n\n\n"}
{"label": 67, "index": 8636, "code": "# -*- coding: utf-8 -*-\na = {}\nN = int(input())\nfor i in range(N):\n    a[i+1] = (int(input()))\n\nlight = 1\ncount = 0\nwhile count < N:\n    \n    light = a[light]\n    count += 1\n\n    if light == 2:\n        print(count)\n        break\n\n    if count == N-1:\n        print(-1)\n        break\n"}
{"label": 67, "index": 8637, "code": "n = int(input())\na = [int(input()) for i in range(n)]\ncount = 0\nt = 0\nb = 0\n\nfor i in range(n) :\n    a[i] = a[i] - 1\nfor i in range(n) :\n    count = count + 1\n    if a[t] == 1 :\n        print (count)\n        b = 1\n        break\n    else :\n        t = a[t]\nif b == 0 :\n    print (-1)"}
{"label": 67, "index": 8638, "code": "n = int(input())\na = [int(input()) for i in range(n)]\nmemo = [0 for i in range(n+1)]\n\nind = 0\ncnt = 0\nwhile 1:\n    nex = a[ind]\n    cnt += 1\n    if nex == 2:\n        print(cnt)\n        break\n    if memo[nex] == 1:\n        print(-1)\n        break\n    memo[nex] = 1\n    ind = nex-1"}
{"label": 67, "index": 8639, "code": "# -*- coding:utf-8 -*-\nimport sys\nbutton = [int(i) for i in sys.stdin]\nnow = 1\ncount = 0\nfor i in range(button[0]):\n  if now == 2:\n    print(count)\n    exit()\n  now = button[now]\n  count += 1\nprint(-1)"}
{"label": 67, "index": 8640, "code": "n = int(input())\na = [int(input()) for i in range(n)]\n\nx = 1\ni = 0\n\nwhile i < 100000 and x != 2:\n    x = a[x-1]\n    i += 1\n\nif x == 2:\n    print(i)\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8641, "code": "if(__name__==\"__main__\"):\n    N = int(input())\n    a =[int(input()) for i in range(N)]\n        \n    n = -1\n    flash = 0\n    for i in range(N):\n        flash = a[flash] - 1\n        if(flash == 1):\n            n = i + 1\n            break\n    \n    print(n)"}
{"label": 67, "index": 8642, "code": "N = int(raw_input())\na = []\nfor i in range(N):\n\ta.append(raw_input())\n#print a\nfor i in range(N):\n\ta[i] = int(a[i])\ncnt = 0\ntrn = 0\nwhile trn != 1:\n\tif trn == -2:\n\t\tcnt = -1\n\t\tbreak\n\t#print a\n\n\thako = trn\n\ttrn = a[trn] - 1\n\ta[hako] = -1\n\tcnt += 1\n\t\nprint cnt\n"}
{"label": 67, "index": 8643, "code": "N = int(input())\nbuttons = [int(input()) for i in range(N)]\nlight_offset = 0\ncnt = 0\n\nwhile True:\n    \n    if light_offset == 1:\n        print(cnt)\n        break\n    light_offset = buttons[light_offset] - 1\n    cnt += 1\n    \n    if cnt > N:\n        print(-1)\n        break\n    "}
{"label": 67, "index": 8644, "code": "n = int(input())\nlight = 1\ncount = 0\na = []\nfor i in range(n):\n    a.append(int(input()))\nwhile count < n:\n    light = a[light-1]\n    count += 1\n    if light == 2:\n        print(count)\n        quit()\nprint(-1)\n"}
{"label": 67, "index": 8645, "code": "x = input()\na = []\ncheck = []\nfor i in range(int(x)):\n    a.append(int(input()) - 1)\n    check.append(1)\n\nindex = 0\ncount = 0\n\n\nwhile True:\n    count += 1\n    check[index] = 0\n    index = a[index]\n\n    if check[index] == 0:\n        print(-1)\n        break\n    if index == 1:\n        print(count)\n        break\n"}
{"label": 67, "index": 8646, "code": "def solve():\n    n = int(input())\n    lst = [int(input())-1 for _ in[0]*n]\n    visit = set()\n    current = 0\n    while True:\n        visit.add(current)\n        current = lst[current]\n        if current == 1:\n            print(len(visit))\n            break\n        if current in visit:\n            print(-1)\n            break\n\nif __name__==\"__main__\":\n    solve()"}
{"label": 67, "index": 8647, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\nn = read_int()\na = [read_int() -1 for i in range(n)]\nres = -1\ns = set()\ni = 0\nstep = 1\nwhile a[i] not in s:\n    if a[i] == 1:\n        res = step\n    s.add(a[i])\n    i = a[i]\n    step += 1\nprint(res)\n"}
{"label": 67, "index": 8648, "code": "def main():\n    n = int(input())\n    a_list = [int(input()) for _ in range(n)]\n\n    idx, flag = 1, 1\n    for i in range(1, n+1):\n        idx = a_list[idx-1]\n        if idx == 2:\n            print(i)\n            flag = 0\n            break\n\n    if flag: print(-1)\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 67, "index": 8649, "code": "n = int(input())\nbutton = [int(input()) for i in range(n)]\n\nflag = False\npush = button[0]\nnext_b = button[push-1]\ncnt = 0\nfor i in range(n):\n    cnt += 1\n    if push == 2:\n        flag = True\n        break\n    push = button[push-1]\n    next_b = button[push-1]\n\nif flag:\n    print(cnt)\nelse:\n    print(-1)"}
{"label": 67, "index": 8650, "code": "N=int(input())\na=[int(input()) for i in range(N)]\nb=[]\nj=1\nk=1\nc=1\nif 2 not in a:\n    print(-1)\nelse:\n    while j in range(1,N+1):\n         c += 1\n         if a[k-1]==1:\n                 print(-1)\n                 break\n         elif a[k-1]==2:\n                 print(c-1)\n                 break\n         else:\n            j += 1\n            k = a[k-1]\n    if c>=(N+1):\n        print(-1)"}
{"label": 67, "index": 8651, "code": "if __name__ == '__main__':\n    N = int(input())\n    a = [-1]\n    for i in range(N):\n        a.append(int(input()))\n\n    count_num = 1\n    next_num = a[1]\n    done_num = set([1])\n    while True:\n        if next_num in done_num:\n            print(-1)\n            break\n        elif next_num == 2:\n            print(count_num)\n            break\n\n        count_num += 1\n        done_num.add(next_num)\n        next_num = a[next_num]\n"}
{"label": 67, "index": 8652, "code": "from collections import defaultdict, deque\nimport sys\n\nN = int(input())\nd = defaultdict(int)\nfor i in range(N):\n    d[i+1] = int(input())\n\n#print(d)\n\nq = deque()\nq.append(1)\n\npoint = 1\ncount = 1\n\nwhile N > 0:\n    if d[point] == 2:\n        print(count)\n        sys.exit()\n        \n    q.append(d[point])\n    point = d[point]\n    count += 1\n    N -= 1\n\nprint(-1)"}
{"label": 67, "index": 8653, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nn = ri()\ns = [-1]\nans = 0\nlight = 1\nflag = False\nfor i in range(n):\n    s.append(ri())\nfor i in range(n):\n    ans += 1\n    light = s[light]\n    if(light == 2):\n        flag = True\n        break\nprint(ans if(flag) else -1)"}
{"label": 67, "index": 8654, "code": "def main():\n    N = int(input())\n    A = tuple([int(input()) for _ in range(N)])\n\n    a = list(A)\n    ans = 0\n    try:\n        idx = a.index(1)\n    except:\n        idx = 0\n        ans += 1\n\n    while True:\n        btn = a[idx]\n        if btn == 0:\n            ans = -1\n            break\n        elif btn == 2:\n            break\n        a[idx] = 0\n        idx = btn - 1\n        ans += 1\n\n    print(ans)\n\nmain()\n"}
{"label": 67, "index": 8655, "code": "# -*- coding:utf-8 -*-\nimport sys\nN = int(input())\na = [ int(input()) for tmp in range(N) ]\nans = 0\nindex = 0\nwhile ans < len(a):\n    sav = index #last index\n    index = a[sav]-1 #new index\n    ans += 1\n    if index == 1:\n        print(ans)\n        sys.exit()\n    if a[index] == sav+1: #Loop\n        print(\"-1\")\n        sys.exit()\nprint(\"-1\")"}
{"label": 67, "index": 8656, "code": "#coding=UTF-8\n\nN=int(input())\na=[]\n\nfor idx in range(0,N,1):\n    a.append(int(input())-1)\n\n\nlit=0\nlength=0\nans=None\nfor idx in range(0,N,1):\n    lit=a[lit] #press\n    length+=1\n    if lit == 2-1:\n        ans=True\n        break\n        \n\n\n\nif ans:\n    print(length)\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8657, "code": "n = int(input())\na = [0]\nfor i in range(n):\n    a.append(int(input()))\n\ncnt = 1\nidx = 1\nfor i in range(n):\n    if a[idx] == 2:\n        print(cnt)\n        break\n\n    else:\n        idx = a[idx]\n        cnt += 1\nelse:\n    print(-1)"}
{"label": 67, "index": 8658, "code": "N = int(input())\na=[input() for i in range(N)]\na=[int(i) for i in a]\na=[0]+a\n\nflg=[0]*(N+1)\ncount=0\ni=1\n\nwhile count<N:\n    if i==2:\n        print(count)\n        quit()\n    i=a[i]\n    count+=1\n\nprint('-1')\nquit()\n"}
{"label": 67, "index": 8659, "code": "def ini(): return int(input())\ndef inli(): return list(map(int, input().split()))\ndef inf(): return float(input())\ndef inlf(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\nn =ini()\na=[]\nb = [0 for i in range(n)]\nfor i in range(n):\n    a.append(ini())\n\nj = 1\nans = 0\nwhile j !=2:\n    if b[j-1] !=0:\n        ans = -1\n        break\n    ans +=1\n    b[j-1] +=1\n    j = a[j-1]\n\nprint(ans)"}
{"label": 67, "index": 8660, "code": "N = input()\narr = [input()-1 for i in range(N)]\n\nnow = 0\ncount = 0\nwhile (now != 1):\n    count += 1\n    now = arr[now]\n    if count > 100000:\n        count = -1\n        break\nprint count\n"}
{"label": 67, "index": 8661, "code": "import sys\nN = int(input())\nls = []\nfor i in range(N):\n    ls.append(int(input()))\ni = 0\ncnt = 1\nwhile(cnt <= N):\n    k = ls[i]\n    if (k == 2):\n        print(cnt)\n        sys.exit()\n    cnt += 1\n    i = k-1\nprint(-1)"}
{"label": 67, "index": 8662, "code": "import numpy as np\nN = int(input())\na = np.zeros(N+1)\nfor i in range(N):\n    a[i+1] = int(input())\ni = 1\nn = 0\nfor j in range(N):\n    n = n+1\n    i = a[i]\n    if i == 2:\n        print(n)\n        break\nif i!=2:\n    print(-1)"}
{"label": 67, "index": 8663, "code": "N = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input()))\n    \ns = a[0]\ncnt = 1\n\nfor i in range(N):\n    if s == 2:\n        print(cnt)\n        exit()\n    cnt += 1\n    s = a[s-1]\n    \nprint(-1)"}
{"label": 67, "index": 8664, "code": "import sys\ninput = sys.stdin.readline\ndef main():\n  N = int(input())\n  al = []\n  for _ in range(N):\n    al.append(int(input())-1)\n  bl = [False]*N\n  i = 0\n  nb = 0\n  while bl[i] == False:\n    bl[i] = True\n    i = al[i]\n    nb += 1\n    if i == 1:\n      print(nb)\n      break\n  else:\n    print(-1)\n\nmain()"}
{"label": 67, "index": 8665, "code": "import sys\n\nN = int(input())\na=[]\na.append(0)\n\nfor i in range(N):\n    a.append(int(input()))\n\nb=[]\nfor i in range(N+1):\n    b.append(1)\n\nindex=1\ncounter=1\nif a[1]==2:\n    print(1)\n    sys.exit()\n\nwhile True:\n    counter+=1\n    b[index]=-1\n    index = a[index]\n    if b[index]==-1:\n        print(-1)\n        break\n    if a[index]==2:\n        print(counter)\n        break\n"}
{"label": 67, "index": 8666, "code": "N = int(input())\npushed = {0}\nb = [int(input())-1 for _ in [None]*N]\nc = 0\ncnt = 0\n\nwhile True:\n    c = b[c]\n    cnt += 1\n    if c in pushed:\n        print(-1)\n        exit()\n    if c == 1:\n        print(cnt)\n        exit()\n    pushed.add(c)"}
{"label": 67, "index": 8667, "code": "n = int(input())\ncontroller = [int(input()) for _ in range(n)]\nseq = []\nbutton = controller[0]\nseq.append(1)\n\nfor i in range(n):\n    if button == 2:\n        print(len(seq))\n        exit(0)\n    button = controller[button - 1]\n    seq.append(button)\n\nprint(-1)\n"}
{"label": 67, "index": 8668, "code": "N = int(input())\n\njmps = [int(input()) - 1 for _ in range(N)]\n\nnow = 0\nans = 0\nfor i in range(N):\n    if now == 1:\n        ans = i\n        break\n    now = jmps[now]\n\nans = ans or -1\nprint(ans)\n"}
{"label": 67, "index": 8669, "code": "N = int(input())\na = [int(input()) for i in range(N)]\nch = [0] * (10**5 + 1)\nnumB = 1\nch[1] = numB\nc = 1\nwhile True:\n    numB = a[numB-1]\n    if numB == 2:\n        print(c)\n        break\n    if ch[numB] == 1:\n        print(-1)\n        break\n    c += 1\n    ch[numB] = 1\n"}
{"label": 67, "index": 8670, "code": "n = int(input())\ninp = [int(input()) for i in range(n)]\n\nchecked = [0 for _ in range(n)]\n\ncnt = 0\nlight = 0\n\nwhile(True):\n    if checked[light]:\n        print(-1)\n        break\n    checked[light] = True\n    light = inp[light] - 1\n    cnt += 1\n    if light == 1:\n        print(cnt)\n        break\n"}
{"label": 67, "index": 8671, "code": "n = int(input())\nbtns = [None]*n\nfor i in range(n):\n    btns[i] = int(input())\ncnt = 0\nnb = 1\nwhile nb != 2:\n    cnt += 1\n    nb = btns[nb-1]\n    if cnt > n:\n        break\nif cnt > n:\n    print(-1)\nelse:\n    print(cnt)\n"}
{"label": 67, "index": 8672, "code": "# coding: utf-8\nimport sys\nbot = [ int(i) for i in sys.stdin ]\nnow = bot[1]\ncount = 1\nfor i in range(bot[0]):\n    if now == 2:\n        print(count)\n        exit()\n    count += 1\n    now =  bot[now]\nprint(-1)"}
{"label": 67, "index": 8673, "code": "n = int(input())\na = [int(input()) for i in range(n)]\ni = 1\ncount = 0\n\nwhile True:\n    i = a[i-1]\n    count += 1\n    if i == 1 or count == n+1:\n        print(-1)\n        break\n    elif i == 2:\n        print(count)\n        break"}
{"label": 67, "index": 8674, "code": "n=int(input())\na=[0]*100097\n\nfor i in range(n):\n  a[i+1]=int(input())\n\ncnt=0\nneedle=1\nwhile not(needle==2 or cnt >100097):\n  needle=a[needle]\n  cnt+=1\n\nif cnt>100001:\n  cnt=-1\nprint(cnt)"}
{"label": 67, "index": 8675, "code": "N=int(input())\na= [int(input()) for i in range(N)]\npush=1\ncount=0\nwhile count<=N:\n push=a[push-1]\n count+=1\n if push==2:\n  print (count)\n  break\nelse:\n print (-1)"}
{"label": 67, "index": 8676, "code": "import sys\n\nN = int(input())\na=[0]\nfor i in range(N):\n    a.append(int(input()))\n\nlight = 1\nfor i in range(N):\n    if light == 2:\n        print(i)\n        break\n    light = a[light]\n\nif light != 2:\n    print(-1)"}
{"label": 67, "index": 8677, "code": "n = int(input())\na = []\nfor i in range(n):\n\ta.append(int(input()))\n\npast = [0 for _ in range(n)]\n\ncnt = 0\nnow = 1\n\nwhile(True):\n\tif past[now-1] == 1:\n\t\tprint(-1)\n\t\texit(0)\n\tif now == 2:\n\t\tprint(cnt)\n\t\texit(0)\n\tpast[now-1] = 1\n\tcnt += 1\n\tnow = a[now-1]"}
{"label": 67, "index": 8678, "code": "n = int(input())\nl = []\nfor _ in range(n):\n\tl.append(int(input()))\n\ncount = 0\npoint = 0\n\nwhile True:\n\tnumber = l[point]-1\n\tl[point] = 1\n\tpoint = number\n\tcount += 1\n\tif number == 1:\n\t\tbreak\n\telif number == 0:\n\t\tcount = -1\n\t\tbreak\n\nprint(count)"}
{"label": 67, "index": 8679, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    N = sys.stdin.readline()\n    while N:\n        A = [int(raw_input()) - 1 for i in xrange(0, int(N))]\n\n        counter = 0\n        visited = set()\n        index = 0\n        while index != 1 and index not in visited:\n            visited.add(index)\n            counter += 1\n            index = A[index]\n\n        if index != 1:\n            counter = -1\n        print(\"{0}\".format(counter))\n\n        N = sys.stdin.readline()\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 67, "index": 8680, "code": "N = int(input())\na = []\nfor i in range(N):\n    a.append(int(input()))\n\nn = 1\nsaw = [0] * N\nnow = 1\n\nwhile True:\n    if a[now-1] == 2:\n        break\n    else:\n        if saw[a[now-1]-1] == 1:\n            n = -1\n            break\n        else:\n            now = a[now-1]\n            saw[now-1] = 1\n            n += 1\n\nprint(n)\n"}
{"label": 67, "index": 8681, "code": "import sys\na = [int(i) for i in sys.stdin]\nnow = a[1]\ncount = 0\nwhile count!=a[0]:\n    count += 1\n    if now == 2:\n        print(count)\n        exit()\n    now = a[now]\nprint(-1)\n"}
{"label": 67, "index": 8682, "code": "N = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input())-1)\n\ntmp = a[0]\nans = 1\nfor i in range(N+1):\n    if tmp == 1:\n        print(ans)\n        break\n    tmp = a[tmp]\n    ans += 1\nelse:\n    print(-1)"}
{"label": 67, "index": 8683, "code": "# coding: utf-8\n\nn = int(input())\nls = []\nfor i in range(n):\n    ls.append(int(input()))\nlighted = [False for i in range(n)]\ninx = 1\nlighted[0] = True\ncnt = 0\nwhile 1:\n    dest = ls[inx - 1]\n    if not lighted[dest - 1]:\n        if dest == 2:\n            cnt += 1\n            break\n        else:\n            lighted[dest - 1] = True\n    else:\n        cnt = -1\n        break\n    inx = dest\n    cnt += 1\n    \nprint(cnt)\n\n"}
{"label": 67, "index": 8684, "code": "n = int(input())\nbuttons = [int(input()) for i in range(n)]\npushing = 1\ncounter = 0\nwhile counter <= n:\n    pushing = buttons[pushing - 1]\n    counter += 1\n    if pushing == 2:\n        print(counter)\n        break\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8685, "code": "N = int(input())\nbota = [int(input()) for i in range(N)]\ncnt = 1\nmov = bota[0]\nwhile(N > 0):\n    if mov == 2:\n        print(cnt)\n        break\n    else:\n        mov = bota[mov-1]\n        cnt +=1\n        N -= 1\nelse:\n    print(-1)"}
{"label": 67, "index": 8686, "code": "N=int(raw_input())\na=[-1]\nfor _ in range(N):\n    a.append(int(raw_input()))\n \n \ni=1\nc=0\nwhile(1):\n    if i==2:\n        print c\n        break\n    elif c>=N:\n        print -1\n        break\n    c+=1\n    i=a[i]\n            "}
{"label": 67, "index": 8687, "code": "n = int(input())\na = [int(input()) for i in range(n)]\n\nx = 1\ny = [0] * n\n\nwhile y[x-1] != 2 and x != 2:\n    y[x-1] += 1\n    x = a[x-1]\n\nif x == 2:\n    print(y.count(1))\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8688, "code": "N = int(input())\na = [int(input())-1 for i in range(N)]\ncnt = 0\ni = 0\nwhile i != 1:\n    i = a[i]\n    cnt += 1\n    if cnt == N:\n        break\nif cnt == N:\n    print(-1)\nelse:\n    print(cnt)"}
{"label": 67, "index": 8689, "code": "#Trained?\nimport numpy as np\nN = int(input())\na = []\nfor i in range(N):\n    a.append(int(input()))\n    \np=1\ncnt=0\nwhile 1:\n    cnt+=1\n    p = a[p-1]\n    if(p==2):\n        print(cnt)\n        break\n    if(cnt>N):\n        print(-1)\n        break"}
{"label": 67, "index": 8690, "code": "N = int(input())\na = []\nfor i in range(N):\n    a.append(int(input()))\n\nused = set()\nnow = 1\nret = 0\nwhile True:\n    if now == 2:\n        print(ret)\n        exit()\n    elif now in used:\n        print(-1)\n        exit()\n    used.add(now)\n    now = a[now - 1]\n    ret += 1\n"}
{"label": 67, "index": 8691, "code": "N = int(raw_input())\na = [int(raw_input()) for _ in range(N)]\n\nflag = [False] * N\n\ncurrent = 1\ncount = 0\n\nfor i in range(N):\n    count += 1\n    current = a[current - 1]\n    if current == 2:\n        break\n    elif i == (N - 1):\n        count = -1\n    elif flag[current - 1]:\n        count = -1\n        break\n    else:\n        flag[current - 1] = True\n\nprint(count)"}
{"label": 67, "index": 8692, "code": "N = int(input())\na = [int(input())-1 for i in range(N)]\n\ncount=0\nnext_push=0\nwhile(next_push != 1 and count < 1e5+1):\n    next_push = a[next_push]\n    count += 1\n\nif count > 1e5:\n    print(-1)\nelse:\n    print(count)"}
{"label": 67, "index": 8693, "code": "N = int(input())\n\njmps = []\nfor _ in range(N):\n    jmps.append(int(input()) - 1)\n\nnow = 0\nans = 0\nfor i in range(N):\n    if now == 1:\n        ans = i\n        break\n    now = jmps[now]\n\nans = ans or -1\nprint(ans)"}
{"label": 67, "index": 8694, "code": "N = int(input())\nA = [int(input()) - 1 for _ in range(N)]\nnow = 0\nse = set([])\nans = 0\n\nwhile True:\n    if now == 1:\n        break\n    now = A[now]\n    if now in se:\n        print(-1)\n        exit()\n    se.add(now)\n    ans += 1\nprint(ans)\n"}
{"label": 67, "index": 8695, "code": "from sys import stdin \na = [0]\nn = int(stdin.readline())\nfor _ in xrange(n):\n a.append(int(stdin.readline()))\nans = -1\ncur = 0\nx = 1\ns = set()\nwhile True:\n if x in s:\n  break\n if x==2:\n  ans = cur\n  break\n s.add(x)\n cur+=1\n x = a[x]\nprint ans"}
{"label": 67, "index": 8696, "code": "n = int(input())\na = [0] + [int(input()) for i in range(n)]\n\nend = {}\n\nend[1] = True\nto = a[1]\n\ncnt = 0\nwhile True:\n    cnt += 1\n    if to == 2:\n        print(cnt)\n        __import__(\"sys\").exit()\n    if end.get(to) == None:\n        end[to] = True\n        to = a[to]\n    else:\n        break\n\nprint(-1)\n"}
{"label": 67, "index": 8697, "code": "# -*- coding: utf-8 -*-\n\nN = input()\na = []\nfor i in range(N):\n    a.append(input())\n\ni=1\nc=0\n\nwhile(1):\n    if i == 2:\n        print c\n        break\n    elif c >= N:\n        print -1\n        break\n    c+=1\n    i=a[i-1]\n"}
{"label": 67, "index": 8698, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    N = int(input())\n\n    A = [None]\n    for _ in range(N):\n        A.append(int(input()))\n\n    pressed = [False] * (N+1)\n    button = 1\n    cnt = 0\n    while not pressed[button]:\n        pressed[button] = True\n        cnt += 1\n        button = A[button]\n        if button == 2:\n            print(cnt)\n            return\n\n    print(-1)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 67, "index": 8699, "code": "n = int(input())\narr = [int(input()) for i in range(n)]\npush = 1\ncount = 0\nwhile count <= n:\n    push = arr[push - 1]\n    count += 1\n    if push == 2:\n        print(count)\n        break\nelse:\n    print(-1)"}
{"label": 67, "index": 8700, "code": "N = int(input())\na = []\nfor i in range(N):\n    a.append(int(input()))\nx = [False]*N\nn,i = (0, 0)\nwhile x[n] == False:\n    x[n] = True\n    n = a[n]-1\n    i+=1\n    if n==1:\n        print(i)\n        break\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8701, "code": "def training():\n\tN = int(input())\n\n\tA = [0]\n\n\tfor i in range(N):\n\t\tA.append(int(input()))\n\n\tcounter = 1\n\tindex = 1\n\t#judge = [1]\n\tif A[index] == 2:\n\t\tprint(counter)\n\t\treturn\n\tcounter += 1\n\tindex = A[index]\n\tfor i in range(N):\n\t\t#if A[index] in judge:\n\t\t\t#print(\"-1\")\n\t\t\t#return\n\t\tif A[index] == 2:\n\t\t\tprint(counter)\n\t\t\treturn\n\t\tcounter += 1\n\t\t#judge.append(A[index])\n\t\tindex = A[index]\n\tprint(\"-1\")\n\t\n\ntraining()\n\t"}
{"label": 67, "index": 8702, "code": "#coding: utf-8\nimport sys\nN = int(input())\na = [int(input()) for _ in range(N)]\np = 1\nfor i in range(N):\n    if p == 2:\n        print(i)\n        sys.exit()\n    p = a[p-1]\nprint(-1)\n"}
{"label": 67, "index": 8703, "code": "n = input()\nl = []\n\nfor i in range(n):\n\ta = input()\n\tl.append(a)\n\ncount = 0\nb = 1\nwhile b != 2 and count <= n:\n\tcount += 1\n\tb = l[b - 1]\n\nif count > n:\n\tprint -1\nelse:\n\tprint count"}
{"label": 67, "index": 8704, "code": "n = int(raw_input())\nlst = []\nbtn = []\nfor i in range(0, n):\n\tlst.append(True)\n\tbtn.append(int(raw_input()))\ntmp = 0\ncnt = 0\nwhile lst[tmp]:\n\tlst[tmp] = False\n\tif tmp == 1:\n\t\tbreak\n\telif lst[btn[tmp]-1]:\n\t\tcnt += 1\n\telse:\n\t\tcnt = -1\n\ttmp = btn[tmp]-1\n\nprint cnt\n"}
{"label": 67, "index": 8705, "code": "import sys\n\nn = int(input())\na = [int(x) for x in sys.stdin]\n\nx = 1\ni = 0\n\nwhile i < n and x != 2:\n    x = a[x-1]\n    i += 1\n\nif x == 2:\n    print(i)\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8706, "code": "\nimport sys\n\nN = int(input())\nd = {}\nfor i in range(N):\n    d[i+1] = int(input())\n\nx = 1\nn = 0\nwhile x != 2:\n    x = d[x]\n    n += 1\n    if n > N:\n        x = -1\n        n = -1\n        break\n\nprint(n)"}
{"label": 67, "index": 8707, "code": "N = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input()))\ni = 1\ncnt = 0\nwhile(i != 2):\n    i = a[i - 1]\n    cnt += 1\n    if(cnt > N):\n        cnt = -1\n        break\nprint(cnt)"}
{"label": 67, "index": 8708, "code": "input_count = int(input().rstrip())\nbutton_list = [0,]\n\nfor _ in range(input_count):\n    button_list.append(int(input().rstrip()))    \n\npush_count = 0\nnext_button = 1\nwhile True:\n    next_button = button_list[next_button]\n    push_count += 1\n    \n    if next_button == 2:\n        print(push_count)\n        break\n    \n    if push_count == len(button_list):\n        print(-1)\n        break"}
{"label": 67, "index": 8709, "code": "n = int(input())\na = [int(input()) for i in range(n)]\n\ncount = 0\nnextbottun = 1\n\nwhile(nextbottun != 2 and count <= 100000):\n    nextbottun = a[nextbottun - 1]\n    count += 1\n\nif count <= 100000:\n    print(count)\nelse:\n    print(-1)\n"}
{"label": 68, "index": 8710, "code": "import math\ninf=float('inf')\nx = list(map(int, input().split()))\ny=[x[0]+x[1],x[1]+x[2],x[2]+x[0]]\nprint(min(y[:]))\n\nquit()"}
{"label": 68, "index": 8711, "code": "a = list(map(int, input().split()))\n\na.sort()\n\nprint(a[0]+a[1])\n"}
{"label": 68, "index": 8712, "code": "a = list(map(int, input().split()))\na.sort()\nprint(a[0] + a[1])"}
{"label": 68, "index": 8713, "code": "A = input().split()\n\na = int(A[0])\nb = int(A[1])\nc = int(A[2])\n\nminsum=a+b\n\nif a+c < minsum:\n    minsum = a+c\nif b+c < minsum:\n    minsum = b+c\n\nprint(minsum)\n"}
{"label": 68, "index": 8714, "code": "def main():\n    print(sum(sorted([int(i) for i in input().split()])[:2]))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 68, "index": 8715, "code": "a,b,c = map(int, input().split())\nprint(a+b+c-max(a,b,c))"}
{"label": 68, "index": 8716, "code": "print(sum(sorted(map(int,input().split()))[:2]))"}
{"label": 68, "index": 8717, "code": "a, b, c = map(int, input().split())\n\nprice = [a + b, b + c, a + c]\n\nprint(min(price))"}
{"label": 68, "index": 8718, "code": "a, b, c = list(map(int, input().split(\" \")))\nprint(min(a+b, b+c, c+a))"}
{"label": 68, "index": 8719, "code": "# encoding:utf-8\na, b, c = list(map(int, input().split()))\nprint(min(a + b, b+ c, c + a))"}
{"label": 68, "index": 8720, "code": "a, b, c = map(int, raw_input().split())\nprint a + b + c - max(a, b, c)\n"}
{"label": 68, "index": 8721, "code": "data=list(map(int,input().split()))\ndata.sort()\nprint(data[1]+data[0])                 "}
{"label": 68, "index": 8722, "code": "a,b,c=map(int,input().split())\nmin = a+b\nif min>a+c:\n    min=a+c\nif min>b+c:\n    min=b+c\nprint(min)"}
{"label": 68, "index": 8723, "code": "a,b,c = map(int,input().split())\nl = [a,b,c]\nimport math\nprint(sum(l) - max(l))"}
{"label": 68, "index": 8724, "code": "if __name__ == \"__main__\":\n    a, b, c = list(map(int, input().split()))\n    result = []\n    result.append(a + b)\n    result.append(a + c)\n    result.append(b + c)\n    \n    print(min(result))\n"}
{"label": 68, "index": 8725, "code": "# -*- coding: utf-8 -*-\n\na = map(int, raw_input().split())\na = sorted(a)\nprint(a[0]+a[1])\n"}
{"label": 68, "index": 8726, "code": "a,b,c =map(int,input().split())\n\nprint(min(a+b, a+c, b+c))"}
{"label": 68, "index": 8727, "code": "l = [int(n) for n in input().split()]\nprint(sum(sorted(l)[:2]))"}
{"label": 68, "index": 8728, "code": "import math\nbell = [int(i) for i in input().split()]\nprint(bell[0]+bell[1]+bell[2]-max(bell))"}
{"label": 68, "index": 8729, "code": "a,b,c = map(int,input().split())\nprint(sum(sorted([a,b,c])[0:2]))"}
{"label": 68, "index": 8730, "code": "a = map(int, raw_input().split())\nprint(sum(a) - max(a))"}
{"label": 68, "index": 8731, "code": "a = map(int, raw_input().split())\n\na.sort()\n\nprint a[0] + a[1]"}
{"label": 68, "index": 8732, "code": "\na=[]\na+=map(int,input().split())\n\na.sort()\n\nprint(a[0]+a[1])\n"}
{"label": 68, "index": 8733, "code": "import sys\n\na, b, c = map(int, input().split())\n\nsum_1 = a + b\nsum_2 = b + c\nsum_3 = c + a\n\nif sum_1 >= sum_2:\n    min_1 = sum_2\nelse: \n    min_1 = sum_1\n\nif min_1 >= sum_3:\n    ans = sum_3\nelse:\n    ans = min_1\n\nprint(ans)"}
{"label": 68, "index": 8734, "code": "#! -*- coding:utf-8 -*-\narr = input().split()\nfor i in range(len(arr)):\n    arr[i] = int(arr[i])\narr.sort()\n\ns = 0\nfor i in range(2):\n    s += arr[i]\n\nprint(s)\n"}
{"label": 68, "index": 8735, "code": "a,b,c = map(int,input().split())\nprint(a+b+c-max(a,b,c))"}
{"label": 68, "index": 8736, "code": "a,b,c=map(int,raw_input().split())\nprint min(a+b,b+c,c+a)"}
{"label": 68, "index": 8737, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\na = rli()\na.remove(max(a))\nprint(sum(a))"}
{"label": 68, "index": 8738, "code": "a, b, c = map(int,input().split())\nA = a + b\nB = a + c\nC = b + c\nans = min(A, B, C)\nprint(ans)"}
{"label": 68, "index": 8739, "code": "price = list(map(int, input().split(\" \")))\n\nprint(sum(price)-max(price))"}
{"label": 68, "index": 8740, "code": "a, b, c = input().split()\na = int(a)\nb = int(b)\nc = int(c)\nabc = [a, b, c]\nabc.sort()\nprint(abc[0]+abc[1])"}
{"label": 68, "index": 8741, "code": "l = map(int, raw_input().split())\nprint sum(l) - max(l)\n"}
{"label": 68, "index": 8742, "code": "a, b, c = map(int, raw_input().split())\nab = a + b\nbc = b + c\nca = c + a\n\nif ab <= bc and ab <= ca:\n    print ab\nelif bc <= ab and bc <= ca:\n    print bc\nelse:\n    print ca"}
{"label": 68, "index": 8743, "code": "abc = input().split(' ')\nmax_ = max(abc)\nabc =[ int(x) for x in abc]\ns=  0\nmin_ = min(abc) \nif abc[0] == abc[1] == abc[2] :\n    print(abc[0] + abc[1])\n\nelif abc.count(max(abc)) == 2:\n    print(max(abc) + min(abc))\n\n    \nelse:    \n    for i in abc:\n        if i != max(abc):\n            s += i\n    print(s)\n"}
{"label": 68, "index": 8744, "code": "l = list(map(int, input().split(' ')))\nl.sort()\nprint(l[0] + l[1])\n"}
{"label": 68, "index": 8745, "code": "price = input().split(\" \")\nprice.sort(key=int)\ntotal = int(price[0])+int(price[1])\nprint(total)"}
{"label": 68, "index": 8746, "code": "from sys import stdin\na = map(int,stdin.readline().split())\na.sort()\nprint a[0] + a[1]"}
{"label": 68, "index": 8747, "code": "st = input().split()\na = int(st[0])\nb = int(st[1])\nc = int(st[2])\n\nl = [a,b,c]\nl.sort()\nprint(l[0]+l[1])"}
{"label": 68, "index": 8748, "code": "nums = [int(x) for x in input().split()]\nnums.sort()\n\nans = nums[0] + nums[1]\nprint(ans)"}
{"label": 68, "index": 8749, "code": "a = [0 for i in range(3)]\nl = list(map(int, input().split()))\na[0] = l[0] + l[1]\na[1] = l[1] + l[2]\na[2] = l[2] + l[0]\na.sort()\nprint(a[0])\n"}
{"label": 68, "index": 8750, "code": "# -*- coding: utf-8 -*-\n\n#\u304a\u5e97\u306b\u3042\u308b\u30d9\u30eb\u306f 3 \u7a2e\u985e\u3067\u3001\u305d\u308c\u305e\u308c a\u5186\u3001 b\u5186\u3001 c\u5186\u3067\u3059\u3002\n#\u3053\u306e 3 \u3064\u306e\u3046\u3061\u3001\u7570\u306a\u308b 2 \u3064\u306e\u30d9\u30eb\u3092\u9078\u3093\u3067\u8cb7\u3046\u3068\u304d\u306e\u3001\u5024\u6bb5\u306e\u5408\u8a08\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u3066\u4e0b\u3055\u3044\u3002\n\nx = input().split()\n#x = [700, 600, 780]\n\ny =[int(x[0]), int(x[1]), int(x[2])]\n\nz = sorted(y)\n\nans = z[0] + z[1]\n\nprint(ans)\n"}
{"label": 68, "index": 8751, "code": "a, b, c = map(int, input().split(\" \"))\n\nif a <= c and b <= c:\n    print(a + b)\nelif a <= b and c <= b:\n    print(a + c)\nelif b <= a and c <= a:\n    print(b + c)\n"}
{"label": 68, "index": 8752, "code": "a, b, c = map(int, input().split())\nli = [a,b,c]\nli.sort()\nprint(li[0] + li[1])\n"}
{"label": 68, "index": 8753, "code": "\ndef main():\n    arg = input()\n    arg = arg.split()\n    a = int(arg[0])\n    b = int(arg[1])\n    c = int(arg[2])\n    bells = [a, b, c]\n    bells.sort()\n    print(bells[0] + bells[1])\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 68, "index": 8754, "code": "(a, b, c) = map(int, input().split())\nprint(a + b if a + b < (a + c if a + c < b + c else b + c) else (a + c if a + c < b + c else b + c))\n"}
{"label": 68, "index": 8755, "code": "a=map(int,raw_input().split())\na.sort()\nprint a[0] + a[1]"}
{"label": 68, "index": 8756, "code": "# -*- coding: utf-8 -*-\n\n#-------\n# Initialize\ncost = list(map(int, input().split()))\ncost.sort()\nprint(cost[0] + cost[1])\n"}
{"label": 68, "index": 8757, "code": "# -*- coding: utf-8 -*-\n\n#\u304a\u5e97\u306b\u3042\u308b\u30d9\u30eb\u306f 3 \u7a2e\u985e\u3067\u3001\u305d\u308c\u305e\u308c a\u5186\u3001 b\u5186\u3001 c\u5186\u3067\u3059\u3002\n#\u3053\u306e 3 \u3064\u306e\u3046\u3061\u3001\u7570\u306a\u308b 2 \u3064\u306e\u30d9\u30eb\u3092\u9078\u3093\u3067\u8cb7\u3046\u3068\u304d\u306e\u3001\u5024\u6bb5\u306e\u5408\u8a08\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u3066\u4e0b\u3055\u3044\u3002\n\nx = input().split()\n#x = [700, 600, 780]\n\ny =[int(x[0]), int(x[1]), int(x[2])]\n\nz = sorted(y)\n\nans = z[0] + z[1]\n\nprint(ans)\n\n\n"}
{"label": 68, "index": 8758, "code": "abc = input().split(' ')\nmax_ = max(abc)\nabc =[ int(x) for x in abc]\ns=  0\nmin_ = min(abc) \nif abc[0] == abc[1] == abc[2] :\n    print(abc[0] + abc[1])\n\nelif abc.count(max(abc)) == 2:\n    print(max(abc) + min(abc))\n\n    \nelse:    \n    for i in abc:\n        if i != max(abc):\n            s += i\n    print(s)\n"}
{"label": 68, "index": 8759, "code": "a,b,c=list(map(int,input().split()))\nma=max(a,b,c)\nprint(a+b+c-ma)"}
{"label": 68, "index": 8760, "code": "cost = list(map(int, input().split()))\ncost = sorted(cost)\nprint(sum(cost[:-1]))"}
{"label": 68, "index": 8761, "code": "src = map(int, raw_input().split())\nprint sum(src) - max(src)\n"}
{"label": 68, "index": 8762, "code": "# coding: utf-8\n# Here your code !\n\na = [int(i) for i in input().split()]\nans = sum(a)-max(a)\nprint(ans)"}
{"label": 68, "index": 8763, "code": "A, B, C = map(int, raw_input().split())\nmax_num = max([A,B,C])\nresult = A+B+C - max_num\nprint result"}
{"label": 68, "index": 8764, "code": "a, b, c = map(int, input().split())\n\nprint(min(a + b, b + c, c + a))"}
{"label": 68, "index": 8765, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nprices = list(map(int, sys.stdin.readline().split(' ')))\n\nprices.sort()\n\nprint (str(prices[0] + prices[1]))\n"}
{"label": 68, "index": 8766, "code": "a=list(map(int,input().split()))\na.sort()\nprint(a[0]+a[1])"}
{"label": 68, "index": 8767, "code": "print sum(sorted(map(int, raw_input().split()))[:2])"}
{"label": 68, "index": 8768, "code": "a,b,c = map(int,input().split())\nprint(min(a+b,a+c,b+c))\n"}
{"label": 68, "index": 8769, "code": "if __name__ == '__main__':\n\tprint (sum(sorted(list(map( int, input().split())))[0:2]))"}
{"label": 68, "index": 8770, "code": "A, B, C = map(int, input().split())\nprint(A+B+C-max(A,B,C))"}
{"label": 68, "index": 8771, "code": "n = map(int, raw_input().split())\nn.sort()\nprint n[0] + n[1]\n"}
{"label": 68, "index": 8772, "code": "a = [int(x) for x in input().split()]\ns = 0\nif a[0] <= a[1]:\n    s = a[0]\n    if a[1] <= a[2]:\n        s += a[1]\n    else:\n        s += a[2]\nelse:\n    s = a[1]\n    if a[0] <= a[2]:\n        s += a[0]\n    else:\n        s += a[2]\nprint(s)\n"}
{"label": 68, "index": 8773, "code": "abc = map(int, raw_input().rstrip().split(' '))\nlargest = max(abc)\nprint sum(abc) - largest\n"}
{"label": 68, "index": 8774, "code": "S = [int(i) for i in input().split(\" \")]\nprint(sum(S) - max(S))"}
{"label": 68, "index": 8775, "code": "a,b,c=map(int,input().split())\nprint(min(a+b,b+c,c+a))\n"}
{"label": 68, "index": 8776, "code": "(a, b, c) = map(int, input().split())\n\nans = a+b+c - max(a,b,c)\nprint(ans)"}
{"label": 68, "index": 8777, "code": "# coding: utf-8\n\nimport numpy as np\n\nif __name__==\"__main__\":\n    a,b,c = map(int,input().split())\n    bells = np.array([a,b,c])\n    bells.sort()\n    print(np.sum(bells[0:2]))\n"}
{"label": 68, "index": 8778, "code": "import sys\nimport scipy as sp\nimport numpy\n\nl = map(int, raw_input().split())\na=l[0]\nb=l[1]\nc=l[2]\n\nab=a+b\nbc=b+c\nca=c+a\n\nl.sort()\n\ngh=l[0]+l[1]\n\nprint gh"}
{"label": 68, "index": 8779, "code": "a,b,c = map(int,input().split())\narr = []\narr.append(a)\narr.append(b)\narr.append(c)\narr.sort()\nprint(arr[0] + arr[1])"}
{"label": 68, "index": 8780, "code": "# -*- coding: utf-8 -*-\n\na, b, c = map(int,raw_input().split())\n\nprint a + b + c - max(a, b, c)\n"}
{"label": 68, "index": 8781, "code": "\nn = input()\ns = n.split(\" \")\nfor i in range(3):\n    s[i] = int(s[i])\n\n\nprint(sum(s)-max(s))"}
{"label": 68, "index": 8782, "code": "a, b, c = [int(x) for x in input().split()]\nif a >= b and a >= c:\n\tprint(b + c)\nelif b >= a and b >= c:\n\tprint(a + c)\nelse:\n\tprint(a + b)\n"}
{"label": 68, "index": 8783, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef main():\n    a = list(map(int, input().split()))\n    print(sum(a) - max(a))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 68, "index": 8784, "code": "x,y,z = map(int, input().split())\na = []\na.append(x)\na.append(y)\na.append(z)\na.sort()\nprint((a[0]+a[1]))"}
{"label": 68, "index": 8785, "code": "l = list(map(int, input().split()))\nl.sort()\n\nA=l[0]+l[1]\nprint(A)"}
{"label": 68, "index": 8786, "code": "a, b, c = map(int, input().split())\nprint((a+b+c)-max(a, b, c))\n"}
{"label": 68, "index": 8787, "code": "import sys\n\nitems = [int(x) for x in sys.stdin.readline().rstrip().split()]\nitems.sort()\nprint items[0] + items[1]"}
{"label": 68, "index": 8788, "code": "_item = [int(e) for e in input().split(' ')]\n_sum = []\nfor i in range(3):\n\tfor j in range(i, 3):\n\t\tif i != j:\n\t\t\t_sum.append(_item[i] + _item[j])\nindex = 0\nfor i in range(len(_sum)):\n\tif i == 0 or _sum[index] > _sum[i]:\n\t\tindex = i\nprint(_sum[index])\n"}
{"label": 68, "index": 8789, "code": "a, b, c = map(int, input().split())\nsums = [a+b,b+c,c+a]\nprint(min(sums))\n"}
{"label": 68, "index": 8790, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    a, b, c = read_int_list()\n    p = sorted([a, b, c])\n    res = p[0] + p[1]\n    print(res)\n\n\nmain()\n"}
{"label": 68, "index": 8791, "code": "x=list(map(int,input().split()))\nprint(sum(x)-max(x))"}
{"label": 68, "index": 8792, "code": "import sys\nimport math\n\nl = raw_input().split()\nl[0] = int(l[0])\nl[1] = int(l[1])\nl[2] = int(l[2])\n\nsum = l[0]+l[1]+l[2]\nmin = sum\n\nfor i in range(3):\n    s = sum - l[i]\n    if s < min:\n        min = s\n\nprint min\n"}
{"label": 68, "index": 8793, "code": "a, b, c = map(int,input().split())\n\nprint((a+b+c) - max(a,b,c))\n"}
{"label": 68, "index": 8794, "code": "import numpy as np\n\na,b,c = map(int,input().split())\nans = np.sum(np.sort([a,b,c])[0:2])\nprint(ans)"}
{"label": 68, "index": 8795, "code": "a=list(map(int,input().split()))\na.sort()\nprint(a[0]+a[1])"}
{"label": 68, "index": 8796, "code": "a = list(map(int,input().split()))\na.sort()\nprint(a[0] + a[1])"}
{"label": 68, "index": 8797, "code": "a,b,c = map(int,input().split())\nprint(min(a+b,b+c,a+c))"}
{"label": 68, "index": 8798, "code": "l = list(map(int, input().split()))\n\ntmp = 0\nbuy_rings = []\nfor e in l:\n    if tmp == 0:\n        tmp = e\n        continue\n    if tmp <= e:\n        buy_rings.append(tmp)\n        tmp = e\n    else:\n        buy_rings.append(e)\n\nprint(sum(buy_rings))"}
{"label": 68, "index": 8799, "code": "a, b, c = [int(i) for i in input().split()]\n\nif a > b:\n  a, b = b, a\n\nif b > c:\n  b, c = c, b\n\nif a > b:\n  a, b = b, a\n\nprint(a+b)\n"}
{"label": 68, "index": 8800, "code": "\na,b,c=map(int,input().split())\n\na,b,c=a+b,b+c,c+a\n\nans=min(a,b,c)\n\nprint(ans)"}
{"label": 68, "index": 8801, "code": "inpt = map(int, raw_input().split())\ninpt.sort()\n\nprint inpt[0] + inpt[1]\n"}
{"label": 68, "index": 8802, "code": "bells = [int(x) for x in input().split()]\n\nbells = sorted(bells)\n\nans = bells[0]+bells[1]\n\nprint(ans)"}
{"label": 68, "index": 8803, "code": "abc = list(map(int, input().split()))\nabc.pop(abc.index(max(abc)))\nprint(sum(abc))"}
{"label": 68, "index": 8804, "code": "a = map(int, raw_input().split(\" \"))\na.sort()\nprint a[0] + a[1]"}
{"label": 68, "index": 8805, "code": "a = [int(i) for i in input().split()]\na = sorted(a)\nprint(a[0]+a[1])\n"}
{"label": 68, "index": 8806, "code": "import sys\na=0\nb=0\nc=0\nx=3\n\n\nv,y,z =[int(x) for x in input().split(\" \")]\n\na = v+y\nb = y+z\nc = z+v\n\nif a<b and a<c:\n\tprint (a)\n\nif b<c and b<a:\n\tprint (b)\n\nif c<b and c<a:\n\tprint (c)\n\nif a == b and b == c:\n\tprint (a)\n\nif a == b and b<c:\n\tprint (a)\n\nif a ==c and a<b:\n\tprint (a)\n\nif c==b and b<a:\n\tprint (c)"}
{"label": 68, "index": 8807, "code": "def ringring(x):\n    x.sort()\n    return x[0] + x[1]\n\nl = [int(i) for i in input().split()]\nprint(ringring(l))"}
{"label": 68, "index": 8808, "code": "A, B, C = raw_input().split()\n\na = int(A)\nb = int(B)\nc = int(C)\n\narr = []\narr.append(a + b)\narr.append(a + c)\narr.append(b + c)\n\nprint min(arr)"}
{"label": 68, "index": 8809, "code": "print(sum(sorted(map(int, input().split()))[:2]))\n"}
{"label": 68, "index": 8810, "code": "a = [int(i) for i in input().split()]\na.sort()\nprint(a[0] + a[1])"}
{"label": 68, "index": 8811, "code": "def min(a, b, c):\n    list = [a,b,c]\n    list.sort()\n    return list[0] + list[1]\n\nif(__name__ == \"__main__\"):\n    a, b, c = (int(i) for i in input().split())\n    print(min(a, b, c))\n"}
{"label": 68, "index": 8812, "code": "#! /usr/bin/env python3\n\nprint(sum(sorted(map(int,input().split()))[:2]))"}
{"label": 68, "index": 8813, "code": "a,b,c = map(int,input().split())\nlist = []\nlist.append(a)\nlist.append(b)\nlist.append(c)\nlist.sort()\nprint(list[0]+list[1])\n"}
{"label": 68, "index": 8814, "code": "a = list(map(int, input().split()))\na.remove(max(a))\nprint(sum(a))"}
{"label": 68, "index": 8815, "code": "tmp = [int(i) for i in input().split(' ')]\na = tmp[0]\nb = tmp[1]\nc = tmp[2]\nprint(min(a+b, b+c, c+a))"}
{"label": 68, "index": 8816, "code": "a, b, c = list(map(int, input().split()))\nprint(min([a + b, b + c, c + a]))"}
{"label": 68, "index": 8817, "code": "a=sorted(list(map(int,input().split())))\nprint(a[0]+a[1])"}
{"label": 68, "index": 8818, "code": "numsstr = input().split()\nnums = []\nfor n in numsstr:\n    nums.append(int(n))\nans = sum(nums)-max(nums)\nprint(ans)"}
{"label": 68, "index": 8819, "code": "a = [int(i) for i in input().split()]\nprint(sum(a)-max(a))\n"}
{"label": 68, "index": 8820, "code": "a,b,c=map(int,input().split())\nprint(a+b+c-max([a,b,c]))\n"}
{"label": 68, "index": 8821, "code": "a, b, c = map(int, input().split())\n\nans = min(a+b,b+c,c+a)\n\nprint(ans)\n\n"}
{"label": 68, "index": 8822, "code": "x = [int(i) for i in input().split(\" \")]\nx.sort()\nprint(x[0] + x[1])\n"}
{"label": 68, "index": 8823, "code": "a,b,c=map(int,input().split())\nd=[a,b,c]\nd.sort(reverse=True)\nsum = 0\n\nfor i in range(2):\n    sum += d.pop()\nprint(sum)"}
{"label": 68, "index": 8824, "code": "*X,=map(int,input().split());print(sum(X)-max(X))"}
{"label": 68, "index": 8825, "code": "a,b,c = map(int,input().split())\nl = [a,b,c]\nl.sort()\nprint(l[0]+l[1])"}
{"label": 68, "index": 8826, "code": "a,b,c = map(int,input().split())\nprint(a+b+c-max(a,b,c))"}
{"label": 68, "index": 8827, "code": "a = [int(i) for i in input().split()]\na = sorted(a)\nprint(a[0] + a[1])\n"}
{"label": 68, "index": 8828, "code": "#a, b, c = map(int, input().split())\nabc = list(int(i) for i in input().split())\n\nabc.sort()\nz = abc[0] + abc[1]\nprint(z)\n"}
{"label": 68, "index": 8829, "code": "# coding: utf-8\na,b,c = map(int, input().split())\nprint(min(a+b,b+c,c+a))"}
{"label": 68, "index": 8830, "code": "a=list(sorted(map(int,input().split())))\nprint(a[0]+a[1])"}
{"label": 68, "index": 8831, "code": "a , b, c = map(int , input().split())\nprint(min(a+b, b+c , c+a))"}
{"label": 68, "index": 8832, "code": "X = list(map(int, input().split()))\nprint(sum(X)-max(X))"}
{"label": 68, "index": 8833, "code": "a, b, c = map(int, input().split())\nprint(min(a+b, b+c, a+c))"}
{"label": 68, "index": 8834, "code": "a = sorted(map(int, input().split()))\nprint(a[0]+a[1])\n"}
{"label": 68, "index": 8835, "code": "a,b,c = map(int, input().split())\n\nprint(min(a+b,b+c,a+c))\n"}
{"label": 68, "index": 8836, "code": "abc = map(int, raw_input().split())\nabc = sorted(abc)\nprint abc[0] + abc[1]"}
{"label": 68, "index": 8837, "code": "a, b, c = list(map(int, input().split(\" \")))\nprint(\"%d\"%(a+b+c - max(max(a, b), c)))"}
{"label": 68, "index": 8838, "code": "def read_int_list():\n    return list(map(int, input().split()))\n\nn = read_int_list()\nn.sort()\nprint(n[0]+n[1])"}
{"label": 68, "index": 8839, "code": "def main():\n    abc = list(map(int, input().strip().split()))\n    print(sum(sorted(abc)[:2]))\n\nif __name__ == '__main__':\n    main()\n"}
